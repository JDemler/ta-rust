Alphabetic			    pub fn Alphabetic(c: char) -> bool 
Cc			    pub fn Cc(c: char) -> bool 
CharExt			pub trait CharExt 
CharExt for char			impl CharExt for char 
Copy for GraphemeCat			    impl Copy for GraphemeCat {}
Copy for Utf16Item			impl Copy for Utf16Item {}
DoubleEndedIterator for GraphemeIndices			impl<'a> DoubleEndedIterator for GraphemeIndices<'a> 
DoubleEndedIterator for Graphemes			impl<'a> DoubleEndedIterator for Graphemes<'a> 
DoubleEndedIterator for Words			impl<'a> DoubleEndedIterator for Words<'a> 
GraphemeCat			    pub enum GraphemeCat 
GraphemeIndices			pub struct GraphemeIndices<'a> 
GraphemeState			enum GraphemeState 
Graphemes			pub struct Graphemes<'a> 
Iterator for GraphemeIndices			impl<'a> Iterator for GraphemeIndices<'a> 
Iterator for Graphemes			impl<'a> Iterator for Graphemes<'a> 
Iterator for Utf16Encoder			impl<I> Iterator for Utf16Encoder<I> where I: Iterator<Item=char> 
Iterator for Utf16Items			impl<'a> Iterator for Utf16Items<'a> 
Iterator for Words			impl<'a> Iterator for Words<'a> 
Lowercase			    pub fn Lowercase(c: char) -> bool 
N			    pub fn N(c: char) -> bool 
UnicodeStr			pub trait UnicodeStr 
UnicodeStr for str			impl UnicodeStr for str 
Uppercase			    pub fn Uppercase(c: char) -> bool 
Utf16Encoder			impl<I> Utf16Encoder<I> 
Utf16Encoder			pub struct Utf16Encoder<I> 
Utf16Item			impl Utf16Item 
Utf16Item			pub enum Utf16Item 
Utf16Items			pub struct Utf16Items<'a> 
White_Space			    pub fn White_Space(c: char) -> bool 
Words			pub struct Words<'a> 
XID_Continue			    pub fn XID_Continue(c: char) -> bool 
XID_Start			    pub fn XID_Start(c: char) -> bool 
bsearch_case_table			    fn bsearch_case_table(c: char, table: &'static [(char, char)]) -> Option<uint> 
bsearch_range_table			fn bsearch_range_table(c: char, r: &'static [(char,char)]) -> bool 
bsearch_range_value_table			    fn bsearch_range_value_table(c: char, is_cjk: bool, r: &'static [(char, char, u8, u8)]) -> u8 
bsearch_range_value_table			    fn bsearch_range_value_table(c: char, r: &'static [(char, char, GraphemeCat)]) -> GraphemeCat 
bsearch_range_value_table			    fn bsearch_range_value_table(c: char, r: &'static [(char, char, u8)]) -> u8 
bsearch_table			fn bsearch_table<T>(c: char, r: &'static [(char, &'static [T])]) -> Option<&'static [T]> 
canonical_combining_class			    pub fn canonical_combining_class(c: char) -> u8 
char			pub mod char 
charwidth			pub mod charwidth 
compose			pub fn compose(a: char, b: char) -> Option<char> 
compose_hangul			fn compose_hangul(a: char, b: char) -> Option<char> 
conversions			pub mod conversions 
d			fn d<F>(c: char, i: &mut F, k: bool) where F: FnMut(char) 
decompose_canonical			pub fn decompose_canonical<F>(c: char, mut i: F) where F: FnMut(char) { d(c, &mut i, false); }
decompose_compatible			pub fn decompose_compatible<F>(c: char, mut i: F) where F: FnMut(char) { d(c, &mut i, true); }
decompose_hangul			fn decompose_hangul<F>(s: char, f: &mut F) where F: FnMut(char) 
derived_property			pub mod derived_property 
encode_utf16			    fn encode_utf16(self, dst: &mut [u16]) -> Option<uint> { C::encode_utf16(self, dst) }
encode_utf16			    fn encode_utf16(self, dst: &mut [u16]) -> Option<uint>;
encode_utf8			    fn encode_utf8(self, dst: &mut [u8]) -> Option<uint> { C::encode_utf8(self, dst) }
encode_utf8			    fn encode_utf8(self, dst: &mut [u8]) -> Option<uint>;
escape_default			    fn escape_default(self) -> char::EscapeDefault { C::escape_default(self) }
escape_default			    fn escape_default(self) -> char::EscapeDefault;
escape_unicode			    fn escape_unicode(self) -> char::EscapeUnicode { C::escape_unicode(self) }
escape_unicode			    fn escape_unicode(self) -> char::EscapeUnicode;
general_category			pub mod general_category 
grapheme			pub mod grapheme 
grapheme_category			    pub fn grapheme_category(c: char) -> GraphemeCat 
grapheme_indices			    fn grapheme_indices(&self, is_extended: bool) -> GraphemeIndices 
grapheme_indices			    fn grapheme_indices<'a>(&'a self, is_extended: bool) -> GraphemeIndices<'a>;
graphemes			    fn graphemes(&self, is_extended: bool) -> Graphemes 
graphemes			    fn graphemes<'a>(&'a self, is_extended: bool) -> Graphemes<'a>;
is_alphabetic			    fn is_alphabetic(self) -> bool 
is_alphabetic			    fn is_alphabetic(self) -> bool;
is_alphanumeric			    fn is_alphanumeric(self) -> bool 
is_alphanumeric			    fn is_alphanumeric(self) -> bool;
is_alphanumeric			    fn is_alphanumeric(&self) -> bool { self.chars().all(|c| c.is_alphanumeric()) }
is_alphanumeric			    fn is_alphanumeric(&self) -> bool;
is_control			    fn is_control(self) -> bool { general_category::Cc(self) }
is_control			    fn is_control(self) -> bool;
is_digit			    fn is_digit(self, radix: uint) -> bool { C::is_digit(self, radix) }
is_digit			    fn is_digit(self, radix: uint) -> bool;
is_lowercase			    fn is_lowercase(self) -> bool 
is_lowercase			    fn is_lowercase(self) -> bool;
is_not_empty			        fn is_not_empty(s: &&str) -> bool { !s.is_empty() }
is_numeric			    fn is_numeric(self) -> bool 
is_numeric			    fn is_numeric(self) -> bool;
is_uppercase			    fn is_uppercase(self) -> bool 
is_uppercase			    fn is_uppercase(self) -> bool;
is_utf16			pub fn is_utf16(v: &[u16]) -> bool 
is_whitespace			    fn is_whitespace(self) -> bool 
is_whitespace			    fn is_whitespace(self) -> bool;
is_whitespace			        fn is_whitespace(c: char) -> bool { c.is_whitespace() }
is_whitespace			    fn is_whitespace(&self) -> bool { self.chars().all(|c| c.is_whitespace()) }
is_whitespace			    fn is_whitespace(&self) -> bool;
is_xid_continue			    fn is_xid_continue(self) -> bool { derived_property::XID_Continue(self) }
is_xid_continue			    fn is_xid_continue(self) -> bool;
is_xid_start			    fn is_xid_start(self) -> bool { derived_property::XID_Start(self) }
is_xid_start			    fn is_xid_start(self) -> bool;
len_utf16			    fn len_utf16(self) -> uint { C::len_utf16(self) }
len_utf16			    fn len_utf16(self) -> uint;
len_utf8			    fn len_utf8(self) -> uint { C::len_utf8(self) }
len_utf8			    fn len_utf8(self) -> uint;
new			    pub fn new(chars: I) -> Utf16Encoder<I> where I: Iterator<Item=char> 
next			    fn next(&mut self) -> Option<&'a str> { self.inner.next() }
next			    fn next(&mut self) -> Option<&'a str> 
next			    fn next(&mut self) -> Option<(uint, &'a str)> 
next			    fn next(&mut self) -> Option<Utf16Item> 
next			    fn next(&mut self) -> Option<u16> 
next_back			    fn next_back(&mut self) -> Option<&'a str> { self.inner.next_back() }
next_back			    fn next_back(&mut self) -> Option<&'a str> 
next_back			    fn next_back(&mut self) -> Option<(uint, &'a str)> 
normalization			pub mod normalization 
normalize			mod normalize;
property			pub mod property 
regex			pub mod regex 
script			pub mod script 
size_hint			    fn size_hint(&self) -> (uint, Option<uint>) 
std			mod std 
str			pub mod str 
tables			mod tables;
to_char_lossy			    pub fn to_char_lossy(&self) -> char 
to_digit			    fn to_digit(self, radix: uint) -> Option<uint> { C::to_digit(self, radix) }
to_digit			    fn to_digit(self, radix: uint) -> Option<uint>;
to_lower			    pub fn to_lower(c: char) -> char 
to_lowercase			    fn to_lowercase(self) -> char { conversions::to_lower(self) }
to_lowercase			    fn to_lowercase(self) -> char;
to_upper			    pub fn to_upper(c: char) -> char 
to_uppercase			    fn to_uppercase(self) -> char { conversions::to_upper(self) }
to_uppercase			    fn to_uppercase(self) -> char;
trim			    fn trim(&self) -> &str 
trim			    fn trim<'a>(&'a self) -> &'a str;
trim_left			    fn trim_left(&self) -> &str 
trim_left			    fn trim_left<'a>(&'a self) -> &'a str;
trim_right			    fn trim_right(&self) -> &str 
trim_right			    fn trim_right<'a>(&'a self) -> &'a str;
u_char			mod u_char;
u_str			mod u_str;
utf16_items			pub fn utf16_items<'a>(v: &'a [u16]) -> Utf16Items<'a> 
utf8_char_width			pub fn utf8_char_width(b: u8) -> uint 
width			    pub fn width(c: char, is_cjk: bool) -> Option<uint> 
width			    fn width(self, is_cjk: bool) -> Option<uint> { charwidth::width(self, is_cjk) }
width			    fn width(self, is_cjk: bool) -> Option<uint>;
width			    fn width(&self, is_cjk: bool) -> uint 
width			    fn width(&self, is_cjk: bool) -> uint;
words			    fn words(&self) -> Words 
words			    fn words<'a>(&'a self) -> Words<'a>;
