AssocItemResolveResult			enum AssocItemResolveResult 
Bar			    pub mod Bar { }
BareIdentifierPatternResolution			enum BareIdentifierPatternResolution 
BindingInfo			struct BindingInfo 
BuildReducedGraphVisitor			struct BuildReducedGraphVisitor<'a, 'b:'a, 'tcx:'b> 
CrateMap			pub struct CrateMap 
Deref for ExportRecorder			impl<'a, 'b, 'tcx:'b> Deref for ExportRecorder<'a, 'b, 'tcx> 
Deref for GraphBuilder			impl<'a, 'b:'a, 'tcx:'b> Deref for GraphBuilder<'a, 'b, 'tcx> 
Deref for UnusedImportCheckVisitor			impl<'a, 'b, 'tcx:'b> Deref for UnusedImportCheckVisitor<'a, 'b, 'tcx> 
DerefMut for ExportRecorder			impl<'a, 'b, 'tcx:'b> DerefMut for ExportRecorder<'a, 'b, 'tcx> 
DerefMut for GraphBuilder			impl<'a, 'b:'a, 'tcx:'b> DerefMut for GraphBuilder<'a, 'b, 'tcx> 
DerefMut for UnusedImportCheckVisitor			impl<'a, 'b, 'tcx:'b> DerefMut for UnusedImportCheckVisitor<'a, 'b, 'tcx> 
DuplicateCheckingMode			enum DuplicateCheckingMode 
ExportRecorder			impl<'a, 'b, 'tcx> ExportRecorder<'a, 'b, 'tcx> 
ExportRecorder			struct ExportRecorder<'a, 'b:'a, 'tcx:'b> 
FallbackChecks			enum FallbackChecks 
FallbackSuggestion			enum FallbackSuggestion 
GraphBuilder			impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> 
GraphBuilder			struct GraphBuilder<'a, 'b:'a, 'tcx:'b> 
ImportDirective			impl ImportDirective 
ImportDirective			pub struct ImportDirective 
ImportDirectiveSubclass			pub enum ImportDirectiveSubclass 
ImportResolution			impl ImportResolution 
ImportResolution			pub struct ImportResolution 
ImportResolver			impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> 
ImportResolver			struct ImportResolver<'a, 'b:'a, 'tcx:'b> 
MakeGlobMap			pub enum MakeGlobMap 
Module			impl Module 
Module			pub struct Module 
ModuleKind			enum ModuleKind 
ModulePrefixResult			enum ModulePrefixResult 
NameBindings			impl NameBindings 
NameBindings			pub struct NameBindings 
NameDefinition			enum NameDefinition 
NameSearchType			enum NameSearchType 
Namespace			enum Namespace 
NamespaceError			enum NamespaceError 
NamespaceResult			enum NamespaceResult 
NamespaceResult			impl NamespaceResult 
ParentLink			enum ParentLink 
PatternBindingMode			enum PatternBindingMode 
PrimitiveTypeTable			impl PrimitiveTypeTable 
PrimitiveTypeTable			struct PrimitiveTypeTable 
ResolveResult			enum ResolveResult<T> 
ResolveResult			impl<T> ResolveResult<T> 
Resolver			impl<'a, 'tcx> Resolver<'a, 'tcx> 
Resolver			pub struct Resolver<'a, 'tcx:'a> 
Rib			impl Rib 
Rib			struct Rib 
RibKind			enum RibKind 
Shadowable			pub enum Shadowable 
Target			impl Target 
Target			pub struct Target 
TypeNsDef			struct TypeNsDef 
TypeParameters			enum TypeParameters<'a> 
UnusedImportCheckVisitor			impl<'a, 'b, 'tcx> UnusedImportCheckVisitor<'a, 'b, 'tcx> 
UnusedImportCheckVisitor			struct UnusedImportCheckVisitor<'a, 'b:'a, 'tcx:'b> 
UseLexicalScopeFlag			enum UseLexicalScopeFlag 
ValueNsDef			struct ValueNsDef 
Visitor for BuildReducedGraphVisitor			impl<'a, 'b, 'v, 'tcx> Visitor<'v> for BuildReducedGraphVisitor<'a, 'b, 'tcx> 
Visitor for Resolver			impl<'a, 'v, 'tcx> Visitor<'v> for Resolver<'a, 'tcx> 
Visitor for UnusedImportCheckVisitor			impl<'a, 'b, 'v, 'tcx> Visitor<'v> for UnusedImportCheckVisitor<'a, 'b, 'tcx> 
abc			struct abc;
add_child			    fn add_child(&self,
add_exports_for_module			    fn add_exports_for_module(&mut self,
add_exports_of_namebindings			    fn add_exports_of_namebindings(&mut self,
add_trait_info			        fn add_trait_info(found_traits: &mut Vec<DefId>,
all_imports_resolved			    fn all_imports_resolved(&self) -> bool 
bar			mod bar 
baz			    pub mod baz {}
baz			    pub struct baz;
binding_mode_map			    fn binding_mode_map(&mut self, pat: &Pat) -> BindingMap 
block_needs_anonymous_module			    fn block_needs_anonymous_module(&mut self, block: &Block) -> bool 
build_import_directive			    fn build_import_directive(&mut self,
build_reduced_graph			    fn build_reduced_graph(self, krate: &ast::Crate) 
build_reduced_graph			pub fn build_reduced_graph(resolver: &mut Resolver, krate: &ast::Crate) 
build_reduced_graph			mod build_reduced_graph;
build_reduced_graph_for_block			    fn build_reduced_graph_for_block(&mut self, block: &Block, parent: &Rc<Module>) -> Rc<Module> 
build_reduced_graph_for_external_crate			    fn build_reduced_graph_for_external_crate(&mut self, root: &Rc<Module>) 
build_reduced_graph_for_external_crate_def			    fn build_reduced_graph_for_external_crate_def(&mut self,
build_reduced_graph_for_foreign_item			    fn build_reduced_graph_for_foreign_item(&mut self,
build_reduced_graph_for_item			    fn build_reduced_graph_for_item(&mut self, item: &Item, parent: &Rc<Module>) -> Rc<Module> 
build_reduced_graph_for_variant			    fn build_reduced_graph_for_variant(&mut self,
check_consistent_bindings			    fn check_consistent_bindings(&mut self, arm: &Arm) 
check_crate			pub fn check_crate(resolver: &mut Resolver, krate: &ast::Crate) 
check_for_conflicting_import			    fn check_for_conflicting_import(&mut self,
check_for_conflicts_between_external_crates			    fn check_for_conflicts_between_external_crates(&self,
check_for_conflicts_between_external_crates_and_items			    fn check_for_conflicts_between_external_crates_and_items(&self,
check_for_conflicts_between_imports_and_items			    fn check_for_conflicts_between_imports_and_items(&mut self,
check_if_primitive_type_name			    fn check_if_primitive_type_name(&self, name: Name, span: Span) 
check_that_import_is_importable			    fn check_that_import_is_importable(&mut self,
check_trait_item			    fn check_trait_item(&self, name: Name, span: Span) 
check_unused			mod check_unused;
collect_mod			    fn collect_mod(names: &mut Vec<ast::Name>, module: &Module) 
create_name_bindings_from_module			    fn create_name_bindings_from_module(module: Rc<Module>) -> NameBindings 
def_for_namespace			    fn def_for_namespace(&self, namespace: Namespace) -> Option<Def> 
define_module			    fn define_module(&self,
define_type			    fn define_type(&self, def: Def, sp: Span, modifiers: DefModifiers) 
define_value			    fn define_value(&self, def: Def, sp: Span, modifiers: DefModifiers) 
defined_in_namespace			    fn defined_in_namespace(&self, namespace: Namespace) -> bool 
defined_in_namespace_with			    fn defined_in_namespace_with(&self, namespace: Namespace, modifiers: DefModifiers) -> bool 
defined_in_public_namespace			    fn defined_in_public_namespace(&self, namespace: Namespace) -> bool 
deref			    fn deref(&self) -> &Resolver<'b, 'tcx> 
deref			    fn deref<'c>(&'c self) -> &'c Resolver<'b, 'tcx> 
deref			    fn deref<'c>(&'c self) -> &'c Resolver<'b, 'tcx> 
deref_mut			    fn deref_mut(&mut self) -> &mut Resolver<'b, 'tcx> 
deref_mut			    fn deref_mut<'c>(&'c mut self) -> &'c mut Resolver<'b, 'tcx> 
deref_mut			    fn deref_mut<'c>(&'c mut self) -> &'c mut Resolver<'b, 'tcx> 
diagnostics			pub mod diagnostics;
dump_module			    fn dump_module(&mut self, module_: Rc<Module>) 
enforce_default_binding_mode			    fn enforce_default_binding_mode(&mut self,
extract_path_and_node_id			        fn extract_path_and_node_id(t: &Ty, allow: FallbackChecks)
f			fn f() 
finalize_import			    fn finalize_import(&mut self, id: ast::NodeId, span: Span) 
find_best_match_for_name			    fn find_best_match_for_name(&mut self, name: &str) -> Option<String> 
find_fallback_in_self_type			    fn find_fallback_in_self_type(&mut self, name: Name) -> FallbackSuggestion 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt::Debug for Module			impl fmt::Debug for Module 
foo			     pub fn foo() {}
foo			fn foo() {}
foo			mod foo 
get_binding			                        fn get_binding(this: &mut Resolver,
get_module			        fn get_module(this: &mut Resolver, span: Span, name_path: &[ast::Name])
get_module			    fn get_module(&self) -> Rc<Module> 
get_module_if_available			    fn get_module_if_available(&self) -> Option<Rc<Module>> 
get_nearest_normal_module_parent			    fn get_nearest_normal_module_parent(&mut self, module_: Rc<Module>)
get_nearest_normal_module_parent_or_self			    fn get_nearest_normal_module_parent_or_self(&mut self, module_: Rc<Module>)
get_parent_link			    fn get_parent_link(&mut self, parent: &Rc<Module>, name: Name) -> ParentLink 
get_trait_name			    fn get_trait_name(&self, did: DefId) -> Name 
get_traits_containing_item			    fn get_traits_containing_item(&mut self, name: Name) -> Vec<DefId> 
handle_external_def			    fn handle_external_def(&mut self,
id			    pub fn id(&self, namespace: Namespace) -> NodeId 
import_directive_subclass_to_string			fn import_directive_subclass_to_string(subclass: ImportDirectiveSubclass) -> String 
import_path_to_string			fn import_path_to_string(names: &[Name],
indeterminate			    fn indeterminate(&self) -> bool 
intern			    fn intern(&mut self, string: &str, primitive_type: PrimTy) 
is_public			    fn is_public(&self, namespace: Namespace) -> bool 
is_static_method			        fn is_static_method(this: &Resolver, did: DefId) -> bool 
is_unbound			    fn is_unbound(&self) -> bool 
is_unknown			    fn is_unknown(&self) -> bool 
main			fn main() {}
merge_import_resolution			    fn merge_import_resolution(&mut self,
module_to_string			fn module_to_string(module: &Module) -> String 
names_to_string			fn names_to_string(names: &[Name]) -> String 
namespace_error_to_string			fn namespace_error_to_string(ns: NamespaceError) -> &'static str 
new			    fn new() -> NameBindings 
new			    fn new() -> PrimitiveTypeTable 
new			    fn new(kind: RibKind) -> Rib 
new			    fn new(parent_link: ParentLink,
new			    fn new(session: &'a Session,
new			    pub fn new(id: NodeId, is_public: bool) -> ImportResolution 
new			    pub fn new(module_path: Vec<Name> ,
new			    pub fn new(target_module: Rc<Module>,
or			                                    struct or enum variant",
path_names_to_string			fn path_names_to_string(path: &Path, depth: usize) -> String 
populate_external_module			    fn populate_external_module(&mut self, module: &Rc<Module>) 
populate_module_if_necessary			    fn populate_module_if_necessary(&mut self, module: &Rc<Module>) 
populate_module_if_necessary			pub fn populate_module_if_necessary(resolver: &mut Resolver, module: &Rc<Module>) 
record			pub fn record(resolver: &mut Resolver) 
record_candidate_traits_for_expr_if_necessary			    fn record_candidate_traits_for_expr_if_necessary(&mut self, expr: &Expr) 
record_def			    fn record_def(&mut self, node_id: NodeId, resolution: PathResolution) 
record_exports			mod record_exports;
record_exports_for_module			    fn record_exports_for_module(&mut self, module_: &Module) 
record_exports_for_module_subtree			    fn record_exports_for_module_subtree(&mut self,
record_import_use			    fn record_import_use(&mut self, import_id: NodeId, name: Name) 
report_unresolved_imports			    fn report_unresolved_imports(&mut self, module_: Rc<Module>) 
resolve_arm			    fn resolve_arm(&mut self, arm: &Arm) 
resolve_bare_identifier_pattern			    fn resolve_bare_identifier_pattern(&mut self, name: Name, span: Span)
resolve_block			    fn resolve_block(&mut self, block: &Block) 
resolve_crate			    fn resolve_crate(&mut self, krate: &ast::Crate) 
resolve_crate			pub fn resolve_crate<'a, 'tcx>(session: &'a Session,
resolve_crate_relative_path			    fn resolve_crate_relative_path(&mut self,
resolve_definition_of_name_in_module			    fn resolve_definition_of_name_in_module(&mut self,
resolve_error			    fn resolve_error(&self, span: Span, s: &str) 
resolve_expr			    fn resolve_expr(&mut self, expr: &Expr) 
resolve_function			    fn resolve_function(&mut self,
resolve_generics			    fn resolve_generics(&mut self, generics: &Generics) 
resolve_glob_import			    fn resolve_glob_import(&mut self,
resolve_identifier			    fn resolve_identifier(&mut self,
resolve_identifier_in_local_ribs			    fn resolve_identifier_in_local_ribs(&mut self,
resolve_implementation			    fn resolve_implementation(&mut self,
resolve_import_for_module			    fn resolve_import_for_module(&mut self,
resolve_imports			mod resolve_imports;
resolve_imports			    fn resolve_imports(&mut self) 
resolve_imports			pub fn resolve_imports(resolver: &mut Resolver) 
resolve_imports_for_module			    fn resolve_imports_for_module(&mut self, module: Rc<Module>) 
resolve_imports_for_module_subtree			    fn resolve_imports_for_module_subtree(&mut self, module_: Rc<Module>) 
resolve_item			    fn resolve_item(&mut self, item: &Item) 
resolve_item_by_name_in_lexical_scope			    fn resolve_item_by_name_in_lexical_scope(&mut self,
resolve_item_in_lexical_scope			    fn resolve_item_in_lexical_scope(&mut self,
resolve_local			    fn resolve_local(&mut self, local: &Local) 
resolve_module_in_lexical_scope			    fn resolve_module_in_lexical_scope(&mut self,
resolve_module_path			    fn resolve_module_path(&mut self,
resolve_module_path_from_root			    fn resolve_module_path_from_root(&mut self,
resolve_module_prefix			    fn resolve_module_prefix(&mut self,
resolve_module_relative_path			    fn resolve_module_relative_path(&mut self,
resolve_name_in_module			    fn resolve_name_in_module(&mut self,
resolve_path			    fn resolve_path(&mut self,
resolve_pattern			    fn resolve_pattern(&mut self,
resolve_possibly_assoc_item			    fn resolve_possibly_assoc_item(&mut self,
resolve_single_import			    fn resolve_single_import(&mut self,
resolve_trait_reference			    fn resolve_trait_reference(&mut self,
resolve_type			    fn resolve_type(&mut self, ty: &Ty) 
search_label			    fn search_label(&self, name: Name) -> Option<DefLike> 
search_parent_externals			        fn search_parent_externals(needle: Name, module: &Rc<Module>)
search_ribs			    fn search_ribs(&self,
set_module_kind			    fn set_module_kind(&self,
set_target_and_id			    pub fn set_target_and_id(&mut self,
shadowable			    pub fn shadowable(&self, namespace: Namespace) -> Shadowable 
span_for_namespace			    fn span_for_namespace(&self, namespace: Namespace) -> Option<Span> 
target_for_namespace			    pub fn target_for_namespace(&self, namespace: Namespace)
upvarify			    fn upvarify(&self,
visit_arm			    fn visit_arm(&mut self, arm: &Arm) 
visit_block			    fn visit_block(&mut self, block: &Block) 
visit_block			    fn visit_block(&mut self, block: &Block) 
visit_expr			    fn visit_expr(&mut self, expr: &Expr) 
visit_fn			    fn visit_fn(&mut self,
visit_foreign_item			    fn visit_foreign_item(&mut self, foreign_item: &ForeignItem) 
visit_foreign_item			    fn visit_foreign_item(&mut self, foreign_item: &ast::ForeignItem) 
visit_generics			    fn visit_generics(&mut self, generics: &Generics) 
visit_item			    fn visit_item(&mut self, item: &Item) 
visit_item			    fn visit_item(&mut self, item: &ast::Item) 
visit_item			    fn visit_item(&mut self, item: &Item) 
visit_local			    fn visit_local(&mut self, local: &Local) 
visit_poly_trait_ref			    fn visit_poly_trait_ref(&mut self,
visit_ty			    fn visit_ty(&mut self, ty: &Ty) 
visit_variant			    fn visit_variant(&mut self, variant: &ast::Variant, generics: &Generics) 
with_constant_rib			    fn with_constant_rib<F>(&mut self, f: F) where
with_current_self_type			    fn with_current_self_type<T, F>(&mut self, self_type: &Ty, f: F) -> T
with_label_rib			    fn with_label_rib<F>(&mut self, f: F) where
with_no_errors			    fn with_no_errors<T, F>(&mut self, f: F) -> T where
with_optional_trait_ref			    fn with_optional_trait_ref<T, F>(&mut self,
with_scope			    fn with_scope<F>(&mut self, name: Option<Name>, f: F) where
with_self_rib			    fn with_self_rib<F>(&mut self, self_def: Def, f: F)
with_type_parameter_rib			    fn with_type_parameter_rib<F>(&mut self, type_parameters: TypeParameters, f: F) where
xyz			struct xyz;
