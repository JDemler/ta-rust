FailType			pub enum FailType 
Fail_			impl Fail_ 
Fail_			pub enum Fail_ 
HasArg			pub enum HasArg 
LengthLimit			    enum LengthLimit 
Matches			impl Matches 
Matches			pub struct Matches 
Name			impl Name 
Name			pub enum Name 
Occur			pub enum Occur 
Opt			pub struct Opt 
OptGroup			impl OptGroup 
OptGroup			pub struct OptGroup 
Optval			enum Optval 
SplitWithinState			    enum SplitWithinState 
Whitespace			    enum Whitespace 
check_fail_type			    fn check_fail_type(f: Fail_, ft: FailType) 
each_split_within			fn each_split_within<'a>(ss: &'a str, lim: uint, it: |&'a str| -> bool)
f			    fn f(_x: uint) -> Vec<Optval> { return Vec::new(); }
find_opt			fn find_opt(opts: &[Opt], nm: Name) -> Option<uint> 
format_option			fn format_option(opt: &OptGroup) -> ~str 
from_str			    fn from_str(nm: &str) -> Name 
getopts			pub fn getopts(args: &[~str], optgrps: &[OptGroup]) -> Result 
is_arg			fn is_arg(arg: &str) -> bool 
long_to_short			    pub fn long_to_short(&self) -> Opt 
opt			pub fn opt(short_name: &str,
opt_count			    pub fn opt_count(&self, nm: &str) -> uint 
opt_default			    pub fn opt_default(&self, nm: &str, def: &str) -> Option<~str> 
opt_present			    pub fn opt_present(&self, nm: &str) -> bool 
opt_str			    pub fn opt_str(&self, nm: &str) -> Option<~str> 
opt_strs			    pub fn opt_strs(&self, nm: &str) -> Vec<~str> 
opt_val			    fn opt_val(&self, nm: &str) -> Option<Optval> 
opt_vals			    fn opt_vals(&self, nm: &str) -> Vec<Optval> 
optflag			pub fn optflag(short_name: &str, long_name: &str, desc: &str) -> OptGroup 
optflagmulti			pub fn optflagmulti(short_name: &str, long_name: &str, desc: &str) -> OptGroup 
optflagopt			pub fn optflagopt(short_name: &str, long_name: &str, desc: &str, hint: &str) -> OptGroup 
optmulti			pub fn optmulti(short_name: &str, long_name: &str, desc: &str, hint: &str) -> OptGroup 
optopt			pub fn optopt(short_name: &str, long_name: &str, desc: &str, hint: &str) -> OptGroup 
opts_present			    pub fn opts_present(&self, names: &[~str]) -> bool 
opts_str			    pub fn opts_str(&self, names: &[~str]) -> Option<~str> 
reqopt			pub fn reqopt(short_name: &str, long_name: &str, desc: &str, hint: &str) -> OptGroup 
short_usage			pub fn short_usage(program_name: &str, opts: &[OptGroup]) -> ~str 
t			    fn t(s: &str, i: uint, u: &[~str]) 
test_aliases_long_and_short			    fn test_aliases_long_and_short() 
test_combined			    fn test_combined() 
test_long_to_short			    fn test_long_to_short() 
test_multi			    fn test_multi() 
test_nospace			    fn test_nospace() 
test_optflag			    fn test_optflag() 
test_optflag_long_arg			    fn test_optflag_long_arg() 
test_optflag_missing			    fn test_optflag_missing() 
test_optflag_multi			    fn test_optflag_multi() 
test_optflag_short_arg			    fn test_optflag_short_arg() 
test_optflagmulti_long1			    fn test_optflagmulti_long1() 
test_optflagmulti_long2			    fn test_optflagmulti_long2() 
test_optflagmulti_mix			    fn test_optflagmulti_mix() 
test_optflagmulti_short1			    fn test_optflagmulti_short1() 
test_optflagmulti_short2a			    fn test_optflagmulti_short2a() 
test_optflagmulti_short2b			    fn test_optflagmulti_short2b() 
test_optmulti			    fn test_optmulti() 
test_optmulti_missing			    fn test_optmulti_missing() 
test_optmulti_multi			    fn test_optmulti_multi() 
test_optmulti_no_arg			    fn test_optmulti_no_arg() 
test_optopt			    fn test_optopt() 
test_optopt_missing			    fn test_optopt_missing() 
test_optopt_multi			    fn test_optopt_multi() 
test_optopt_no_arg			    fn test_optopt_no_arg() 
test_reqopt			    fn test_reqopt() 
test_reqopt_missing			    fn test_reqopt_missing() 
test_reqopt_multi			    fn test_reqopt_multi() 
test_reqopt_no_arg			    fn test_reqopt_no_arg() 
test_short_usage			    fn test_short_usage() 
test_split_within			fn test_split_within() 
test_unrecognized_option			    fn test_unrecognized_option() 
test_usage			    fn test_usage() 
test_usage_description_multibyte_handling			    fn test_usage_description_multibyte_handling() 
test_usage_description_wrapping			    fn test_usage_description_wrapping() 
tests			mod tests 
to_err_msg			    pub fn to_err_msg(self) -> ~str 
to_str			    fn to_str(&self) -> ~str 
usage			pub fn usage(brief: &str, opts: &[OptGroup]) -> ~str 
