Fail			pub enum Fail 
FailType			pub enum FailType 
HasArg			pub enum HasArg 
LengthLimit			enum LengthLimit 
Matches			impl Matches 
Matches			pub struct Matches 
Name			impl Name 
Name			pub enum Name 
Occur			pub enum Occur 
Opt			pub struct Opt 
OptGroup			impl OptGroup 
OptGroup			pub struct OptGroup 
Optval			enum Optval 
SplitWithinState			enum SplitWithinState 
Whitespace			enum Whitespace 
each_split_within			fn each_split_within<F>(ss: &str, lim: usize, mut it: F) -> bool where
f			    fn f(_x: usize) -> Vec<Optval> { Vec::new() }
find_opt			fn find_opt(opts: &[Opt], nm: Name) -> Option<usize> 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt::Display for Fail			impl fmt::Display for Fail 
format_option			fn format_option(opt: &OptGroup) -> String 
from_str			    fn from_str(nm: &str) -> Name 
getopts			pub fn getopts(args: &[String], optgrps: &[OptGroup]) -> Result 
is_arg			fn is_arg(arg: &str) -> bool 
long_to_short			    pub fn long_to_short(&self) -> Opt 
opt			pub fn opt(short_name: &str,
opt_count			    pub fn opt_count(&self, nm: &str) -> usize 
opt_default			    pub fn opt_default(&self, nm: &str, def: &str) -> Option<String> 
opt_present			    pub fn opt_present(&self, nm: &str) -> bool 
opt_str			    pub fn opt_str(&self, nm: &str) -> Option<String> 
opt_strs			    pub fn opt_strs(&self, nm: &str) -> Vec<String> 
opt_val			    fn opt_val(&self, nm: &str) -> Option<Optval> 
opt_vals			    fn opt_vals(&self, nm: &str) -> Vec<Optval> 
optflag			pub fn optflag(short_name: &str, long_name: &str, desc: &str) -> OptGroup 
optflagmulti			pub fn optflagmulti(short_name: &str, long_name: &str, desc: &str) -> OptGroup 
optflagopt			pub fn optflagopt(short_name: &str, long_name: &str, desc: &str, hint: &str) -> OptGroup 
optmulti			pub fn optmulti(short_name: &str, long_name: &str, desc: &str, hint: &str) -> OptGroup 
optopt			pub fn optopt(short_name: &str, long_name: &str, desc: &str, hint: &str) -> OptGroup 
opts_present			    pub fn opts_present(&self, names: &[String]) -> bool 
opts_str			    pub fn opts_str(&self, names: &[String]) -> Option<String> 
reqopt			pub fn reqopt(short_name: &str, long_name: &str, desc: &str, hint: &str) -> OptGroup 
short_usage			pub fn short_usage(program_name: &str, opts: &[OptGroup]) -> String 
t			    fn t(s: &str, i: usize, u: &[String]) 
tests			mod tests 
to_string			    fn to_string(&self) -> String 
usage			pub fn usage(brief: &str, opts: &[OptGroup]) -> String 
