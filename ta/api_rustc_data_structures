AdjacentEdges			impl<'g,N,E> AdjacentEdges<'g,N,E> 
AdjacentEdges			pub struct AdjacentEdges<'g,N,E>
AdjacentSources			pub struct AdjacentSources<'g,N:'g,E:'g>
AdjacentTargets			pub struct AdjacentTargets<'g,N:'g,E:'g>
BitVector			impl BitVector 
BitVector			pub struct BitVector 
Debug for Edge			impl<E: Debug> Debug for Edge<E> 
Delegate			struct Delegate<K>(PhantomData<K>);
DepthFirstTraversal			pub struct DepthFirstTraversal<'g, N:'g, E:'g> 
Direction			pub struct Direction { repr: usize }
Edge			impl<E> Edge<E> 
Edge			pub struct Edge<E> 
EdgeIndex			impl EdgeIndex 
EdgeIndex			pub struct EdgeIndex(pub usize);
Graph			impl<N:Debug,E:Debug> Graph<N,E> 
Graph			pub struct Graph<N,E> 
IntKey			struct IntKey(u32);
Iterator for AdjacentEdges			impl<'g, N:Debug, E:Debug> Iterator for AdjacentEdges<'g, N, E> 
Iterator for AdjacentSources			impl<'g, N:Debug, E:Debug> Iterator for AdjacentSources<'g, N, E> 
Iterator for AdjacentTargets			impl<'g, N:Debug, E:Debug> Iterator for AdjacentTargets<'g, N, E> 
Iterator for DepthFirstTraversal			impl<'g, N:Debug, E:Debug> Iterator for DepthFirstTraversal<'g, N, E> 
Node			pub struct Node<N> 
NodeIndex			impl NodeIndex 
NodeIndex			pub struct NodeIndex(pub usize);
Snapshot			pub struct Snapshot 
Snapshot			pub struct Snapshot<K:UnifyKey> 
SnapshotVec			impl<D:SnapshotVecDelegate> SnapshotVec<D> 
SnapshotVec			pub struct SnapshotVec<D:SnapshotVecDelegate> 
SnapshotVecDelegate			pub trait SnapshotVecDelegate 
SnapshotVecDelegate for Edge			impl<N> SnapshotVecDelegate for Edge<N> 
SnapshotVecDelegate for Node			impl<N> SnapshotVecDelegate for Node<N> 
UndoLog			pub enum UndoLog<D:SnapshotVecDelegate> 
UnificationTable			impl<'tcx,K,V> UnificationTable<K>
UnificationTable			impl<'tcx,K> UnificationTable<K>
UnificationTable			impl<K:UnifyKey> UnificationTable<K> 
UnificationTable			pub struct UnificationTable<K:UnifyKey> 
UnifyKey			pub trait UnifyKey : Copy + Clone + Debug + PartialEq 
UnifyKey for IntKey			impl UnifyKey for IntKey 
UnifyKey for UnitKey			impl UnifyKey for UnitKey 
UnitKey			struct UnitKey(u32);
VarValue			impl<K:UnifyKey> VarValue<K> 
VarValue			pub struct VarValue<K:UnifyKey> 
actions_since_snapshot			    pub fn actions_since_snapshot(&self,
add_edge			    pub fn add_edge(&mut self,
add_node			    pub fn add_node(&mut self, data: N) -> NodeIndex 
adjacent_edges			    pub fn adjacent_edges(&self, source: NodeIndex, direction: Direction) -> AdjacentEdges<N,E> 
all_edges			    pub fn all_edges<'a>(&'a self) -> &'a [Edge<E>] 
all_nodes			    pub fn all_nodes<'a>(&'a self) -> &'a [Node<N>] 
assert_open_snapshot			    fn assert_open_snapshot(&self, snapshot: &Snapshot) 
basic			fn basic() 
big_array			fn big_array() 
big_array_bench			fn big_array_bench(b: &mut Bencher) 
bitvec			pub mod bitvec;
commit			    pub fn commit(&mut self, snapshot: Snapshot) 
commit			    pub fn commit(&mut self, snapshot: Snapshot<K>) 
contains			    pub fn contains(&self, bit: usize) -> bool 
create_graph			fn create_graph() -> TestGraph 
depth_traverse			    pub fn depth_traverse<'a>(&'a self, start: NodeIndex) -> DepthFirstTraversal<'a, N, E>  
deref			    fn deref(&self) -> &[D::Value] { &*self.values }
deref_mut			    fn deref_mut(&mut self) -> &mut [D::Value] { &mut *self.values }
each_adjacent_from_a			fn each_adjacent_from_a() 
each_adjacent_from_b			fn each_adjacent_from_b() 
each_adjacent_from_c			fn each_adjacent_from_c() 
each_adjacent_from_d			fn each_adjacent_from_d() 
each_edge			    pub fn each_edge<'a, F>(&'a self, mut f: F) -> bool where
each_edge			fn each_edge() 
each_edge_index			pub fn each_edge_index<F>(max_edge_index: EdgeIndex, mut f: F) where
each_node			    pub fn each_node<'a, F>(&'a self, mut f: F) -> bool where
each_node			fn each_node() 
edge			    pub fn edge<'a>(&'a self, idx: EdgeIndex) -> &'a Edge<E> 
edge_data			    pub fn edge_data<'a>(&'a self, idx: EdgeIndex) -> &'a E 
edge_id			    pub fn edge_id(&self) -> usize { self.0 }
even_odd			fn even_odd() 
find			    pub fn find(&mut self, id: K) -> K 
first_adjacent			    pub fn first_adjacent(&self, node: NodeIndex, dir: Direction) -> EdgeIndex 
fmt			    fn fmt(&self, f: &mut Formatter) -> Result<(), Error> 
from_index			    fn from_index(u: u32) -> Self;
from_index			    fn from_index(u: u32) -> IntKey { IntKey(u) }
from_index			    fn from_index(u: u32) -> UnitKey { UnitKey(u) }
get			    pub fn get<'a>(&'a self, index: usize) -> &'a D::Value 
get			    fn get(&mut self, vid: K) -> VarValue<K> 
get_mut			    pub fn get_mut<'a>(&'a mut self, index: usize) -> &'a mut D::Value 
graph			pub mod graph;
has_value			    pub fn has_value(&mut self, id: K) -> bool 
if_not_self			    fn if_not_self(&self, key: K, self_key: K) -> Option<K> 
in_snapshot			    fn in_snapshot(&self) -> bool 
incoming_edges			    pub fn incoming_edges(&self, source: NodeIndex) -> AdjacentEdges<N,E> 
index			    fn index(&self, index: usize) -> &D::Value { self.get(index) }
index			    fn index(&self) -> u32;
index			    fn index(&self) -> u32 { self.0 }
index_mut			    fn index_mut(&mut self, index: usize) -> &mut D::Value { self.get_mut(index) }
insert			    pub fn insert(&mut self, bit: usize) -> bool 
is_root			    fn is_root(&self, key: K) -> bool 
iterate_until_fixed_point			    pub fn iterate_until_fixed_point<'a, F>(&'a self, mut op: F) where
key			    fn key(&self) -> K 
len			    pub fn len(&self) -> usize 
mut_edge_data			    pub fn mut_edge_data<'a>(&'a mut self, idx: EdgeIndex) -> &'a mut E 
mut_node_data			    pub fn mut_node_data<'a>(&'a mut self, idx: NodeIndex) -> &'a mut N 
new			    pub fn new(num_bits: usize) -> BitVector 
new			    pub fn new() -> Graph<N,E> 
new			    pub fn new() -> SnapshotVec<D> 
new			    fn new(parent: K, value: K::Value, rank: u32) -> VarValue<K> 
new			    pub fn new() -> UnificationTable<K> 
new_key			    pub fn new_key(&mut self, value: K::Value) -> K 
new_var			    fn new_var(key: K, value: K::Value) -> VarValue<K> 
next			    fn next(&mut self) -> Option<(EdgeIndex, &'g Edge<E>)> 
next			    fn next(&mut self) -> Option<NodeIndex> 
next_adjacent			    pub fn next_adjacent(&self, edge: EdgeIndex, dir: Direction) -> EdgeIndex 
next_edge_index			    pub fn next_edge_index(&self) -> EdgeIndex 
next_node_index			    pub fn next_node_index(&self) -> NodeIndex 
node			    pub fn node<'a>(&'a self, idx: NodeIndex) -> &'a Node<N> 
node_data			    pub fn node_data<'a>(&'a self, idx: NodeIndex) -> &'a N 
node_id			    pub fn node_id(&self) -> usize { self.0 }
ops::Deref for SnapshotVec			impl<D:SnapshotVecDelegate> ops::Deref for SnapshotVec<D> 
ops::DerefMut for SnapshotVec			impl<D:SnapshotVecDelegate> ops::DerefMut for SnapshotVec<D> 
ops::Index for SnapshotVec			impl<D:SnapshotVecDelegate> ops::Index<usize> for SnapshotVec<D> 
ops::IndexMut for SnapshotVec			impl<D:SnapshotVecDelegate> ops::IndexMut<usize> for SnapshotVec<D> 
outgoing_edges			    pub fn outgoing_edges(&self, source: NodeIndex) -> AdjacentEdges<N,E> 
parent			    fn parent(&self, self_key: K) -> Option<K> 
predecessor_nodes			    pub fn predecessor_nodes<'a>(&'a self, target: NodeIndex) -> AdjacentSources<N,E> 
probe			    pub fn probe(&mut self, a_id: K) -> Option<V> 
push			    pub fn push(&mut self, elem: D::Value) -> usize 
record			    pub fn record(&mut self, action: D::Undo) 
redirect			    fn redirect(self, to: K) -> VarValue<K> 
redirect_root			    fn redirect_root(&mut self,
reverse			    fn reverse(_: &mut Vec<Edge<N>>, _: ()) {}
reverse			    fn reverse(_: &mut Vec<Node<N>>, _: ()) {}
reverse			    fn reverse(values: &mut Vec<Self::Value>, action: Self::Undo);
reverse			    fn reverse(_: &mut Vec<VarValue<K>>, _: ()) {}
rollback_to			    pub fn rollback_to(&mut self, snapshot: Snapshot) 
rollback_to			    pub fn rollback_to(&mut self, snapshot: Snapshot<K>) 
root			    fn root(self, rank: u32, value: K::Value) -> VarValue<K> 
set			    pub fn set(&mut self, index: usize, new_elem: D::Value) 
set			    fn set(&mut self, key: K, new_value: VarValue<K>) 
snapshot			    pub fn snapshot(&mut self) -> Snapshot<K> 
snapshot_vec			pub mod snapshot_vec;
source			    pub fn source(&self) -> NodeIndex 
sources			    fn sources(self) -> AdjacentSources<'g,N,E> 
start_snapshot			    pub fn start_snapshot(&mut self) -> Snapshot 
successor_nodes			    pub fn successor_nodes<'a>(&'a self, source: NodeIndex) -> AdjacentTargets<N,E> 
sv::SnapshotVecDelegate for Delegate			impl<K:UnifyKey> sv::SnapshotVecDelegate for Delegate<K> 
tag			    fn tag(k: Option<Self>) -> &'static str;
tag			    fn tag(_: Option<IntKey>) -> &'static str { "IntKey" }
tag			    fn tag(_: Option<UnitKey>) -> &'static str { "UnitKey" }
target			    pub fn target(&self) -> NodeIndex 
targets			    fn targets(self) -> AdjacentTargets<'g,N,E> 
tests			mod tests;
tests			mod tests;
unify			pub mod unify;
unify			    fn unify(&mut self, root_a: VarValue<K>, root_b: VarValue<K>, new_value: K::Value) 
unify_key_None_key_Some			fn unify_key_None_key_Some() 
unify_key_None_val			fn unify_key_None_val() 
unify_key_Some_key_None			fn unify_key_Some_key_None() 
unify_key_Some_x_key_Some_x			fn unify_key_Some_x_key_Some_x() 
unify_key_Some_x_key_Some_y			fn unify_key_Some_x_key_Some_y() 
unify_key_Some_x_val_x			fn unify_key_Some_x_val_x() 
unify_key_Some_x_val_y			fn unify_key_Some_x_val_y() 
unify_var_value			    pub fn unify_var_value(&mut self,
unify_var_var			    pub fn unify_var_var(&mut self,
union			    pub fn union(&mut self, a_id: K, b_id: K) 
unioned			    pub fn unioned(&mut self, a_id: K, b_id: K) -> bool 
unsolved_variables			    pub fn unsolved_variables(&mut self) -> Vec<K> 
word_mask			    fn word_mask(&self, bit: usize) -> (usize, u64) 
