AsciiGenerator			pub struct AsciiGenerator<'a, R> 
ChiSquared			impl ChiSquared 
ChiSquared			pub struct ChiSquared 
ChiSquaredRepr			enum ChiSquaredRepr 
Closed01			pub struct Closed01<F>(pub F);
ConstRand			    struct ConstRand(uint);
ConstantRng			    struct ConstantRng(u64);
Counter			    struct Counter 
CountingRng			    struct CountingRng { i: u32 }
Default			    impl Default for Counter 
Default			impl Default for ReseedWithDefault 
Exp			impl Exp 
Exp			pub struct Exp 
Exp1			pub struct Exp1(pub f64);
FisherF			impl FisherF 
FisherF			pub struct FisherF 
Gamma			impl Gamma 
Gamma			pub struct Gamma 
GammaLargeShape			impl GammaLargeShape 
GammaLargeShape			struct GammaLargeShape 
GammaRepr			enum GammaRepr 
GammaSmallShape			impl GammaSmallShape 
GammaSmallShape			struct GammaSmallShape 
Generator			pub struct Generator<'a, T, R> 
IndependentSample			impl IndependentSample<f64> for Exp 
IndependentSample			impl IndependentSample<f64> for ChiSquared 
IndependentSample			impl IndependentSample<f64> for FisherF 
IndependentSample			impl IndependentSample<f64> for Gamma 
IndependentSample			impl IndependentSample<f64> for GammaLargeShape 
IndependentSample			impl IndependentSample<f64> for GammaSmallShape 
IndependentSample			impl IndependentSample<f64> for StudentT 
IndependentSample			pub trait IndependentSample<Support>: Sample<Support> 
IndependentSample			impl IndependentSample<f64> for LogNormal 
IndependentSample			impl IndependentSample<f64> for Normal 
Isaac64Rng			impl Isaac64Rng 
Isaac64Rng			pub struct Isaac64Rng 
IsaacRng			impl IsaacRng 
IsaacRng			pub struct IsaacRng 
LogNormal			impl LogNormal 
LogNormal			pub struct LogNormal 
MyRng			    pub struct MyRng<R> { inner: R }
Normal			impl Normal 
Normal			pub struct Normal 
Open01			pub struct Open01<F>(pub F);
Rand			impl Rand for Exp1 
Rand			    impl Rand for ConstRand 
Rand			impl Rand for StandardNormal 
Rand			impl Rand for Isaac64Rng 
Rand			impl Rand for IsaacRng 
Rand			impl Rand for XorShiftRng 
Rand			pub trait Rand 
Rand			            impl Rand for 
Rand			            impl Rand for Closed01<
Rand			            impl Rand for Open01<
Rand			impl Rand for () 
Rand			impl Rand for bool 
Rand			impl Rand for char 
Rand			impl Rand for i16 
Rand			impl Rand for i32 
Rand			impl Rand for i64 
Rand			impl Rand for i8 
Rand			impl Rand for int 
Rand			impl Rand for u16 
Rand			impl Rand for u32 
Rand			impl Rand for u64 
Rand			impl Rand for u8 
Rand			impl Rand for uint 
RandSample			pub struct RandSample<Sup>;
Range			pub struct Range<X> 
ReseedWithDefault			pub struct ReseedWithDefault;
Reseeder			pub trait Reseeder<R> 
ReseedingRng			pub struct ReseedingRng<R, Rsdr> 
Rng			    impl Rng for CountingRng 
Rng			impl Rng for Isaac64Rng 
Rng			impl Rng for IsaacRng 
Rng			impl Rng for XorShiftRng 
Rng			pub trait Rng 
Rng			    impl Rng for ConstantRng 
Rng			    impl Rng for Counter 
Sample			impl Sample<f64> for Exp 
Sample			impl Sample<f64> for ChiSquared 
Sample			impl Sample<f64> for FisherF 
Sample			impl Sample<f64> for Gamma 
Sample			impl Sample<f64> for GammaLargeShape 
Sample			impl Sample<f64> for GammaSmallShape 
Sample			impl Sample<f64> for StudentT 
Sample			pub trait Sample<Support> 
Sample			impl Sample<f64> for LogNormal 
Sample			impl Sample<f64> for Normal 
SampleRange			        impl SampleRange for 
SampleRange			pub trait SampleRange 
SeedableRng			impl SeedableRng<[u32, .. 4]> for XorShiftRng 
SeedableRng			pub trait SeedableRng<Seed>: Rng 
SeedableRng			    impl SeedableRng<u32> for Counter 
StandardNormal			pub struct StandardNormal(pub f64);
StudentT			impl StudentT 
StudentT			pub struct StudentT 
Weighted			pub struct Weighted<T> 
WeightedChoice			pub struct WeightedChoice<'a, T> 
XorShiftRng			impl XorShiftRng 
XorShiftRng			pub struct XorShiftRng 
bench			mod bench 
bench			mod bench 
bench			mod bench 
bench_gamma_large_shape			    fn bench_gamma_large_shape(b: &mut Bencher) 
bench_gamma_small_shape			    fn bench_gamma_small_shape(b: &mut Bencher) 
choose			    fn choose<'a, T>(&mut self, values: &'a [T]) -> Option<&'a T> 
choose_option			    fn choose_option<'a, T>(&mut self, values: &'a [T]) -> Option<&'a T> 
construct_range			            fn construct_range(low: 
construct_range			    fn construct_range(low: Self, high: Self) -> Range<Self>;
default			        fn default() -> Counter 
default			    fn default() -> ReseedWithDefault { ReseedWithDefault }
distributions			pub mod distributions;
exponential			pub mod exponential;
fill_bytes			    fn fill_bytes(&mut self, dest: &mut [u8]) 
fill_bytes			    fn fill_bytes(&mut self, dest: &mut [u8]) 
floating_point_edge_cases			    fn floating_point_edge_cases() 
from_seed			    fn from_seed(seed: &'a [u32]) -> IsaacRng 
from_seed			    fn from_seed(seed: &'a [u64]) -> Isaac64Rng 
from_seed			    fn from_seed(seed: Seed) -> Self;
from_seed			    fn from_seed(seed: [u32, .. 4]) -> XorShiftRng 
from_seed			        fn from_seed(seed: u32) -> Counter 
from_seed		dr, seed): (Rsdr, S)) -> ReseedingRng<R, Rsdr> 
gamma			pub mod gamma;
gen			    fn gen<T: Rand>(&mut self) -> T 
gen_ascii_chars			    fn gen_ascii_chars<'a>(&'a mut self) -> AsciiGenerator<'a, Self> 
gen_iter			    fn gen_iter<'a, T: Rand>(&'a mut self) -> Generator<'a, T, Self> 
gen_range			    fn gen_range<T: PartialOrd + SampleRange>(&mut self, low: T, high: T) -> T 
gen_weighted_bool			    fn gen_weighted_bool(&mut self, n: uint) -> bool 
ind_sample			    fn ind_sample<R: Rng>(&self, rng: &mut R) -> f64 
ind_sample			    fn ind_sample<R: Rng>(&self, rng: &mut R) -> f64 
ind_sample			    fn ind_sample<R: Rng>(&self, &mut R) -> Support;
ind_sample			    fn ind_sample<R: Rng>(&self, rng: &mut R) -> Sup 
ind_sample			    fn ind_sample<R: Rng>(&self, rng: &mut R) -> T 
ind_sample			    fn ind_sample<R: Rng>(&self, rng: &mut R) -> f64 
ind_sample			    fn ind_sample<R: Rng>(&self, rng: &mut R) -> Sup 
init		l: bool) 
isaac			    fn isaac(&mut self) 
isaac			pub mod isaac;
isaac64			    fn isaac64(&mut self) 
new			    pub fn new(lambda: f64) -> Exp 
new			    pub fn new(k: f64) -> ChiSquared 
new			    pub fn new(m: f64, n: f64) -> FisherF 
new			    pub fn new(n: f64) -> StudentT 
new			    pub fn new(shape: f64, scale: f64) -> Gamma 
new			    pub fn new<'a>(items: &'a mut [Weighted<T>]) -> WeightedChoice<'a, T> 
new			    pub fn new(mean: f64, std_dev: f64) -> LogNormal 
new			    pub fn new(mean: f64, std_dev: f64) -> Normal 
new			    pub fn new(low: X, high: X) -> Range<X> 
new			    pub fn new(rng: R, generation_threshold: uint, reseeder: Rsdr) -> ReseedingRng<R,Rsdr> 
new_raw			    fn new_raw(shape: f64, scale: f64) -> GammaLargeShape 
new_raw			    fn new_raw(shape: f64, scale: f64) -> GammaSmallShape 
new_unseeded			    pub fn new_unseeded() -> Isaac64Rng 
new_unseeded			    pub fn new_unseeded() -> IsaacRng 
new_unseeded			    pub fn new_unseeded() -> XorShiftRng 
next			            fn next<T: rand::Rng>(t: &mut T) -> u32 
next			    fn next(&mut self) -> Option<T> 
next			    fn next(&mut self) -> Option<char> 
next_u32			        fn next_u32(&mut self) -> u32 
next_u32			    fn next_u32(&mut self) -> u32 
next_u32			        fn next_u32(&mut self) -> u32 
next_u32			    fn next_u32(&mut self) -> u32 
next_u32			    fn next_u32(&mut self) -> u32;
next_u32			        fn next_u32(&mut self) -> u32 
next_u32			        fn next_u32(&mut self) -> u32 
next_u32			    fn next_u32(&mut self) -> u32 
next_u64			        fn next_u64(&mut self) -> u64 
next_u64			    fn next_u64(&mut self) -> u64 
next_u64			    fn next_u64(&mut self) -> u64 
next_u64			        fn next_u64(&mut self) -> u64 
next_u64			    fn next_u64(&mut self) -> u64 
normal			pub mod normal;
pdf			        fn pdf(x: f64) -> f64 
pdf			        fn pdf(x: f64) -> f64 
rand			    fn rand<R:Rng>(rng: &mut R) -> Exp1 
rand			        fn rand<R: Rng>(_: &mut R) -> ConstRand 
rand			    fn rand<R:Rng>(rng: &mut R) -> StandardNormal 
rand			    fn rand<R: Rng>(other: &mut R) -> Isaac64Rng 
rand			    fn rand<R: Rng>(other: &mut R) -> IsaacRng 
rand			    fn rand<R: Rng>(rng: &mut R) -> Self;
rand			    fn rand<R: Rng>(rng: &mut R) -> XorShiftRng 
rand			                fn rand<R: Rng>(rng: &mut R) -> 
rand			                fn rand<R: Rng>(rng: &mut R) -> Closed01<
rand			                fn rand<R: Rng>(rng: &mut R) -> Open01<
rand			            fn rand<R: Rng>(_rng: &mut R) -> ( 
rand			    fn rand<R: Rng>(_: &mut R) -> () { () }
rand			    fn rand<R: Rng>(rng: &mut R) -> Option<T> 
rand			    fn rand<R: Rng>(rng: &mut R) -> bool 
rand			    fn rand<R: Rng>(rng: &mut R) -> char 
rand			    fn rand<R: Rng>(rng: &mut R) -> i16 
rand			    fn rand<R: Rng>(rng: &mut R) -> i32 
rand			    fn rand<R: Rng>(rng: &mut R) -> i64 
rand			    fn rand<R: Rng>(rng: &mut R) -> i8 
rand			    fn rand<R: Rng>(rng: &mut R) -> int 
rand			    fn rand<R: Rng>(rng: &mut R) -> u16 
rand			    fn rand<R: Rng>(rng: &mut R) -> u32 
rand			    fn rand<R: Rng>(rng: &mut R) -> u64 
rand			    fn rand<R: Rng>(rng: &mut R) -> u8 
rand			    fn rand<R: Rng>(rng: &mut R) -> uint 
rand_closed			    fn rand_closed() 
rand_exp			    fn rand_exp(b: &mut Bencher) 
rand_impls			mod rand_impls;
rand_normal			    fn rand_normal(b: &mut Bencher) 
rand_open			    fn rand_open() 
range			pub mod range;
reseed			    fn reseed(&mut self, seed: &'a [u32]) 
reseed			    fn reseed(&mut self, seed: &'a [u64]) 
reseed			    fn reseed(&mut self, Seed);
reseed			    fn reseed(&mut self, seed: [u32, .. 4]) 
reseed			        fn reseed(&mut self, seed: u32) 
reseed		dr, seed): (Rsdr, S)) 
reseed			    fn reseed(&mut self, rng: &mut R) 
reseed			    fn reseed(&mut self, rng: &mut R);
reseed_if_necessary			    pub fn reseed_if_necessary(&mut self) 
reseeding			pub mod reseeding;
rng			    pub fn rng() -> MyRng<rand::TaskRng> 
sample			    fn sample<R: Rng>(&mut self, rng: &mut R) -> f64 { self.ind_sample(rng) }
sample			    fn sample<R: Rng>(&mut self, rng: &mut R) -> f64 { self.ind_sample(rng) }
sample			    fn sample<R: Rng>(&mut self, rng: &mut R) -> Sup { self.ind_sample(rng) }
sample			    fn sample<R: Rng>(&mut self, rng: &mut R) -> Support;
sample			    fn sample<R: Rng>(&mut self, rng: &mut R) -> T { self.ind_sample(rng) }
sample			    fn sample<R: Rng>(&mut self, rng: &mut R) -> f64 { self.ind_sample(rng) }
sample			    fn sample<R: Rng>(&mut self, rng: &mut R) -> Sup { self.ind_sample(rng) }
sample_range			            fn sample_range<R: Rng>(r: &Range<
sample_range			    fn sample_range<R: Rng>(r: &Range<Self>, rng: &mut R) -> Self;
shuffle			    fn shuffle<T>(&mut self, values: &mut [T]) 
std			mod std 
test			mod test 
test			mod test 
test			mod test 
test			mod test 
test			mod test 
tests			mod tests 
tests			mod tests 
tests			mod tests 
tests			mod tests 
weak_rng			    pub fn weak_rng() -> MyRng<rand::XorShiftRng> 
zero_case			        fn zero_case<R:Rng>(rng: &mut R, _u: f64) -> f64 
zero_case			        fn zero_case<R:Rng>(rng: &mut R, u: f64) -> f64 
ziggurat			fn ziggurat<R:Rng>(
ziggurat_tables			mod ziggurat_tables;
