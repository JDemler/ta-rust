ChiSquared			impl ChiSquared 
ChiSquared			pub enum ChiSquared 
Closed01			pub struct Closed01<F>(F);
ConstRand			    struct ConstRand(uint);
ConstRng			    struct ConstRng { i: u64 }
ConstantRng			    struct ConstantRng(u64);
Counter			    struct Counter 
CountingRng			    struct CountingRng { i: u32 }
CryptAcquireContextA			        fn CryptAcquireContextA(phProv: *mut HCRYPTPROV,
CryptGenRandom			        fn CryptGenRandom(hProv: HCRYPTPROV,
CryptReleaseContext			        fn CryptReleaseContext(hProv: HCRYPTPROV, dwFlags: DWORD) -> BOOL;
Default			    impl Default for Counter 
Default			impl Default for ReseedWithDefault 
Drop			    impl Drop for OSRng 
Exp			impl Exp 
Exp			pub struct Exp 
Exp1			pub struct Exp1(f64);
FisherF			impl FisherF 
FisherF			pub struct FisherF 
Gamma			impl Gamma 
Gamma			pub enum Gamma 
GammaLargeShape			impl GammaLargeShape 
GammaLargeShape			struct GammaLargeShape 
GammaSmallShape			impl GammaSmallShape 
GammaSmallShape			struct GammaSmallShape 
IndependentSample			impl IndependentSample<f64> for Exp 
IndependentSample			impl IndependentSample<f64> for ChiSquared 
IndependentSample			impl IndependentSample<f64> for FisherF 
IndependentSample			impl IndependentSample<f64> for Gamma 
IndependentSample			impl IndependentSample<f64> for GammaLargeShape 
IndependentSample			impl IndependentSample<f64> for GammaSmallShape 
IndependentSample			impl IndependentSample<f64> for StudentT 
IndependentSample			pub trait IndependentSample<Support>: Sample<Support> 
IndependentSample			impl IndependentSample<f64> for LogNormal 
IndependentSample			impl IndependentSample<f64> for Normal 
Isaac64Rng			impl Isaac64Rng 
Isaac64Rng			pub struct Isaac64Rng 
IsaacRng			impl IsaacRng 
IsaacRng			pub struct IsaacRng 
LogNormal			impl LogNormal 
LogNormal			pub struct LogNormal 
Normal			impl Normal 
Normal			pub struct Normal 
OSRng			    impl OSRng 
OSRng			    pub struct OSRng 
Open01			pub struct Open01<F>(F);
Rand			impl Rand for Exp1 
Rand			    impl Rand for ConstRand 
Rand			impl Rand for StandardNormal 
Rand			pub trait Rand 
Rand			            impl Rand for $ty 
Rand			            impl Rand for Closed01<$ty> 
Rand			            impl Rand for Open01<$ty> 
Rand			impl Rand for () 
Rand			impl Rand for bool 
Rand			impl Rand for char 
Rand			impl Rand for i16 
Rand			impl Rand for i32 
Rand			impl Rand for i64 
Rand			impl Rand for i8 
Rand			impl Rand for int 
Rand			impl Rand for u16 
Rand			impl Rand for u32 
Rand			impl Rand for u64 
Rand			impl Rand for u8 
Rand			impl Rand for uint 
RandSample			pub struct RandSample<Sup>;
Range			pub struct Range<X> 
ReaderRng			pub struct ReaderRng<R> 
ReseedWithDefault			pub struct ReseedWithDefault;
Reseeder			pub trait Reseeder<R> 
ReseedingRng			pub struct ReseedingRng<R, Rsdr> 
Rng			    impl Rng for CountingRng 
Rng			impl Rng for Isaac64Rng 
Rng			impl Rng for IsaacRng 
Rng			    impl Rng for ConstRng 
Rng			impl Rng for StdRng 
Rng			impl Rng for TaskRng 
Rng			impl Rng for XorShiftRng 
Rng			pub trait Rng 
Rng			    impl Rng for OSRng 
Rng			    impl Rng for ConstantRng 
Rng			    impl Rng for Counter 
Sample			impl Sample<f64> for Exp 
Sample			impl Sample<f64> for ChiSquared 
Sample			impl Sample<f64> for FisherF 
Sample			impl Sample<f64> for Gamma 
Sample			impl Sample<f64> for GammaLargeShape 
Sample			impl Sample<f64> for GammaSmallShape 
Sample			impl Sample<f64> for StudentT 
Sample			pub trait Sample<Support> 
Sample			impl Sample<f64> for LogNormal 
Sample			impl Sample<f64> for Normal 
SampleRange			        impl SampleRange for $ty 
SampleRange			pub trait SampleRange 
SeedableRng			impl SeedableRng<[u32, .. 4]> for XorShiftRng 
SeedableRng			pub trait SeedableRng<Seed>: Rng 
SeedableRng			    impl SeedableRng<u32> for Counter 
StandardNormal			pub struct StandardNormal(f64);
StdRng			impl StdRng 
StdRng			pub struct StdRng { rng: Isaac64Rng }
StdRng			pub struct StdRng { rng: IsaacRng }
StudentT			impl StudentT 
StudentT			pub struct StudentT 
TaskRng			pub struct TaskRng 
TaskRngReseeder			struct TaskRngReseeder;
Weighted			pub struct Weighted<T> 
WeightedChoice			pub struct WeightedChoice<T> 
XorShiftRng			impl XorShiftRng 
XorShiftRng			pub struct XorShiftRng 
bench			mod bench 
bench			mod bench 
bench			mod bench 
bench			mod bench 
bench_gamma_large_shape			    fn bench_gamma_large_shape(bh: &mut BenchHarness) 
bench_gamma_small_shape			    fn bench_gamma_small_shape(bh: &mut BenchHarness) 
choose			    fn choose<T: Clone>(&mut self, values: &[T]) -> T 
choose_option			    fn choose_option<'a, T>(&mut self, values: &'a [T]) -> Option<&'a T> 
construct_range			            fn construct_range(low: $ty, high: $ty) -> Range<$ty> 
construct_range			    fn construct_range(low: Self, high: Self) -> Range<Self>;
default			        fn default() -> Counter 
default			    fn default() -> ReseedWithDefault { ReseedWithDefault }
distributions			pub mod distributions;
drop			        fn drop(&mut self) 
exponential			pub mod exponential;
fill_bytes			    fn fill_bytes(&mut self, bytes: &mut [u8]) 
fill_bytes			    fn fill_bytes(&mut self, dest: &mut [u8]) 
fill_bytes			        fn fill_bytes(&mut self, v: &mut [u8]) 
fill_bytes			    fn fill_bytes(&mut self, v: &mut [u8]) 
fill_bytes			    fn fill_bytes(&mut self, dest: &mut [u8]) 
floating_point_edge_cases			    fn floating_point_edge_cases() 
from_seed			    fn from_seed(seed: &'a [u32]) -> IsaacRng 
from_seed			    fn from_seed(seed: &'a [u64]) -> Isaac64Rng 
from_seed			    fn from_seed(seed: &'a [uint]) -> StdRng 
from_seed			    fn from_seed(seed: Seed) -> Self;
from_seed			    fn from_seed(seed: [u32, .. 4]) -> XorShiftRng 
from_seed			        fn from_seed(seed: u32) -> Counter 
from_seed			    fn from_seed((rsdr, seed): (Rsdr, S)) -> ReseedingRng<R, Rsdr> 
gamma			pub mod gamma;
gen			    fn gen<T: Rand>(&mut self) -> T 
gen_ascii_str			    fn gen_ascii_str(&mut self, len: uint) -> ~str 
gen_range			    fn gen_range<T: Ord + SampleRange>(&mut self, low: T, high: T) -> T 
gen_vec			    fn gen_vec<T: Rand>(&mut self, len: uint) -> Vec<T> 
gen_weighted_bool			    fn gen_weighted_bool(&mut self, n: uint) -> bool 
imp			mod imp 
ind_sample			    fn ind_sample<R: Rng>(&self, rng: &mut R) -> f64 
ind_sample			    fn ind_sample<R: Rng>(&self, rng: &mut R) -> f64 
ind_sample			    fn ind_sample<R: Rng>(&self, &mut R) -> Support;
ind_sample			    fn ind_sample<R: Rng>(&self, rng: &mut R) -> Sup 
ind_sample			    fn ind_sample<R: Rng>(&self, rng: &mut R) -> T 
ind_sample			    fn ind_sample<R: Rng>(&self, rng: &mut R) -> f64 
ind_sample			    fn ind_sample<R: Rng>(&self, rng: &mut R) -> Sup 
init			    fn init(&mut self, use_rsl: bool) 
isaac			    fn isaac(&mut self) 
isaac			pub mod isaac;
isaac64			    fn isaac64(&mut self) 
new			    pub fn new(lambda: f64) -> Exp 
new			    pub fn new(k: f64) -> ChiSquared 
new			    pub fn new(m: f64, n: f64) -> FisherF 
new			    pub fn new(n: f64) -> StudentT 
new			    pub fn new(shape: f64, scale: f64) -> Gamma 
new			    pub fn new(mut items: Vec<Weighted<T>>) -> WeightedChoice<T> 
new			    pub fn new(mean: f64, std_dev: f64) -> LogNormal 
new			    pub fn new(mean: f64, std_dev: f64) -> Normal 
new			    pub fn new(low: X, high: X) -> Range<X> 
new			    pub fn new() -> IoResult<Isaac64Rng> 
new			    pub fn new() -> IoResult<IsaacRng> 
new			    pub fn new() -> IoResult<StdRng> 
new			    pub fn new() -> IoResult<XorShiftRng> 
new			        pub fn new() -> IoResult<OSRng> 
new			    pub fn new(r: R) -> ReaderRng<R> 
new			    pub fn new(rng: R, generation_threshold: uint, reseeder: Rsdr) -> ReseedingRng<R,Rsdr> 
new_raw			    fn new_raw(shape: f64, scale: f64) -> GammaLargeShape 
new_raw			    fn new_raw(shape: f64, scale: f64) -> GammaSmallShape 
new_unseeded			    pub fn new_unseeded() -> Isaac64Rng 
new_unseeded			    pub fn new_unseeded() -> IsaacRng 
next_u32			        fn next_u32(&mut self) -> u32 
next_u32			    fn next_u32(&mut self) -> u32 
next_u32			        fn next_u32(&mut self) -> u32 { self.i as u32 }
next_u32			    fn next_u32(&mut self) -> u32 
next_u32			    fn next_u32(&mut self) -> u32;
next_u32			        fn next_u32(&mut self) -> u32 
next_u32			        fn next_u32(&mut self) -> u32 
next_u32			    fn next_u32(&mut self) -> u32 
next_u32			        fn next_u32(&mut self) -> u32 
next_u32			    fn next_u32(&mut self) -> u32 
next_u64			        fn next_u64(&mut self) -> u64 
next_u64			    fn next_u64(&mut self) -> u64 
next_u64			        fn next_u64(&mut self) -> u64 { self.i }
next_u64			    fn next_u64(&mut self) -> u64 
next_u64			        fn next_u64(&mut self) -> u64 
next_u64			        fn next_u64(&mut self) -> u64 
next_u64			    fn next_u64(&mut self) -> u64 
next_u64			    fn next_u64(&mut self) -> u64 
normal			pub mod normal;
os			pub mod os;
pdf			        fn pdf(x: f64) -> f64 
pdf			        fn pdf(x: f64) -> f64 
rand			    fn rand<R:Rng>(rng: &mut R) -> Exp1 
rand			        fn rand<R: Rng>(_: &mut R) -> ConstRand 
rand			    fn rand<R:Rng>(rng: &mut R) -> StandardNormal 
rand			    fn rand<R: Rng>(rng: &mut R) -> Self;
rand			                fn rand<R: Rng>(rng: &mut R) -> $ty 
rand			                fn rand<R: Rng>(rng: &mut R) -> Closed01<$ty> 
rand			                fn rand<R: Rng>(rng: &mut R) -> Open01<$ty> 
rand			            fn rand<R: Rng>(_rng: &mut R) -> ( $( $tyvar ),* , ) 
rand			    fn rand<R: Rng>(_: &mut R) -> () { () }
rand			    fn rand<R: Rng>(rng: &mut R) -> @T { @rng.gen() }
rand			    fn rand<R: Rng>(rng: &mut R) -> Option<T> 
rand			    fn rand<R: Rng>(rng: &mut R) -> bool 
rand			    fn rand<R: Rng>(rng: &mut R) -> char 
rand			    fn rand<R: Rng>(rng: &mut R) -> i16 
rand			    fn rand<R: Rng>(rng: &mut R) -> i32 
rand			    fn rand<R: Rng>(rng: &mut R) -> i64 
rand			    fn rand<R: Rng>(rng: &mut R) -> i8 
rand			    fn rand<R: Rng>(rng: &mut R) -> int 
rand			    fn rand<R: Rng>(rng: &mut R) -> u16 
rand			    fn rand<R: Rng>(rng: &mut R) -> u32 
rand			    fn rand<R: Rng>(rng: &mut R) -> u64 
rand			    fn rand<R: Rng>(rng: &mut R) -> u8 
rand			    fn rand<R: Rng>(rng: &mut R) -> uint 
rand			    fn rand<R: Rng>(rng: &mut R) -> ~T { ~rng.gen() }
rand_closed			    fn rand_closed() 
rand_exp			    fn rand_exp(bh: &mut BenchHarness) 
rand_impls			mod rand_impls;
rand_isaac			    fn rand_isaac(bh: &mut BenchHarness) 
rand_isaac64			    fn rand_isaac64(bh: &mut BenchHarness) 
rand_normal			    fn rand_normal(bh: &mut BenchHarness) 
rand_open			    fn rand_open() 
rand_shuffle_100			    fn rand_shuffle_100(bh: &mut BenchHarness) 
rand_std			    fn rand_std(bh: &mut BenchHarness) 
rand_xorshift			    fn rand_xorshift(bh: &mut BenchHarness) 
random			pub fn random<T: Rand>() -> T 
range			pub mod range;
reader			pub mod reader;
reseed			    fn reseed(&mut self, seed: &'a [u32]) 
reseed			    fn reseed(&mut self, seed: &'a [u64]) 
reseed			    fn reseed(&mut self, Seed);
reseed			    fn reseed(&mut self, rng: &mut StdRng) 
reseed			    fn reseed(&mut self, seed: &'a [uint]) 
reseed			    fn reseed(&mut self, seed: [u32, .. 4]) 
reseed			        fn reseed(&mut self, seed: u32) 
reseed			    fn reseed(&mut self, (rsdr, seed): (Rsdr, S)) 
reseed			    fn reseed(&mut self, rng: &mut R) 
reseed			    fn reseed(&mut self, rng: &mut R);
reseed_if_necessary			    pub fn reseed_if_necessary(&mut self) 
reseeding			impl reseeding::Reseeder<StdRng> for TaskRngReseeder 
reseeding			pub mod reseeding;
rng			pub fn rng() -> StdRng 
sample			    fn sample<R: Rng>(&mut self, rng: &mut R) -> f64 { self.ind_sample(rng) }
sample			    fn sample<R: Rng>(&mut self, rng: &mut R) -> f64 { self.ind_sample(rng) }
sample			    fn sample<R: Rng>(&mut self, rng: &mut R) -> Sup { self.ind_sample(rng) }
sample			    fn sample<R: Rng>(&mut self, rng: &mut R) -> Support;
sample			    fn sample<R: Rng>(&mut self, rng: &mut R) -> T { self.ind_sample(rng) }
sample			    fn sample<R: Rng>(&mut self, rng: &mut R) -> f64 { self.ind_sample(rng) }
sample			    fn sample<R: Rng>(&mut self, rng: &mut R) -> Sup { self.ind_sample(rng) }
sample			    fn sample<A, T: Iterator<A>>(&mut self, iter: T, n: uint) -> Vec<A> 
sample_range			            fn sample_range<R: Rng>(r: &Range<$ty>, rng: &mut R) -> $ty 
sample_range			    fn sample_range<R: Rng>(r: &Range<Self>, rng: &mut R) -> Self;
shuffle			    fn shuffle<T>(&mut self, values: &mut [T]) 
shuffle_mut			    fn shuffle_mut<T>(&mut self, values: &mut [T]) 
task_rng			pub fn task_rng() -> TaskRng 
test			mod test 
test			mod test 
test			mod test 
test			mod test 
test			mod test 
test			mod test 
test			mod test 
test_chi_squared_invalid_dof			    fn test_chi_squared_invalid_dof() 
test_chi_squared_large			    fn test_chi_squared_large() 
test_chi_squared_one			    fn test_chi_squared_one() 
test_chi_squared_small			    fn test_chi_squared_small() 
test_choose			    fn test_choose() 
test_choose_option			    fn test_choose_option() 
test_exp			    fn test_exp() 
test_exp_invalid_lambda_neg			    fn test_exp_invalid_lambda_neg() 
test_exp_invalid_lambda_zero			    fn test_exp_invalid_lambda_zero() 
test_f			    fn test_f() 
test_fill_bytes_default			    fn test_fill_bytes_default() 
test_floats			    fn test_floats() 
test_gen_ascii_str			    fn test_gen_ascii_str() 
test_gen_f64			    fn test_gen_f64() 
test_gen_range			    fn test_gen_range() 
test_gen_range_fail_int			    fn test_gen_range_fail_int() 
test_gen_range_fail_uint			    fn test_gen_range_fail_uint() 
test_gen_vec			    fn test_gen_vec() 
test_gen_weighted_bool			    fn test_gen_weighted_bool() 
test_integers			    fn test_integers() 
test_log_normal			    fn test_log_normal() 
test_log_normal_invalid_sd			    fn test_log_normal_invalid_sd() 
test_normal			    fn test_normal() 
test_normal_invalid_sd			    fn test_normal_invalid_sd() 
test_os_rng			    fn test_os_rng() 
test_os_rng_tasks			    fn test_os_rng_tasks() 
test_rand_sample			    fn test_rand_sample() 
test_random			    fn test_random() 
test_range_bad_limits_equal			    fn test_range_bad_limits_equal() 
test_range_bad_limits_flipped			    fn test_range_bad_limits_flipped() 
test_reader_rng_fill_bytes			    fn test_reader_rng_fill_bytes() 
test_reader_rng_insufficient_bytes			    fn test_reader_rng_insufficient_bytes() 
test_reader_rng_u32			    fn test_reader_rng_u32() 
test_reader_rng_u64			    fn test_reader_rng_u64() 
test_reseeding			    fn test_reseeding() 
test_rng_32_rand_seeded			    fn test_rng_32_rand_seeded() 
test_rng_32_reseed			    fn test_rng_32_reseed() 
test_rng_32_seeded			    fn test_rng_32_seeded() 
test_rng_32_true_values			    fn test_rng_32_true_values() 
test_rng_64_rand_seeded			    fn test_rng_64_rand_seeded() 
test_rng_64_reseed			    fn test_rng_64_reseed() 
test_rng_64_seeded			    fn test_rng_64_seeded() 
test_rng_64_true_values			    fn test_rng_64_true_values() 
test_rng_fill_bytes			    fn test_rng_fill_bytes() 
test_rng_reseed			    fn test_rng_reseed() 
test_rng_seeded			    fn test_rng_seeded() 
test_sample			    fn test_sample() 
test_shuffle			    fn test_shuffle() 
test_std_rng_reseed			    fn test_std_rng_reseed() 
test_std_rng_seeded			    fn test_std_rng_seeded() 
test_t			    fn test_t() 
test_task_rng			    fn test_task_rng() 
test_weighted_choice			    fn test_weighted_choice() 
test_weighted_choice_no_items			    fn test_weighted_choice_no_items() 
test_weighted_choice_weight_overflows			    fn test_weighted_choice_weight_overflows() 
test_weighted_choice_zero_weight			    fn test_weighted_choice_zero_weight() 
tests			mod tests 
tests			mod tests 
tests			mod tests 
tests			mod tests 
weak_rng			pub fn weak_rng() -> XorShiftRng 
zero_case			        fn zero_case<R:Rng>(rng: &mut R, _u: f64) -> f64 
zero_case			        fn zero_case<R:Rng>(rng: &mut R, u: f64) -> f64 
ziggurat			fn ziggurat<R:Rng>(
ziggurat_tables			mod ziggurat_tables;
