Context			impl Context 
Context			pub struct Context 
Database			impl Database 
Database			pub struct Database 
Drop			impl Drop for Database 
Exec			impl Exec 
Exec			pub struct Exec 
KindMap			struct KindMap(TreeMap<~str, ~str>);
Prep			pub struct Prep<'a> 
Work			enum Work<'a, T> 
WorkKey			impl WorkKey 
WorkKey			struct WorkKey 
WorkMap			impl WorkMap 
WorkMap			struct WorkMap(TreeMap<~str, KindMap>);
all_fresh			    fn all_fresh(&self, cat: &str, map: &WorkMap) -> bool 
cache			    pub fn cache(&mut self,
declare_input			    pub fn declare_input(&mut self, kind: &str, name: &str, val: &str) 
discover_input			    pub fn discover_input(&mut self,
discover_output			    pub fn discover_output(&mut self,
drop			    fn drop(&mut self) 
exec			    pub fn exec<'a, T:Send +
exec_work			    fn exec_work<'a, T:Send +
from_task			    pub fn from_task(prep: &'a Prep<'a>, port: Receiver<(Exec, T)>)
from_value			    pub fn from_value(elt: T) -> Work<'a, T> 
insert_work_key			    fn insert_work_key(&mut self, k: WorkKey, val: ~str) 
is_fresh			    fn is_fresh(&self, cat: &str, kind: &str,
json_decode			fn json_decode<T:Decodable<json::Decoder, json::Error>>(s: &str) -> T 
json_encode			fn json_encode<'a, T:Encodable<json::Encoder<'a>, io::IoError>>(t: &T) -> ~str 
load			    fn load(&mut self) 
lookup_declared_inputs			    pub fn lookup_declared_inputs(&self) -> ~[~str] 
lookup_discovered_inputs			    pub fn lookup_discovered_inputs(&self) -> ~[(~str, ~str)] 
make_path			    fn make_path(filename: ~str) -> Path 
new			    fn new() -> WorkMap { WorkMap(TreeMap::new()) }
new			    fn new(ctxt: &'a Context, fn_name: &'a str) -> Prep<'a> 
new			    pub fn new(db: Arc<RWLock<Database>>,
new			    pub fn new(kind: &str, name: &str) -> WorkKey 
new			    pub fn new(p: Path) -> Database 
new_with_freshness			    pub fn new_with_freshness(db: Arc<RWLock<Database>>,
prep			    pub fn prep<'a>(&'a self, fn_name: &'a str) -> Prep<'a> 
prepare			    pub fn prepare(&self,
save			    fn save(&self) -> io::IoResult<()> 
test			fn test() 
unwrap			    pub fn unwrap(self) -> T 
with_prep			    pub fn with_prep<'a,
