Bar			    struct Bar(int, int);
MovePtr			pub trait MovePtr 
MovePtrAdaptor			pub struct MovePtrAdaptor<V> 
P			struct P {a: int, b: f64}
Poly			pub trait Poly 
Repr			impl Repr for () 
Repr			impl Repr for bool 
Repr			impl Repr for int 
Repr			trait Repr 
ReprVisitor			pub struct ReprVisitor<'a> 
VariantState			enum VariantState 
align			    pub fn align(&mut self, a: uint) 
align			pub fn align(size: uint, align: uint) -> uint 
align_to			    pub fn align_to<T>(&mut self) 
bump			    pub fn bump(&mut self, sz: uint) 
bump_past			    pub fn bump_past<T>(&mut self) 
exact_test			    fn exact_test<T>(t: &T, e:&str) 
fmt			    fn fmt(&self, &mut fmt::Formatter) -> fmt::Result;
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			pub mod fmt;
get			    pub fn get<T>(&mut self, f: |&mut ReprVisitor, &T| -> bool) -> bool 
move_ptr			    fn move_ptr(&mut self, adjustment: |*const u8| -> *const u8);
move_ptr			    fn move_ptr(&mut self, adjustment: |*const u8| -> *const u8) 
new			    pub fn new(v: V) -> MovePtrAdaptor<V> 
new			    pub fn new(ptr: *const u8, writer: &'a mut io::Writer) -> ReprVisitor<'a> 
pop_ptr			    fn pop_ptr(&mut self);
pop_ptr			    fn pop_ptr(&mut self) 
push_ptr			    fn push_ptr(&mut self);
push_ptr			    fn push_ptr(&mut self) 
reflect			pub mod reflect;
repr			pub mod repr;
repr_to_str			pub fn repr_to_str<T>(t: &T) -> String 
secret_poly			pub fn secret_poly<T: Poly>(x: &T, fmt: &mut fmt::Formatter) -> fmt::Result 
unwrap			    pub fn unwrap(self) -> V { self.inner }
visit_bool			    fn visit_bool(&mut self) -> bool 
visit_bool			    fn visit_bool(&mut self) -> bool { self.write::<bool>() }
visit_bot			    fn visit_bot(&mut self) -> bool 
visit_bot			    fn visit_bot(&mut self) -> bool 
visit_box			    fn visit_box(&mut self, mtbl: uint, inner: *const TyDesc) -> bool 
visit_box			    fn visit_box(&mut self, mtbl: uint, inner: *const TyDesc) -> bool 
visit_char			    fn visit_char(&mut self) -> bool 
visit_char			    fn visit_char(&mut self) -> bool 
visit_class_field			    fn visit_class_field(&mut self, i: uint, name: &str, named: bool, mtbl: uint,
visit_class_field			    fn visit_class_field(&mut self, i: uint, name: &str, named: bool,
visit_enter_class			    fn visit_enter_class(&mut self, name: &str, named_fields: bool, n_fields: uint, sz: uint,
visit_enter_class			    fn visit_enter_class(&mut self, name: &str, named_fields: bool, n_fields: uint,
visit_enter_enum			    fn visit_enter_enum(&mut self, n_variants: uint,
visit_enter_enum			    fn visit_enter_enum(&mut self,
visit_enter_enum_variant			    fn visit_enter_enum_variant(&mut self, variant: uint,
visit_enter_enum_variant			    fn visit_enter_enum_variant(&mut self, _variant: uint,
visit_enter_fn			    fn visit_enter_fn(&mut self, purity: uint, proto: uint,
visit_enter_fn			    fn visit_enter_fn(&mut self, _purity: uint, _proto: uint,
visit_enter_rec			    fn visit_enter_rec(&mut self, n_fields: uint, sz: uint, align: uint) -> bool 
visit_enter_rec			    fn visit_enter_rec(&mut self, _n_fields: uint,
visit_enter_tup			    fn visit_enter_tup(&mut self, n_fields: uint, sz: uint, align: uint) -> bool 
visit_enter_tup			    fn visit_enter_tup(&mut self, _n_fields: uint,
visit_enum_variant_field			    fn visit_enum_variant_field(&mut self, i: uint, offset: uint,
visit_enum_variant_field			    fn visit_enum_variant_field(&mut self,
visit_estr_fixed			    fn visit_estr_fixed(&mut self, n: uint,
visit_estr_fixed			    fn visit_estr_fixed(&mut self, _n: uint, _sz: uint,
visit_estr_slice			    fn visit_estr_slice(&mut self) -> bool 
visit_estr_slice			    fn visit_estr_slice(&mut self) -> bool 
visit_evec_fixed			    fn visit_evec_fixed(&mut self, n: uint, sz: uint, align: uint,
visit_evec_fixed			    fn visit_evec_fixed(&mut self, n: uint, sz: uint, _align: uint,
visit_evec_slice			    fn visit_evec_slice(&mut self, mtbl: uint, inner: *const TyDesc) -> bool 
visit_evec_slice			    fn visit_evec_slice(&mut self, mtbl: uint, inner: *const TyDesc) -> bool 
visit_f32			    fn visit_f32(&mut self) -> bool 
visit_f32			    fn visit_f32(&mut self) -> bool { self.write::<f32>() }
visit_f64			    fn visit_f64(&mut self) -> bool 
visit_f64			    fn visit_f64(&mut self) -> bool { self.write::<f64>() }
visit_fn_input			    fn visit_fn_input(&mut self, i: uint, mode: uint,
visit_fn_input			    fn visit_fn_input(&mut self, i: uint, _mode: uint,
visit_fn_output			    fn visit_fn_output(&mut self, retstyle: uint, variadic: bool,
visit_fn_output			    fn visit_fn_output(&mut self, _retstyle: uint, variadic: bool,
visit_i16			    fn visit_i16(&mut self) -> bool 
visit_i16			    fn visit_i16(&mut self) -> bool { self.write::<i16>() }
visit_i32			    fn visit_i32(&mut self) -> bool 
visit_i32			    fn visit_i32(&mut self) -> bool { self.write::<i32>()  }
visit_i64			    fn visit_i64(&mut self) -> bool 
visit_i64			    fn visit_i64(&mut self) -> bool { self.write::<i64>() }
visit_i8			    fn visit_i8(&mut self) -> bool 
visit_i8			    fn visit_i8(&mut self) -> bool { self.write::<i8>() }
visit_inner			    pub fn visit_inner(&mut self, inner: *const TyDesc) -> bool 
visit_int			    fn visit_int(&mut self) -> bool 
visit_int			    fn visit_int(&mut self) -> bool { self.write::<int>() }
visit_leave_class			    fn visit_leave_class(&mut self, name: &str, named_fields: bool, n_fields: uint, sz: uint,
visit_leave_class			    fn visit_leave_class(&mut self, _name: &str, named_fields: bool, n_fields: uint,
visit_leave_enum			    fn visit_leave_enum(&mut self, n_variants: uint,
visit_leave_enum			    fn visit_leave_enum(&mut self,
visit_leave_enum_variant			    fn visit_leave_enum_variant(&mut self, variant: uint,
visit_leave_enum_variant			    fn visit_leave_enum_variant(&mut self, _variant: uint,
visit_leave_fn			    fn visit_leave_fn(&mut self, purity: uint, proto: uint,
visit_leave_fn			    fn visit_leave_fn(&mut self, _purity: uint, _proto: uint,
visit_leave_rec			    fn visit_leave_rec(&mut self, n_fields: uint, sz: uint, align: uint) -> bool 
visit_leave_rec			    fn visit_leave_rec(&mut self, _n_fields: uint,
visit_leave_tup			    fn visit_leave_tup(&mut self, n_fields: uint, sz: uint, align: uint) -> bool 
visit_leave_tup			    fn visit_leave_tup(&mut self, _n_fields: uint,
visit_nil			    fn visit_nil(&mut self) -> bool 
visit_nil			    fn visit_nil(&mut self) -> bool { self.write::<()>() }
visit_param			    fn visit_param(&mut self, i: uint) -> bool 
visit_param			    fn visit_param(&mut self, _i: uint) -> bool { true }
visit_ptr			    fn visit_ptr(&mut self, mtbl: uint, inner: *const TyDesc) -> bool 
visit_ptr			    fn visit_ptr(&mut self, mtbl: uint, _inner: *const TyDesc) -> bool 
visit_ptr_inner			    pub fn visit_ptr_inner(&mut self, ptr: *const u8,
visit_rec_field			    fn visit_rec_field(&mut self, i: uint, name: &str,
visit_rec_field			    fn visit_rec_field(&mut self, i: uint, name: &str,
visit_rptr			    fn visit_rptr(&mut self, mtbl: uint, inner: *const TyDesc) -> bool 
visit_rptr			    fn visit_rptr(&mut self, mtbl: uint, inner: *const TyDesc) -> bool 
visit_self			    fn visit_self(&mut self) -> bool 
visit_self			    fn visit_self(&mut self) -> bool { true }
visit_trait			    fn visit_trait(&mut self, name: &str) -> bool 
visit_trait			    fn visit_trait(&mut self, name: &str) -> bool 
visit_tup_field			    fn visit_tup_field(&mut self, i: uint, inner: *const TyDesc) -> bool 
visit_tup_field			    fn visit_tup_field(&mut self, i: uint, inner: *const TyDesc) -> bool 
visit_u16			    fn visit_u16(&mut self) -> bool 
visit_u16			    fn visit_u16(&mut self) -> bool { self.write::<u16>() }
visit_u32			    fn visit_u32(&mut self) -> bool 
visit_u32			    fn visit_u32(&mut self) -> bool { self.write::<u32>() }
visit_u64			    fn visit_u64(&mut self) -> bool 
visit_u64			    fn visit_u64(&mut self) -> bool { self.write::<u64>() }
visit_u8			    fn visit_u8(&mut self) -> bool 
visit_u8			    fn visit_u8(&mut self) -> bool { self.write::<u8>() }
visit_uint			    fn visit_uint(&mut self) -> bool 
visit_uint			    fn visit_uint(&mut self) -> bool { self.write::<uint>() }
visit_uniq			    fn visit_uniq(&mut self, mtbl: uint, inner: *const TyDesc) -> bool 
visit_uniq			    fn visit_uniq(&mut self, _mtbl: uint, inner: *const TyDesc) -> bool 
write			    pub fn write<T:Repr>(&mut self) -> bool 
write_escaped_char			    fn write_escaped_char(&mut self, ch: char, is_str: bool) -> bool 
write_escaped_slice			    pub fn write_escaped_slice(&mut self, slice: &str) -> bool 
write_mut_qualifier			    pub fn write_mut_qualifier(&mut self, mtbl: uint) -> bool 
write_repr			    fn write_repr(&self, writer: &mut io::Writer) -> io::IoResult<()> 
write_repr			    fn write_repr(&self, writer: &mut io::Writer) -> io::IoResult<()>;
write_repr			pub fn write_repr<T>(writer: &mut io::Writer, object: &T) -> io::IoResult<()> 
write_vec_range			    pub fn write_vec_range(&mut self, ptr: *const (), len: uint,
