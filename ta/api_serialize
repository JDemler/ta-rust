Animal			    enum Animal 
CharacterSet			pub enum CharacterSet 
Config			pub struct Config 
Decodable			pub trait Decodable<D:Decoder<E>, E> 
DecodeEnum			    enum DecodeEnum 
DecodeStruct			    struct DecodeStruct 
Decoder			    pub fn Decoder<'a>(d: Doc<'a>) -> Decoder<'a> 
Decoder			    pub struct Decoder<'a> 
Decoder			impl Decoder 
Decoder			pub struct Decoder 
Decoder			pub trait Decoder<E> 
DecoderHelpers			pub trait DecoderHelpers<E> 
Doc			    pub fn Doc<'a>(data: &'a [u8]) -> Doc<'a> 
Doc			pub struct Doc<'a> 
EbmlEncoderTag			pub enum EbmlEncoderTag 
Encodable			pub trait Encodable<S:Encoder<E>, E> 
Encoder			    pub fn Encoder<'a, W: Writer + Seek>(w: &'a mut W) -> Encoder<'a, W> 
Encoder			    pub struct Encoder<'a, W> 
Encoder			pub struct Encoder<'a> 
Encoder			pub trait Encoder<E> 
EncoderHelpers			pub trait EncoderHelpers<E> 
Error			pub enum Error 
Error			pub enum Error 
FromBase64			pub trait FromBase64 
FromBase64Error			pub enum FromBase64Error 
FromHex			pub trait FromHex 
FromHexError			pub enum FromHexError 
Inner			    struct Inner 
Json			impl Json 
Json			pub enum Json 
MyStruct			pub struct MyStruct  
Ord			impl Ord for Json 
Outer			    struct Outer 
Parser			pub struct Parser<T> 
PrettyEncoder			pub struct PrettyEncoder<'a> 
Res			    pub struct Res 
TaggedDoc			pub struct TaggedDoc<'a> 
TestStruct			 pub struct TestStruct   
TestStruct1			 pub struct TestStruct1  
TestStruct1			pub struct TestStruct1  
ToBase64			pub trait ToBase64 
ToHex			pub trait ToHex 
ToJson			impl ToJson for () 
ToJson			impl ToJson for Json 
ToJson			impl ToJson for MyStruct 
ToJson			impl ToJson for TestStruct1 
ToJson			impl ToJson for bool 
ToJson			impl ToJson for f32 
ToJson			impl ToJson for f64 
ToJson			impl ToJson for i16 
ToJson			impl ToJson for i32 
ToJson			impl ToJson for i64 
ToJson			impl ToJson for i8 
ToJson			impl ToJson for int 
ToJson			impl ToJson for u16 
ToJson			impl ToJson for u32 
ToJson			impl ToJson for u64 
ToJson			impl ToJson for u8 
ToJson			impl ToJson for uint 
ToJson			impl ToJson for ~str 
ToJson			pub trait ToJson 
_check_label			        fn _check_label(&mut self, lbl: &str) -> DecodeResult<()> 
_emit_label			        fn _emit_label(&mut self, label: &str) -> EncodeResult 
_emit_tagged_uint			        fn _emit_tagged_uint(&mut self, t: EbmlEncoderTag, v: uint) -> EncodeResult 
_next_uint			        fn _next_uint(&mut self, exp_tag: EbmlEncoderTag) -> DecodeResult<uint> 
as_boolean			    pub fn as_boolean(&self) -> Option<bool> 
as_list			    pub fn as_list<'a>(&'a self) -> Option<&'a List> 
as_null			    pub fn as_null(&self) -> Option<()> 
as_number			    pub fn as_number(&self) -> Option<f64> 
as_object			    pub fn as_object<'a>(&'a self) -> Option<&'a Object> 
as_str			    pub fn as_str(&self) -> ~str 
as_str_slice			    pub fn as_str_slice<'a>(&'a self) -> &'a str 
as_string			    pub fn as_string<'a>(&'a self) -> Option<&'a str> 
base64			pub mod base64;
bench			mod bench 
bench_from_base64			    pub fn bench_from_base64(bh: & mut BenchHarness) 
bench_from_hex			    pub fn bench_from_hex(bh: & mut BenchHarness) 
bench_to_base64			    pub fn bench_to_base64(bh: & mut BenchHarness) 
bench_to_hex			    pub fn bench_to_hex(bh: & mut BenchHarness) 
buffer_encode			    pub fn buffer_encode<T:Encodable<Encoder<'a>, io::IoError>>(to_encode_object: &T) -> ~[u8]  
bump			    fn bump(&mut self) 
ch_is			    fn ch_is(&self, c: char) -> bool 
ch_or_null			    fn ch_or_null(&self) -> char { self.ch.unwrap_or('\\x00') }
check_err			    fn check_err<T: Decodable<Decoder, Error>>(to_parse: &'static str, expected: Error) 
collection_impls			mod collection_impls;
decode			    fn decode(d: &mut D) -> Result<DList<T>, E> 
decode			    fn decode(d: &mut D) -> Result<EnumSet<T>, E> 
decode			    fn decode(d: &mut D) -> Result<HashMap<K, V, H>, E> 
decode			    fn decode(d: &mut D) -> Result<HashSet<T, H>, E> 
decode			    fn decode(d: &mut D) -> Result<RingBuf<T>, E> 
decode			    fn decode(d: &mut D) -> Result<TreeMap<K, V>, E> 
decode			    fn decode(d: &mut D) -> Result<TreeSet<T>, E> 
decode			    fn decode(d: &mut D) -> Result<TrieMap<V>, E> 
decode			    fn decode(d: &mut D) -> Result<TrieSet, E> 
decode			            fn decode(d: &mut D) -> Result<($($name,)*), E> 
decode			    fn decode(d: &mut D) -> Result<(), E> 
decode			    fn decode(d: &mut D) -> Result<@T, E> 
decode			    fn decode(d: &mut D) -> Result<Option<T>, E> 
decode			    fn decode(d: &mut D) -> Result<Rc<T>, E> 
decode			    fn decode(d: &mut D) -> Result<Self, E>;
decode			    fn decode(d: &mut D) -> Result<Vec<T>, E> 
decode			    fn decode(d: &mut D) -> Result<bool, E> 
decode			    fn decode(d: &mut D) -> Result<char, E> 
decode			    fn decode(d: &mut D) -> Result<f32, E> 
decode			    fn decode(d: &mut D) -> Result<f64, E> 
decode			    fn decode(d: &mut D) -> Result<i16, E> 
decode			    fn decode(d: &mut D) -> Result<i32, E> 
decode			    fn decode(d: &mut D) -> Result<i64, E> 
decode			    fn decode(d: &mut D) -> Result<i8, E> 
decode			    fn decode(d: &mut D) -> Result<int, E> 
decode			    fn decode(d: &mut D) -> Result<path::posix::Path, E> 
decode			    fn decode(d: &mut D) -> Result<path::windows::Path, E> 
decode			    fn decode(d: &mut D) -> Result<u16, E> 
decode			    fn decode(d: &mut D) -> Result<u32, E> 
decode			    fn decode(d: &mut D) -> Result<u64, E> 
decode			    fn decode(d: &mut D) -> Result<u8, E> 
decode			    fn decode(d: &mut D) -> Result<uint, E> 
decode			    fn decode(d: &mut D) -> Result<~T, E> 
decode			    fn decode(d: &mut D) -> Result<~[T], E> 
decode			    fn decode(d: &mut D) -> Result<~str, E> 
doc_as_i16			    pub fn doc_as_i16(d: Doc) -> i16 { doc_as_u16(d) as i16 }
doc_as_i32			    pub fn doc_as_i32(d: Doc) -> i32 { doc_as_u32(d) as i32 }
doc_as_i64			    pub fn doc_as_i64(d: Doc) -> i64 { doc_as_u64(d) as i64 }
doc_as_i8			    pub fn doc_as_i8(d: Doc) -> i8 { doc_as_u8(d) as i8 }
doc_as_u16			    pub fn doc_as_u16(d: Doc) -> u16 
doc_as_u32			    pub fn doc_as_u32(d: Doc) -> u32 
doc_as_u64			    pub fn doc_as_u64(d: Doc) -> u64 
doc_as_u8			    pub fn doc_as_u8(d: Doc) -> u8 
doc_at			    pub fn doc_at<'a>(data: &'a [u8], start: uint) -> DecodeResult<TaggedDoc<'a>> 
docs			    pub fn docs<'a>(d: Doc<'a>, it: |uint, Doc<'a>| -> bool) -> bool 
ebml			pub mod ebml;
emit_bool			        fn emit_bool(&mut self, v: bool) -> EncodeResult 
emit_bool			    fn emit_bool(&mut self, v: bool) -> EncodeResult 
emit_bool			    fn emit_bool(&mut self, v: bool) -> Result<(), E>;
emit_char			        fn emit_char(&mut self, v: char) -> EncodeResult 
emit_char			    fn emit_char(&mut self, v: char) -> EncodeResult { self.emit_str(str::from_char(v)) }
emit_char			    fn emit_char(&mut self, v: char) -> Result<(), E>;
emit_enum			        fn emit_enum(&mut self,
emit_enum			    fn emit_enum(&mut self,
emit_enum			    fn emit_enum(&mut self, name: &str, f: |&mut Self| -> Result<(), E>) -> Result<(), E>;
emit_enum_struct_variant			        fn emit_enum_struct_variant(&mut self,
emit_enum_struct_variant			    fn emit_enum_struct_variant(&mut self,
emit_enum_struct_variant			    fn emit_enum_struct_variant(&mut self,
emit_enum_struct_variant_field			        fn emit_enum_struct_variant_field(&mut self,
emit_enum_struct_variant_field			    fn emit_enum_struct_variant_field(&mut self,
emit_enum_struct_variant_field			    fn emit_enum_struct_variant_field(&mut self,
emit_enum_variant			        fn emit_enum_variant(&mut self,
emit_enum_variant			    fn emit_enum_variant(&mut self,
emit_enum_variant			    fn emit_enum_variant(&mut self,
emit_enum_variant_arg			        fn emit_enum_variant_arg(&mut self,
emit_enum_variant_arg			    fn emit_enum_variant_arg(&mut self,
emit_enum_variant_arg			    fn emit_enum_variant_arg(&mut self,
emit_f32			        fn emit_f32(&mut self, v: f32) -> EncodeResult 
emit_f32			    fn emit_f32(&mut self, v: f32) -> EncodeResult { self.emit_f64(v as f64) }
emit_f32			    fn emit_f32(&mut self, v: f32) -> Result<(), E>;
emit_f64			        fn emit_f64(&mut self, v: f64) -> EncodeResult 
emit_f64			    fn emit_f64(&mut self, v: f64) -> EncodeResult 
emit_f64			    fn emit_f64(&mut self, v: f64) -> Result<(), E>;
emit_from_vec			    fn emit_from_vec<T>(&mut self, v: &[T], f: |&mut S, &T| -> Result<(), E>) -> Result<(), E> 
emit_from_vec			    fn emit_from_vec<T>(&mut self,
emit_i16			        fn emit_i16(&mut self, v: i16) -> EncodeResult 
emit_i16			    fn emit_i16(&mut self, v: i16) -> EncodeResult { self.emit_f64(v as f64) }
emit_i16			    fn emit_i16(&mut self, v: i16) -> Result<(), E>;
emit_i32			        fn emit_i32(&mut self, v: i32) -> EncodeResult 
emit_i32			    fn emit_i32(&mut self, v: i32) -> EncodeResult { self.emit_f64(v as f64) }
emit_i32			    fn emit_i32(&mut self, v: i32) -> Result<(), E>;
emit_i64			        fn emit_i64(&mut self, v: i64) -> EncodeResult 
emit_i64			    fn emit_i64(&mut self, v: i64) -> EncodeResult { self.emit_f64(v as f64) }
emit_i64			    fn emit_i64(&mut self, v: i64) -> Result<(), E>;
emit_i8			        fn emit_i8(&mut self, v: i8) -> EncodeResult 
emit_i8			    fn emit_i8(&mut self, v: i8) -> EncodeResult  { self.emit_f64(v as f64) }
emit_i8			    fn emit_i8(&mut self, v: i8) -> EncodeResult { self.emit_f64(v as f64) }
emit_i8			    fn emit_i8(&mut self, v: i8) -> Result<(), E>;
emit_int			        fn emit_int(&mut self, v: int) -> EncodeResult 
emit_int			    fn emit_int(&mut self, v: int) -> EncodeResult { self.emit_f64(v as f64) }
emit_int			    fn emit_int(&mut self, v: int) -> Result<(), E>;
emit_map			        fn emit_map(&mut self,
emit_map			    fn emit_map(&mut self, _len: uint, f: |&mut Encoder<'a>| -> EncodeResult) -> EncodeResult 
emit_map			    fn emit_map(&mut self,
emit_map			    fn emit_map(&mut self, len: uint, f: |&mut Self| -> Result<(), E>) -> Result<(), E>;
emit_map_elt_key			        fn emit_map_elt_key(&mut self,
emit_map_elt_key			    fn emit_map_elt_key(&mut self,
emit_map_elt_key			    fn emit_map_elt_key(&mut self, idx: uint, f: |&mut Self| -> Result<(), E>) -> Result<(), E>;
emit_map_elt_val			        fn emit_map_elt_val(&mut self,
emit_map_elt_val			    fn emit_map_elt_val(&mut self,
emit_map_elt_val			    fn emit_map_elt_val(&mut self, idx: uint, f: |&mut Self| -> Result<(), E>) -> Result<(), E>;
emit_nil			        fn emit_nil(&mut self) -> EncodeResult 
emit_nil			    fn emit_nil(&mut self) -> EncodeResult { write!(self.wr, "null") }
emit_nil			    fn emit_nil(&mut self) -> Result<(), E>;
emit_opaque			        pub fn emit_opaque(&mut self, f: |&mut Encoder<W>| -> EncodeResult) -> EncodeResult 
emit_option			        fn emit_option(&mut self,
emit_option			    fn emit_option(&mut self, f: |&mut Encoder<'a>| -> EncodeResult) -> EncodeResult 
emit_option			    fn emit_option(&mut self, f: |&mut PrettyEncoder<'a>| -> EncodeResult) -> EncodeResult 
emit_option			    fn emit_option(&mut self, f: |&mut Self| -> Result<(), E>) -> Result<(), E>;
emit_option_none			        fn emit_option_none(&mut self) -> EncodeResult 
emit_option_none			    fn emit_option_none(&mut self) -> EncodeResult { self.emit_nil() }
emit_option_none			    fn emit_option_none(&mut self) -> Result<(), E>;
emit_option_some			        fn emit_option_some(&mut self,
emit_option_some			    fn emit_option_some(&mut self, f: |&mut Encoder<'a>| -> EncodeResult) -> EncodeResult 
emit_option_some			    fn emit_option_some(&mut self, f: |&mut PrettyEncoder<'a>| -> EncodeResult) -> EncodeResult 
emit_option_some			    fn emit_option_some(&mut self, f: |&mut Self| -> Result<(), E>) -> Result<(), E>;
emit_seq			        fn emit_seq(&mut self,
emit_seq			    fn emit_seq(&mut self, _len: uint, f: |&mut Encoder<'a>| -> EncodeResult) -> EncodeResult 
emit_seq			    fn emit_seq(&mut self,
emit_seq			    fn emit_seq(&mut self, len: uint, f: |this: &mut Self| -> Result<(), E>) -> Result<(), E>;
emit_seq_elt			        fn emit_seq_elt(&mut self,
emit_seq_elt			    fn emit_seq_elt(&mut self, idx: uint, f: |&mut Encoder<'a>| -> EncodeResult) -> EncodeResult 
emit_seq_elt			    fn emit_seq_elt(&mut self,
emit_seq_elt			    fn emit_seq_elt(&mut self, idx: uint, f: |this: &mut Self| -> Result<(), E>) -> Result<(), E>;
emit_str			        fn emit_str(&mut self, v: &str) -> EncodeResult 
emit_str			    fn emit_str(&mut self, v: &str) -> EncodeResult 
emit_str			    fn emit_str(&mut self, v: &str) -> Result<(), E>;
emit_struct			        fn emit_struct(&mut self,
emit_struct			    fn emit_struct(&mut self,
emit_struct			    fn emit_struct(&mut self,
emit_struct_field			        fn emit_struct_field(&mut self,
emit_struct_field			    fn emit_struct_field(&mut self,
emit_struct_field			    fn emit_struct_field(&mut self,
emit_tuple			        fn emit_tuple(&mut self,
emit_tuple			    fn emit_tuple(&mut self, len: uint, f: |&mut Encoder<'a>| -> EncodeResult) -> EncodeResult 
emit_tuple			    fn emit_tuple(&mut self,
emit_tuple			    fn emit_tuple(&mut self, len: uint, f: |&mut Self| -> Result<(), E>) -> Result<(), E>;
emit_tuple_arg			        fn emit_tuple_arg(&mut self,
emit_tuple_arg			    fn emit_tuple_arg(&mut self,
emit_tuple_arg			    fn emit_tuple_arg(&mut self, idx: uint, f: |&mut Self| -> Result<(), E>) -> Result<(), E>;
emit_tuple_struct			        fn emit_tuple_struct(&mut self,
emit_tuple_struct			    fn emit_tuple_struct(&mut self,
emit_tuple_struct			    fn emit_tuple_struct(&mut self,
emit_tuple_struct_arg			        fn emit_tuple_struct_arg(&mut self,
emit_tuple_struct_arg			    fn emit_tuple_struct_arg(&mut self,
emit_tuple_struct_arg			    fn emit_tuple_struct_arg(&mut self,
emit_u16			        fn emit_u16(&mut self, v: u16) -> EncodeResult 
emit_u16			    fn emit_u16(&mut self, v: u16) -> EncodeResult { self.emit_f64(v as f64) }
emit_u16			    fn emit_u16(&mut self, v: u16) -> Result<(), E>;
emit_u32			        fn emit_u32(&mut self, v: u32) -> EncodeResult 
emit_u32			    fn emit_u32(&mut self, v: u32) -> EncodeResult { self.emit_f64(v as f64) }
emit_u32			    fn emit_u32(&mut self, v: u32) -> Result<(), E>;
emit_u64			        fn emit_u64(&mut self, v: u64) -> EncodeResult 
emit_u64			    fn emit_u64(&mut self, v: u64) -> EncodeResult { self.emit_f64(v as f64) }
emit_u64			    fn emit_u64(&mut self, v: u64) -> Result<(), E>;
emit_u8			        fn emit_u8(&mut self, v: u8) -> EncodeResult 
emit_u8			    fn emit_u8(&mut self, v: u8) -> EncodeResult  { self.emit_f64(v as f64) }
emit_u8			    fn emit_u8(&mut self, v: u8) -> EncodeResult { self.emit_f64(v as f64) }
emit_u8			    fn emit_u8(&mut self, v: u8) -> Result<(), E>;
emit_uint			        fn emit_uint(&mut self, v: uint) -> EncodeResult 
emit_uint			    fn emit_uint(&mut self, v: uint) -> EncodeResult { self.emit_f64(v as f64) }
emit_uint			    fn emit_uint(&mut self, v: uint) -> Result<(), E>;
encode			    fn encode(&self, e: &mut S) -> Result<(), E> 
encode			    fn encode(&self, s: &mut S) -> Result<(), E> 
encode			    fn encode(&self, e: &mut E) -> Result<(), S> 
encode			            fn encode(&self, s: &mut S) -> Result<(), E> 
encode			    fn encode(&self, e: &mut S) -> Result<(), E> 
encode			    fn encode(&self, s: &mut S) -> Result<(), E> 
encode			    fn encode(&self, s: &mut S) -> Result<(), E>;
end_tag			        pub fn end_tag(&mut self) -> EncodeResult 
eof			    fn eof(&self) -> bool { self.ch.is_none() }
error			    fn error<T>(&self, msg: ~str) -> DecodeResult<T> 
escape_str			fn escape_str(s: &str) -> ~str 
find			    pub fn find<'a>(&'a self, key: &~str) -> Option<&'a Json>
find_path			    pub fn find_path<'a>(&'a self, keys: &[&~str]) -> Option<&'a Json>
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			impl fmt::Show for FromBase64Error 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			impl fmt::Show for FromHexError 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			impl fmt::Show for Json 
from_base64			    fn from_base64(&self) -> Result<~[u8], FromBase64Error> 
from_base64			    fn from_base64(&self) -> Result<~[u8], FromBase64Error>;
from_hex			    fn from_hex(&self) -> Result<~[u8], FromHexError> 
from_hex			    fn from_hex(&self) -> Result<~[u8], FromHexError>;
from_reader			pub fn from_reader(rdr: &mut io::Reader) -> DecodeResult<Json> 
from_str			pub fn from_str(s: &str) -> DecodeResult<Json> 
get			    pub fn get<'a>(&'a self, tag: uint) -> Doc<'a> 
get_doc			    pub fn get_doc<'a>(d: Doc<'a>, tg: uint) -> Doc<'a> 
hex			pub mod hex;
is_boolean			    pub fn is_boolean(&self) -> bool 
is_list			    pub fn is_list<'a>(&'a self) -> bool 
is_null			    pub fn is_null(&self) -> bool 
is_number			    pub fn is_number(&self) -> bool 
is_object			    pub fn is_object<'a>(&'a self) -> bool 
is_string			    pub fn is_string<'a>(&'a self) -> bool 
json			pub mod json;
lt			    fn lt(&self, other: &Json) -> bool 
main			fn main() 
maybe_get_doc			    pub fn maybe_get_doc<'a>(d: Doc<'a>, tg: uint) -> Option<Doc<'a>> 
mk_object			    fn mk_object(items: &[(~str, Json)]) -> Json 
new			    pub fn new(json: Json) -> Decoder 
new			    pub fn new(rdr: T) -> Parser<T> 
new			    pub fn new<'a>(wr: &'a mut io::Writer) -> Encoder<'a> 
new			    pub fn new<'a>(wr: &'a mut io::Writer) -> PrettyEncoder<'a> 
next_char			    fn next_char(&mut self) -> Option<char> 
next_doc			        fn next_doc(&mut self, exp_tag: EbmlEncoderTag) -> DecodeResult<Doc<'doc>> 
parse			    pub fn parse(&mut self) -> DecodeResult<Json> 
parse_decimal			    fn parse_decimal(&mut self, res: f64) -> DecodeResult<f64> 
parse_exponent			    fn parse_exponent(&mut self, mut res: f64) -> DecodeResult<f64> 
parse_ident			    fn parse_ident(&mut self, ident: &str, value: Json) -> DecodeResult<Json> 
parse_integer			    fn parse_integer(&mut self) -> DecodeResult<f64> 
parse_list			    fn parse_list(&mut self) -> DecodeResult<Json> 
parse_number			    fn parse_number(&mut self) -> DecodeResult<Json> 
parse_object			    fn parse_object(&mut self) -> DecodeResult<Json> 
parse_str			    fn parse_str(&mut self) -> DecodeResult<~str> 
parse_value			    fn parse_value(&mut self) -> DecodeResult<Json> 
parse_whitespace			    fn parse_whitespace(&mut self) 
pop			    fn pop(&mut self) -> Json 
push_doc			        fn push_doc<T>(&mut self, exp_tag: EbmlEncoderTag,
read_bool			        fn read_bool(&mut self) -> DecodeResult<bool> 
read_bool			    fn read_bool(&mut self) -> DecodeResult<bool> 
read_bool			    fn read_bool(&mut self) -> Result<bool, E>;
read_char			        fn read_char(&mut self) -> DecodeResult<char> 
read_char			    fn read_char(&mut self) -> DecodeResult<char> 
read_char			    fn read_char(&mut self) -> Result<char, E>;
read_enum			        fn read_enum<T>(&mut self,
read_enum			    fn read_enum<T>(&mut self,
read_enum			    fn read_enum<T>(&mut self, name: &str, f: |&mut Self| -> Result<T, E>) -> Result<T, E>;
read_enum_struct_variant			        fn read_enum_struct_variant<T>(&mut self,
read_enum_struct_variant			    fn read_enum_struct_variant<T>(&mut self,
read_enum_struct_variant			    fn read_enum_struct_variant<T>(&mut self,
read_enum_struct_variant_field			        fn read_enum_struct_variant_field<T>(&mut self,
read_enum_struct_variant_field			    fn read_enum_struct_variant_field<T>(&mut self,
read_enum_struct_variant_field			    fn read_enum_struct_variant_field<T>(&mut self,
read_enum_variant			        fn read_enum_variant<T>(&mut self,
read_enum_variant			    fn read_enum_variant<T>(&mut self,
read_enum_variant			    fn read_enum_variant<T>(&mut self,
read_enum_variant_arg			        fn read_enum_variant_arg<T>(&mut self,
read_enum_variant_arg			    fn read_enum_variant_arg<T>(&mut self, idx: uint, f: |&mut Decoder| -> DecodeResult<T>)
read_enum_variant_arg			    fn read_enum_variant_arg<T>(&mut self,
read_f32			        fn read_f32(&mut self) -> DecodeResult<f32> 
read_f32			    fn read_f32(&mut self) -> DecodeResult<f32> { Ok(try!(self.read_f64()) as f32) }
read_f32			    fn read_f32(&mut self) -> Result<f32, E>;
read_f64			        fn read_f64(&mut self) -> DecodeResult<f64> 
read_f64			    fn read_f64(&mut self) -> DecodeResult<f64> 
read_f64			    fn read_f64(&mut self) -> Result<f64, E>;
read_i16			        fn read_i16(&mut self) -> DecodeResult<i16> 
read_i16			    fn read_i16(&mut self) -> DecodeResult<i16> { Ok(try!(self.read_f64()) as i16) }
read_i16			    fn read_i16(&mut self) -> Result<i16, E>;
read_i32			        fn read_i32(&mut self) -> DecodeResult<i32> 
read_i32			    fn read_i32(&mut self) -> DecodeResult<i32> { Ok(try!(self.read_f64()) as i32) }
read_i32			    fn read_i32(&mut self) -> Result<i32, E>;
read_i64			        fn read_i64(&mut self) -> DecodeResult<i64> 
read_i64			    fn read_i64(&mut self) -> DecodeResult<i64> { Ok(try!(self.read_f64()) as i64) }
read_i64			    fn read_i64(&mut self) -> Result<i64, E>;
read_i8			        fn read_i8 (&mut self) -> DecodeResult<i8> 
read_i8			    fn read_i8 (&mut self) -> DecodeResult<i8 > { Ok(try!(self.read_f64()) as i8) }
read_i8			    fn read_i8(&mut self) -> Result<i8, E>;
read_int			        fn read_int(&mut self) -> DecodeResult<int> 
read_int			    fn read_int(&mut self) -> DecodeResult<int> { Ok(try!(self.read_f64()) as int) }
read_int			    fn read_int(&mut self) -> Result<int, E>;
read_map			        fn read_map<T>(&mut self,
read_map			    fn read_map<T>(&mut self, f: |&mut Decoder, uint| -> DecodeResult<T>) -> DecodeResult<T> 
read_map			    fn read_map<T>(&mut self, f: |&mut Self, uint| -> Result<T, E>) -> Result<T, E>;
read_map_elt_key			        fn read_map_elt_key<T>(&mut self, idx: uint, f: |&mut Decoder<'doc>| -> DecodeResult<T>)
read_map_elt_key			    fn read_map_elt_key<T>(&mut self, idx: uint, f: |&mut Decoder| -> DecodeResult<T>)
read_map_elt_key			    fn read_map_elt_key<T>(&mut self, idx: uint, f: |&mut Self| -> Result<T, E>) -> Result<T, E>;
read_map_elt_val			        fn read_map_elt_val<T>(&mut self, idx: uint, f: |&mut Decoder<'doc>| -> DecodeResult<T>)
read_map_elt_val			    fn read_map_elt_val<T>(&mut self, idx: uint, f: |&mut Decoder| -> DecodeResult<T>)
read_map_elt_val			    fn read_map_elt_val<T>(&mut self, idx: uint, f: |&mut Self| -> Result<T, E>) -> Result<T, E>;
read_nil			        fn read_nil(&mut self) -> DecodeResult<()> { Ok(()) }
read_nil			    fn read_nil(&mut self) -> DecodeResult<()> 
read_nil			    fn read_nil(&mut self) -> Result<(), E>;
read_opaque			        pub fn read_opaque<R>(&mut self,
read_option			        fn read_option<T>(&mut self,
read_option			    fn read_option<T>(&mut self, f: |&mut Decoder, bool| -> DecodeResult<T>) -> DecodeResult<T> 
read_option			    fn read_option<T>(&mut self, f: |&mut Self, bool| -> Result<T, E>) -> Result<T, E>;
read_seq			        fn read_seq<T>(&mut self,
read_seq			    fn read_seq<T>(&mut self, f: |&mut Decoder, uint| -> DecodeResult<T>) -> DecodeResult<T> 
read_seq			    fn read_seq<T>(&mut self, f: |&mut Self, uint| -> Result<T, E>) -> Result<T, E>;
read_seq_elt			        fn read_seq_elt<T>(&mut self, idx: uint, f: |&mut Decoder<'doc>| -> DecodeResult<T>)
read_seq_elt			    fn read_seq_elt<T>(&mut self,
read_seq_elt			    fn read_seq_elt<T>(&mut self, idx: uint, f: |&mut Self| -> Result<T, E>) -> Result<T, E>;
read_str			        fn read_str(&mut self) -> DecodeResult<~str> 
read_str			    fn read_str(&mut self) -> DecodeResult<~str> 
read_str			    fn read_str(&mut self) -> Result<~str, E>;
read_struct			        fn read_struct<T>(&mut self,
read_struct			    fn read_struct<T>(&mut self,
read_struct			    fn read_struct<T>(&mut self, s_name: &str, len: uint, f: |&mut Self| -> Result<T, E>)
read_struct_field			        fn read_struct_field<T>(&mut self,
read_struct_field			    fn read_struct_field<T>(&mut self,
read_struct_field			    fn read_struct_field<T>(&mut self,
read_to_vec			    fn read_to_vec<T>(&mut self, f: |&mut D| -> Result<T, E>) -> Result<~[T], E> 
read_to_vec			    fn read_to_vec<T>(&mut self, f: |&mut Self| -> Result<T, E>) -> Result<~[T], E>;
read_tuple			        fn read_tuple<T>(&mut self,
read_tuple			    fn read_tuple<T>(&mut self, f: |&mut Decoder, uint| -> DecodeResult<T>) -> DecodeResult<T> 
read_tuple			    fn read_tuple<T>(&mut self, f: |&mut Self, uint| -> Result<T, E>) -> Result<T, E>;
read_tuple_arg			        fn read_tuple_arg<T>(&mut self, idx: uint, f: |&mut Decoder<'doc>| -> DecodeResult<T>)
read_tuple_arg			    fn read_tuple_arg<T>(&mut self,
read_tuple_arg			    fn read_tuple_arg<T>(&mut self, a_idx: uint, f: |&mut Self| -> Result<T, E>) -> Result<T, E>;
read_tuple_struct			        fn read_tuple_struct<T>(&mut self,
read_tuple_struct			    fn read_tuple_struct<T>(&mut self,
read_tuple_struct			    fn read_tuple_struct<T>(&mut self,
read_tuple_struct_arg			        fn read_tuple_struct_arg<T>(&mut self,
read_tuple_struct_arg			    fn read_tuple_struct_arg<T>(&mut self,
read_tuple_struct_arg			    fn read_tuple_struct_arg<T>(&mut self,
read_u16			        fn read_u16(&mut self) -> DecodeResult<u16> { Ok(doc_as_u16(try!(self.next_doc(EsU16)))) }
read_u16			    fn read_u16(&mut self)  -> DecodeResult<u16 > { Ok(try!(self.read_f64()) as u16) }
read_u16			    fn read_u16(&mut self) -> Result<u16, E>;
read_u32			        fn read_u32(&mut self) -> DecodeResult<u32> { Ok(doc_as_u32(try!(self.next_doc(EsU32)))) }
read_u32			    fn read_u32(&mut self)  -> DecodeResult<u32 > { Ok(try!(self.read_f64()) as u32) }
read_u32			    fn read_u32(&mut self) -> Result<u32, E>;
read_u64			        fn read_u64(&mut self) -> DecodeResult<u64> { Ok(doc_as_u64(try!(self.next_doc(EsU64)))) }
read_u64			    fn read_u64(&mut self)  -> DecodeResult<u64 > { Ok(try!(self.read_f64()) as u64) }
read_u64			    fn read_u64(&mut self) -> Result<u64, E>;
read_u8			        fn read_u8 (&mut self) -> DecodeResult<u8 > { Ok(doc_as_u8 (try!(self.next_doc(EsU8 )))) }
read_u8			    fn read_u8 (&mut self)  -> DecodeResult<u8  > { Ok(try!(self.read_f64()) as u8) }
read_u8			    fn read_u8(&mut self) -> Result<u8, E>;
read_uint			        fn read_uint(&mut self) -> DecodeResult<uint> 
read_uint			    fn read_uint(&mut self) -> DecodeResult<uint> { Ok(try!(self.read_f64()) as uint) }
read_uint			    fn read_uint(&mut self) -> Result<uint, E>;
reader			pub mod reader 
search			    pub fn search<'a>(&'a self, key: &~str) -> Option<&'a Json> 
serialize			mod serialize;
spaces			fn spaces(n: uint) -> ~str 
start_tag			        pub fn start_tag(&mut self, tag_id: uint) -> EncodeResult 
str_encode			    pub fn str_encode<T:Encodable<Encoder<'a>, io::IoError>>(to_encode_object: &T) -> ~str  
tagged_docs			    pub fn tagged_docs<'a>(d: Doc<'a>, tg: uint, it: |Doc<'a>| -> bool) -> bool 
test_as_boolean			    fn test_as_boolean()
test_as_list			    fn test_as_list()
test_as_null			    fn test_as_null()
test_as_number			    fn test_as_number()
test_as_object			    fn test_as_object()
test_as_string			    fn test_as_string()
test_base64_random			    fn test_base64_random() 
test_decode_enum			    fn test_decode_enum() 
test_decode_errors_enum			    fn test_decode_errors_enum() 
test_decode_errors_struct			    fn test_decode_errors_struct() 
test_decode_identifiers			    fn test_decode_identifiers() 
test_decode_list			    fn test_decode_list() 
test_decode_map			    fn test_decode_map() 
test_decode_numbers			    fn test_decode_numbers() 
test_decode_option			    fn test_decode_option() 
test_decode_str			    fn test_decode_str() 
test_decode_struct			    fn test_decode_struct() 
test_encode_hashmap_with_numeric_key			    fn test_encode_hashmap_with_numeric_key() 
test_find			    fn test_find()
test_find_path			    fn test_find_path()
test_from_base64_basic			    fn test_from_base64_basic() 
test_from_base64_invalid_char			    fn test_from_base64_invalid_char() 
test_from_base64_invalid_padding			    fn test_from_base64_invalid_padding() 
test_from_base64_newlines			    fn test_from_base64_newlines() 
test_from_base64_urlsafe			    fn test_from_base64_urlsafe() 
test_from_hex_all_bytes			    pub fn test_from_hex_all_bytes() 
test_from_hex_ignores_whitespace			    pub fn test_from_hex_ignores_whitespace() 
test_from_hex_invalid_char			    pub fn test_from_hex_invalid_char() 
test_from_hex_odd_len			    pub fn test_from_hex_odd_len() 
test_from_hex_okay			    pub fn test_from_hex_okay() 
test_hashmap_with_numeric_key_can_handle_double_quote_delimited_key			    fn test_hashmap_with_numeric_key_can_handle_double_quote_delimited_key() 
test_is_boolean			    fn test_is_boolean()
test_is_list			    fn test_is_list()
test_is_null			    fn test_is_null()
test_is_number			    fn test_is_number()
test_is_object			    fn test_is_object()
test_is_string			    fn test_is_string()
test_multiline_errors			    fn test_multiline_errors() 
test_option_int			    fn test_option_int() 
test_prettyencode_hashmap_with_numeric_key			    fn test_prettyencode_hashmap_with_numeric_key() 
test_read_identifiers			    fn test_read_identifiers() 
test_read_list			    fn test_read_list() 
test_read_number			    fn test_read_number() 
test_read_object			    fn test_read_object() 
test_read_str			    fn test_read_str() 
test_search			    fn test_search()
test_to_base64_basic			    fn test_to_base64_basic() 
test_to_base64_line_break			    fn test_to_base64_line_break() 
test_to_base64_padding			    fn test_to_base64_padding() 
test_to_base64_url_safe			    fn test_to_base64_url_safe() 
test_to_hex			    pub fn test_to_hex() 
test_to_hex_all_bytes			    pub fn test_to_hex_all_bytes() 
test_trailing_characters			    fn test_trailing_characters() 
test_v			        fn test_v(v: Option<int>) 
test_vuint_at			    fn test_vuint_at() 
test_write_bool			    fn test_write_bool() 
test_write_enum			    fn test_write_enum() 
test_write_list			    fn test_write_list() 
test_write_none			    fn test_write_none() 
test_write_null			    fn test_write_null() 
test_write_number			    fn test_write_number() 
test_write_object			    fn test_write_object() 
test_write_some			    fn test_write_some() 
test_write_str			    fn test_write_str() 
tests			mod tests 
tests			mod tests 
tests			mod tests 
tests			mod tests 
to_base64			    fn to_base64(&self, config: Config) -> ~str 
to_base64			    fn to_base64(&self, config: Config) -> ~str;
to_hex			    fn to_hex(&self) -> ~str 
to_hex			    fn to_hex(&self) -> ~str;
to_json			    fn to_json( &self ) -> json::Json 
to_json			    fn to_json(&self) -> Json { (*self).clone() }
to_json			    fn to_json(&self) -> Json { Boolean(*self) }
to_json			    fn to_json(&self) -> Json { List(self.iter().map(|elt| elt.to_json()).collect()) }
to_json			    fn to_json(&self) -> Json { Null }
to_json			    fn to_json(&self) -> Json { Number(*self as f64) }
to_json			    fn to_json(&self) -> Json { Number(*self) }
to_json			    fn to_json(&self) -> Json { String((*self).clone()) }
to_json			    fn to_json(&self) -> Json 
to_json			    fn to_json(&self) -> Json;
to_pretty_str			    pub fn to_pretty_str(&self) -> ~str 
to_pretty_writer			    pub fn to_pretty_writer(&self, wr: &mut io::Writer) -> EncodeResult 
to_writer			    pub fn to_writer(&self, wr: &mut io::Writer) -> EncodeResult 
unsafe_clone			        pub unsafe fn unsafe_clone(&self) -> Encoder<'a, W> 
vuint_at			    pub fn vuint_at(data: &[u8], start: uint) -> DecodeResult<Res> 
vuint_at_A_aligned			    pub fn vuint_at_A_aligned(bh: &mut BenchHarness) 
vuint_at_A_unaligned			    pub fn vuint_at_A_unaligned(bh: &mut BenchHarness) 
vuint_at_D_aligned			    pub fn vuint_at_D_aligned(bh: &mut BenchHarness) 
vuint_at_D_unaligned			    pub fn vuint_at_D_unaligned(bh: &mut BenchHarness) 
vuint_at_slow			    fn vuint_at_slow(data: &[u8], start: uint) -> DecodeResult<Res> 
with_doc_data			    pub fn with_doc_data<'a, T>(d: Doc<'a>, f: |x: &'a [u8]| -> T) -> T 
with_str_writer			    fn with_str_writer(f: |&mut io::Writer|) -> ~str 
wr_bytes			        pub fn wr_bytes(&mut self, b: &[u8]) -> EncodeResult 
wr_str			        pub fn wr_str(&mut self, s: &str) -> EncodeResult 
wr_tag			        pub fn wr_tag(&mut self, tag_id: uint, blk: || -> EncodeResult) -> EncodeResult 
wr_tagged_bytes			        pub fn wr_tagged_bytes(&mut self, tag_id: uint, b: &[u8]) -> EncodeResult 
wr_tagged_i16			        pub fn wr_tagged_i16(&mut self, tag_id: uint, v: i16) -> EncodeResult 
wr_tagged_i32			        pub fn wr_tagged_i32(&mut self, tag_id: uint, v: i32) -> EncodeResult 
wr_tagged_i64			        pub fn wr_tagged_i64(&mut self, tag_id: uint, v: i64) -> EncodeResult 
wr_tagged_i8			        pub fn wr_tagged_i8(&mut self, tag_id: uint, v: i8) -> EncodeResult 
wr_tagged_str			        pub fn wr_tagged_str(&mut self, tag_id: uint, v: &str) -> EncodeResult 
wr_tagged_u16			        pub fn wr_tagged_u16(&mut self, tag_id: uint, v: u16) -> EncodeResult 
wr_tagged_u32			        pub fn wr_tagged_u32(&mut self, tag_id: uint, v: u32)  -> EncodeResult
wr_tagged_u64			        pub fn wr_tagged_u64(&mut self, tag_id: uint, v: u64) -> EncodeResult 
wr_tagged_u8			        pub fn wr_tagged_u8(&mut self, tag_id: uint, v: u8) -> EncodeResult 
write_sized_vuint			    fn write_sized_vuint<W: Writer>(w: &mut W, n: uint, size: uint) -> EncodeResult 
write_vuint			    fn write_vuint<W: Writer>(w: &mut W, n: uint) -> EncodeResult 
writer			pub mod writer 
