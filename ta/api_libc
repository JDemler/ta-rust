::core::clone::Clone for WIN32_FIND_DATAW			                impl ::core::clone::Clone for WIN32_FIND_DATAW 
::core::clone::Clone for WSAPROTOCOL_INFO			                impl ::core::clone::Clone for WSAPROTOCOL_INFO 
::core::clone::Clone for pthread_attr_t			                impl ::core::clone::Clone for pthread_attr_t 
::core::clone::Clone for sockaddr_storage			                impl ::core::clone::Clone for sockaddr_storage 
::core::clone::Clone for sockaddr_un			                impl ::core::clone::Clone for sockaddr_un 
CloseHandle			                pub fn CloseHandle(hObject: HANDLE) -> BOOL;
ConnectNamedPipe			                pub fn ConnectNamedPipe(hNamedPipe: HANDLE,
CopyFileW			                pub fn CopyFileW(lpExistingFileName: LPCWSTR,
CreateDirectoryW			                pub fn CreateDirectoryW(lpPathName: LPCWSTR,
CreateEventW			                pub fn CreateEventW(lpEventAttributes: LPSECURITY_ATTRIBUTES,
CreateFileMappingW			                pub fn CreateFileMappingW(hFile: HANDLE,
CreateFileW			                pub fn CreateFileW(lpFileName: LPCWSTR,
CreateHardLinkW			                pub fn CreateHardLinkW(lpSymlinkFileName: LPCWSTR,
CreateNamedPipeW			                pub fn CreateNamedPipeW(
CreateProcessW			                pub fn CreateProcessW(lpApplicationName: LPCWSTR,
DIR			            pub enum DIR {}
DeleteFileW			                pub fn DeleteFileW(lpPathName: LPCWSTR) -> BOOL;
DisconnectNamedPipe			                pub fn DisconnectNamedPipe(hNamedPipe: HANDLE) -> BOOL;
DuplicateHandle			                pub fn DuplicateHandle(hSourceProcessHandle: HANDLE,
FILE			            pub enum FILE {}
FindClose			                pub fn FindClose(findFile: HANDLE) -> BOOL;
FindFirstFileW			                pub fn FindFirstFileW(fileName: LPCWSTR, findFileData: LPWIN32_FIND_DATAW)
FindNextFileW			                pub fn FindNextFileW(findFile: HANDLE, findFileData: LPWIN32_FIND_DATAW)
FlushFileBuffers			                pub fn FlushFileBuffers(hFile: HANDLE) -> BOOL;
FreeEnvironmentStringsW			                pub fn FreeEnvironmentStringsW(env_ptr: LPWCH) -> BOOL;
GetCurrentDirectoryW			                pub fn GetCurrentDirectoryW(nBufferLength: DWORD,
GetCurrentProcess			                pub fn GetCurrentProcess() -> HANDLE;
GetCurrentProcessId			                pub fn GetCurrentProcessId() -> DWORD;
GetEnvironmentStringsW			                pub fn GetEnvironmentStringsW() -> LPWCH;
GetEnvironmentVariableW			                pub fn GetEnvironmentVariableW(n: LPCWSTR,
GetExitCodeProcess			                pub fn GetExitCodeProcess(hProcess: HANDLE,
GetLastError			                pub fn GetLastError() -> DWORD;
GetModuleFileNameW			                pub fn GetModuleFileNameW(hModule: HMODULE,
GetOverlappedResult			                pub fn GetOverlappedResult(hFile: HANDLE,
GetSystemInfo			                pub fn GetSystemInfo(lpSystemInfo: LPSYSTEM_INFO);
GetSystemTimeAsFileTime			                pub fn GetSystemTimeAsFileTime(
MapViewOfFile			                pub fn MapViewOfFile(hFileMappingObject: HANDLE,
MoveFileExW			                pub fn MoveFileExW(lpExistingFileName: LPCWSTR,
OpenProcess			                pub fn OpenProcess(dwDesiredAccess: DWORD,
QueryPerformanceCounter			                pub fn QueryPerformanceCounter(
QueryPerformanceFrequency			                pub fn QueryPerformanceFrequency(
ReadFile			                pub fn ReadFile(hFile: HANDLE,
RemoveDirectoryW			                pub fn RemoveDirectoryW(lpPathName: LPCWSTR) -> BOOL;
SetCurrentDirectoryW			                pub fn SetCurrentDirectoryW(lpPathName: LPCWSTR) -> BOOL;
SetEndOfFile			                pub fn SetEndOfFile(hFile: HANDLE) -> BOOL;
SetEnvironmentVariableW			                pub fn SetEnvironmentVariableW(n: LPCWSTR, v: LPCWSTR)
SetFilePointerEx			                pub fn SetFilePointerEx(hFile: HANDLE,
SetNamedPipeHandleState			                pub fn SetNamedPipeHandleState(hNamedPipe: HANDLE,
TerminateProcess			                pub fn TerminateProcess(hProcess: HANDLE, uExitCode: c_uint)
UnmapViewOfFile			                pub fn UnmapViewOfFile(lpBaseAddress: LPCVOID) -> BOOL;
VirtualAlloc			                pub fn VirtualAlloc(lpAddress: LPVOID,
VirtualFree			                pub fn VirtualFree(lpAddress: LPVOID,
VirtualLock			                pub fn VirtualLock(lpAddress: LPVOID, dwSize: SIZE_T) -> BOOL;
VirtualProtect			                pub fn VirtualProtect(lpAddress: LPVOID,
VirtualQuery			                pub fn VirtualQuery(lpAddress: LPCVOID,
VirtualUnlock			                pub fn VirtualUnlock(lpAddress: LPVOID, dwSize: SIZE_T)
WaitForSingleObject			                pub fn WaitForSingleObject(hHandle: HANDLE,
WaitNamedPipeW			                pub fn WaitNamedPipeW(lpNamedPipeName: LPCWSTR,
WriteFile			                pub fn WriteFile(hFile: HANDLE,
_NSGetExecutablePath			            pub fn _NSGetExecutablePath(buf: *mut c_char, bufsize: *mut u32)
_exit			                pub fn _exit(status: c_int) -> !;
abs			                pub fn abs(i: c_int) -> c_int;
accept			            pub fn accept(socket: SOCKET, address: *mut sockaddr,
accept			            pub fn accept(socket: c_int, address: *mut sockaddr,
access			                pub fn access(path: *const c_char, amode: c_int) -> c_int;
alarm			                pub fn alarm(seconds: c_uint) -> c_uint;
arch			        pub mod arch 
atexit			                pub fn atexit(cb: extern fn()) -> c_int;
atof			                pub fn atof(s: *const c_char) -> c_double;
atoi			                pub fn atoi(s: *const c_char) -> c_int;
bind			            pub fn bind(socket: SOCKET, address: *const sockaddr,
bind			            pub fn bind(socket: c_int, address: *const sockaddr,
bsd43			            pub mod bsd43 
bsd43			    pub mod bsd43 
bsd44			            pub mod bsd44 
bsd44			            pub mod bsd44 {}
bsd44			        pub mod bsd44 
bsd44			        pub mod bsd44 {}
bsd44			    pub mod bsd44 
c95			            pub mod c95 
c95			        pub mod c95 
c95			    pub mod c95 
c99			            pub mod c99 
c99			        pub mod c99 
c_void			            pub enum c_void 
calloc			                pub fn calloc(nobj: size_t, size: size_t) -> *mut c_void;
chdir			                pub fn chdir(dir: *const c_char) -> c_int;
chmod			                pub fn chmod(path: *const c_char, mode: c_int) -> c_int;
chmod			                pub fn chmod(path: *const c_char, mode: mode_t) -> c_int;
chown			                pub fn chown(path: *const c_char, uid: uid_t,
clone			                    fn clone(&self) -> WIN32_FIND_DATAW { *self }
clone			                    fn clone(&self) -> WSAPROTOCOL_INFO { *self }
clone			                    fn clone(&self) -> pthread_attr_t { *self }
clone			                    fn clone(&self) -> sockaddr_storage { *self }
clone			                    fn clone(&self) -> sockaddr_un { *self }
close			                pub fn close(fd: c_int) -> c_int;
closedir			                pub fn closedir(dirp: *mut DIR) -> c_int;
closesocket			            pub fn closesocket(socket: SOCKET) -> c_int;
commit			                pub fn commit(fd: c_int) -> c_int;
common			        pub mod common 
common			    pub mod common 
connect			            pub fn connect(socket: SOCKET, address: *const sockaddr,
connect			            pub fn connect(socket: c_int, address: *const sockaddr,
consts			pub mod consts 
creat			                pub fn creat(path: *const c_char, mode: c_int) -> c_int;
creat			                pub fn creat(path: *const c_char, mode: mode_t) -> c_int;
ctype			        pub mod ctype 
dirent			        pub mod dirent 
dirent_t			            pub enum dirent_t {}
dup			                pub fn dup(fd: c_int) -> c_int;
dup2			                pub fn dup2(src: c_int, dst: c_int) -> c_int;
execv			                pub fn execv(prog: *const c_char,
execve			                pub fn execve(prog: *const c_char, argv: *const *const c_char,
execvp			                pub fn execvp(c: *const c_char,
execvpe			                pub fn execvpe(c: *const c_char, argv: *const *const c_char,
exit			                pub fn exit(status: c_int) -> !;
extra			            pub mod extra 
extra			        pub mod extra 
extra			    pub mod extra 
fchmod			                pub fn fchmod(fd: c_int, mode: mode_t) -> c_int;
fclose			                pub fn fclose(file: *mut FILE) -> c_int;
fcntl			                pub fn fcntl(fd: c_int, cmd: c_int, ...) -> c_int;
fcntl			        pub mod fcntl 
fdatasync			                pub fn fdatasync(fd: c_int) -> c_int;
fdopen			                pub fn fdopen(fd: c_int, mode: *const c_char) -> *mut FILE;
feof			                pub fn feof(stream: *mut FILE) -> c_int;
ferror			                pub fn ferror(stream: *mut FILE) -> c_int;
fflush			                pub fn fflush(file: *mut FILE) -> c_int;
fgetc			                pub fn fgetc(stream: *mut FILE) -> c_int;
fgetpos			                pub fn fgetpos(stream: *mut FILE, ptr: *mut fpos_t) -> c_int;
fgets			                pub fn fgets(buf: *mut c_char, n: c_int, stream: *mut FILE)
fileno			                pub fn fileno(stream: *mut FILE) -> c_int;
flock			            pub fn flock(fd: c_int, operation: c_int) -> c_int;
fopen			                pub fn fopen(filename: *const c_char,
fork			                pub fn fork() -> pid_t;
fpathconf			                pub fn fpathconf(filedes: c_int, name: c_int) -> c_long;
fpos_t			            pub enum fpos_t {}
fputc			                pub fn fputc(c: c_int, stream: *mut FILE) -> c_int;
fputs			                pub fn fputs(s: *const c_char, stream: *mut FILE)-> c_int;
fread			                pub fn fread(ptr: *mut c_void,
free			                pub fn free(p: *mut c_void);
freeifaddrs			            pub fn freeifaddrs(ifa: *mut ifaddrs);
freopen			                pub fn freopen(filename: *const c_char, mode: *const c_char,
fseek			                pub fn fseek(stream: *mut FILE, offset: c_long, whence: c_int)
fsetpos			                pub fn fsetpos(stream: *mut FILE, ptr: *mut fpos_t) -> c_int;
fstat			                pub fn fstat(fildes: c_int, buf: *mut stat) -> c_int;
fsync			                pub fn fsync(fd: c_int) -> c_int;
ftell			                pub fn ftell(stream: *mut FILE) -> c_long;
ftruncate			                pub fn ftruncate(fd: c_int, length: off_t) -> c_int;
funcs			pub mod funcs 
fwrite			                pub fn fwrite(ptr: *const c_void,
get_osfhandle			                pub fn get_osfhandle(fd: c_int) -> c_long;
getcwd			                pub fn getcwd(buf: *mut c_char, size: size_t) -> *mut c_char;
getdtablesize			            pub fn getdtablesize() -> c_int;
getegid			                pub fn getegid() -> gid_t;
getenv			                pub fn getenv(s: *const c_char) -> *mut c_char;
geteuid			                pub fn geteuid() -> uid_t;
getgid			                pub fn getgid() -> gid_t;
getgroups			                pub fn getgroups(ngroups_max: c_int, groups: *mut gid_t)
getifaddrs			            pub fn getifaddrs(ifap: *mut *mut ifaddrs) -> c_int;
getlogin			                pub fn getlogin() -> *mut c_char;
getopt			                pub fn getopt(argc: c_int, argv: *const *const c_char,
getopt			                pub fn getopt(argc: c_int, argv: *mut *mut c_char,
getpeername			            pub fn getpeername(socket: SOCKET, address: *mut sockaddr,
getpeername			            pub fn getpeername(socket: c_int, address: *mut sockaddr,
getpgrp			                pub fn getpgrp() -> pid_t;
getpid			                pub fn getpid() -> c_int;
getpid			                pub fn getpid() -> pid_t;
getppid			                pub fn getppid() -> pid_t;
getrlimit			                pub fn getrlimit(resource: c_int, rlim: *mut rlimit) -> c_int;
getrusage			                pub fn getrusage(resource: c_int, usage: *mut rusage) -> c_int;
getsid			                pub fn getsid(pid: pid_t) -> pid_t;
getsockname			            pub fn getsockname(socket: SOCKET, address: *mut sockaddr,
getsockname			            pub fn getsockname(socket: c_int, address: *mut sockaddr,
getuid			                pub fn getuid() -> uid_t;
glob			                pub fn glob(pattern: *const c_char,
glob			        pub mod glob 
globfree			                pub fn globfree(pglob: *mut glob_t);
if_nametoindex			                pub fn if_nametoindex(ifname: *const c_char) -> c_uint;
ioctl			            pub fn ioctl(fd: c_int, request: c_ulong, ...) -> c_int;
ioctlsocket			                pub fn ioctlsocket(s: SOCKET, cmd: c_long, argp: *mut c_ulong) -> c_int;
isalnum			                pub fn isalnum(c: c_int) -> c_int;
isalpha			                pub fn isalpha(c: c_int) -> c_int;
isatty			                pub fn isatty(fd: c_int) -> c_int;
iscntrl			                pub fn iscntrl(c: c_int) -> c_int;
isdigit			                pub fn isdigit(c: c_int) -> c_int;
isgraph			                pub fn isgraph(c: c_int) -> c_int;
islower			                pub fn islower(c: c_int) -> c_int;
isprint			                pub fn isprint(c: c_int) -> c_int;
ispunct			                pub fn ispunct(c: c_int) -> c_int;
isspace			                pub fn isspace(c: c_int) -> c_int;
isupper			                pub fn isupper(c: c_int) -> c_int;
isxdigit			                pub fn isxdigit(c: c_int) -> c_int;
kernel32			        pub mod kernel32 
kill			                pub fn kill(pid: pid_t, sig: c_int) -> c_int;
labs			                pub fn labs(i: c_long) -> c_long;
link			                pub fn link(src: *const c_char, dst: *const c_char) -> c_int;
listen			            pub fn listen(socket: SOCKET, backlog: c_int) -> c_int;
listen			            pub fn listen(socket: c_int, backlog: c_int) -> c_int;
lseek			                pub fn lseek(fd: c_int, offset: c_long, origin: c_int)
lseek			                pub fn lseek(fd: c_int, offset: off_t, whence: c_int)
lstat			                pub fn lstat(path: *const c_char, buf: *mut stat) -> c_int;
madvise			            pub fn madvise(addr: *mut c_void, len: size_t, advice: c_int)
malloc			                pub fn malloc(size: size_t) -> *mut c_void;
memchr			                pub fn memchr(cx: *const c_void, c: c_int,
memcmp			                pub fn memcmp(cx: *const c_void, ct: *const c_void,
mincore			            pub fn mincore(addr: *mut c_void, len: size_t, vec: *mut c_uchar)
mkdir			                pub fn mkdir(path: *const c_char) -> c_int;
mkdir			                pub fn mkdir(path: *const c_char, mode: mode_t) -> c_int;
mkfifo			                pub fn mkfifo(path: *const c_char, mode: mode_t) -> c_int;
mlock			                pub fn mlock(addr: *const c_void, len: size_t) -> c_int;
mlockall			                pub fn mlockall(flags: c_int) -> c_int;
mman			        pub mod mman 
mmap			                pub fn mmap(addr: *mut c_void,
mprotect			                pub fn mprotect(addr: *mut c_void, len: size_t, prot: c_int)
msvcrt			        pub mod msvcrt 
msync			                pub fn msync(addr: *mut c_void, len: size_t, flags: c_int)
munlock			                pub fn munlock(addr: *const c_void, len: size_t) -> c_int;
munlockall			                pub fn munlockall() -> c_int;
munmap			                pub fn munmap(addr: *mut c_void, len: size_t) -> c_int;
nanosleep			                pub fn nanosleep(rqtp: *const timespec,
net			        pub mod net 
open			                    pub fn open(path: *const ::c_char, oflag: ::c_int, ...)
open			                    pub fn open(path: *const ::c_char, oflag: ::c_int, mode: ::mode_t)
open			                pub fn open(path: *const c_char, oflag: c_int, mode: c_int)
open_osfhandle			                pub fn open_osfhandle(osfhandle: intptr_t,
open_shim			            mod open_shim 
opendir			                pub fn opendir(dirname: *const c_char) -> *mut DIR;
os			    pub mod os 
pathconf			                pub fn pathconf(path: *mut c_char, name: c_int) -> c_long;
pause			                pub fn pause() -> c_int;
pclose			                pub fn pclose(stream: *mut FILE) -> c_int;
perror			                pub fn perror(s: *const c_char);
pipe			                pub fn pipe(fds: *mut c_int) -> c_int;
pipe			                pub fn pipe(fds: *mut c_int, psize: c_uint, textmode: c_int)
popen			                pub fn popen(command: *const c_char,
posix01			            pub mod posix01 
posix01			        pub mod posix01 
posix01			        pub mod posix01 {}
posix01			    pub mod posix01 
posix08			            pub mod posix08 
posix08			            pub mod posix08 {}
posix08			        pub mod posix08 
posix08			        pub mod posix08 {}
posix08			    pub mod posix08 
posix88			            pub mod posix88 
posix88			        pub mod posix88 
posix88			    pub mod posix88 
posix_madvise			                pub fn posix_madvise(addr: *mut c_void,
pread			                pub fn pread(fd: c_int, buf: *mut c_void, count: size_t,
putenv			                pub fn putenv(string: *mut c_char) -> c_int;
puts			                pub fn puts(s: *const c_char) -> c_int;
pwrite			                pub fn pwrite(fd: c_int, buf: *const c_void, count: size_t,
rand			                pub fn rand() -> c_int;
read			                pub fn read(fd: c_int, buf: *mut c_void, count: c_uint)
read			                pub fn read(fd: c_int, buf: *mut c_void, count: size_t)
readdir_r			                pub fn readdir_r(dirp: *mut DIR, entry: *mut dirent_t,
readlink			                pub fn readlink(path: *const c_char,
realloc			                pub fn realloc(p: *mut c_void, size: size_t) -> *mut c_void;
realpath			            pub fn realpath(pathname: *const c_char, resolved: *mut c_char)
recv			            pub fn recv(socket: SOCKET, buf: *mut c_void, len: c_int,
recv			            pub fn recv(socket: c_int, buf: *mut c_void, len: size_t,
recvfrom			            pub fn recvfrom(socket: SOCKET, buf: *mut c_void, len: c_int,
recvfrom			            pub fn recvfrom(socket: c_int, buf: *mut c_void, len: size_t,
remove			                pub fn remove(filename: *const c_char) -> c_int;
rename			                pub fn rename(oldname: *const c_char,
resource			        pub mod resource 
rewind			                pub fn rewind(stream: *mut FILE);
rewinddir			                pub fn rewinddir(dirp: *mut DIR);
rlimit			                pub struct rlimit 
rmdir			                pub fn rmdir(path: *const c_char) -> c_int;
rusage			                pub struct rusage 
seekdir			                pub fn seekdir(dirp: *mut DIR, loc: c_long);
send			            pub fn send(socket: SOCKET, buf: *const c_void, len: c_int,
send			            pub fn send(socket: c_int, buf: *const c_void, len: size_t,
sendto			            pub fn sendto(socket: SOCKET, buf: *const c_void, len: c_int,
sendto			            pub fn sendto(socket: c_int, buf: *const c_void, len: size_t,
setbuf			                pub fn setbuf(stream: *mut FILE, buf: *mut c_char);
setenv			                pub fn setenv(name: *const c_char, val: *const c_char,
setgid			                pub fn setgid(gid: gid_t) -> c_int;
setpgid			                pub fn setpgid(pid: pid_t, pgid: pid_t) -> c_int;
setrlimit			                pub fn setrlimit(resource: c_int, rlim: *const rlimit) -> c_int;
setsid			                pub fn setsid() -> pid_t;
setsockopt			            pub fn setsockopt(socket: SOCKET, level: c_int, name: c_int,
setsockopt			            pub fn setsockopt(socket: c_int, level: c_int, name: c_int,
setuid			                pub fn setuid(uid: uid_t) -> c_int;
setvbuf			                pub fn setvbuf(stream: *mut FILE,
shm_open			                pub fn shm_open(name: *const c_char, oflag: c_int, mode: mode_t)
shm_unlink			                pub fn shm_unlink(name: *const c_char) -> c_int;
shutdown			            pub fn shutdown(socket: SOCKET, how: c_int) -> c_int;
shutdown			            pub fn shutdown(socket: c_int, how: c_int) -> c_int;
signal			                pub fn signal(signum: c_int,
signal			        pub mod signal 
sleep			                pub fn sleep(secs: c_uint) -> c_uint;
socket			            pub fn socket(domain: c_int, ty: c_int, protocol: c_int) -> SOCKET;
socket			            pub fn socket(domain: c_int, ty: c_int, protocol: c_int) -> c_int;
srand			                pub fn srand(seed: c_uint);
stat			                pub fn stat(path: *const c_char, buf: *mut stat) -> c_int;
stat_			        pub mod stat_ 
stdio			        pub mod stdio 
stdlib			        pub mod stdlib 
strcat			                pub fn strcat(s: *mut c_char, ct: *const c_char) -> *mut c_char;
strchr			                pub fn strchr(cs: *const c_char, c: c_int) -> *mut c_char;
strcmp			                pub fn strcmp(cs: *const c_char, ct: *const c_char) -> c_int;
strcoll			                pub fn strcoll(cs: *const c_char, ct: *const c_char) -> c_int;
strcpy			                pub fn strcpy(dst: *mut c_char,
strcspn			                pub fn strcspn(cs: *const c_char, ct: *const c_char) -> size_t;
strerror			                pub fn strerror(n: c_int) -> *mut c_char;
string			        pub mod string 
strlen			                pub fn strlen(cs: *const c_char) -> size_t;
strncat			                pub fn strncat(s: *mut c_char, ct: *const c_char,
strncmp			                pub fn strncmp(cs: *const c_char, ct: *const c_char,
strncpy			                pub fn strncpy(dst: *mut c_char, src: *const c_char, n: size_t)
strpbrk			                pub fn strpbrk(cs: *const c_char,
strrchr			                pub fn strrchr(cs: *const c_char, c: c_int) -> *mut c_char;
strspn			                pub fn strspn(cs: *const c_char, ct: *const c_char) -> size_t;
strstr			                pub fn strstr(cs: *const c_char,
strtod			                pub fn strtod(s: *const c_char,
strtok			                pub fn strtok(s: *mut c_char, t: *const c_char) -> *mut c_char;
strtol			                pub fn strtol(s: *const c_char,
strtoul			                pub fn strtoul(s: *const c_char, endp: *mut *mut c_char,
strxfrm			                pub fn strxfrm(s: *mut c_char, ct: *const c_char,
symlink			                pub fn symlink(path1: *const c_char,
sysconf			                pub fn sysconf(name: c_int) -> c_long;
sysconf			        pub mod sysconf 
sysctl			            pub fn sysctl(name: *mut c_int,
sysctlbyname			            pub fn sysctlbyname(name: *const c_char,
sysctlnametomib			            pub fn sysctlnametomib(name: *const c_char,
system			                pub fn system(s: *const c_char) -> c_int;
tcgetpgrp			                pub fn tcgetpgrp(fd: c_int) -> pid_t;
telldir			                pub fn telldir(dirp: *mut DIR) -> c_long;
timezone			                pub enum timezone {}
tmpfile			                pub fn tmpfile() -> *mut FILE;
tolower			                pub fn tolower(c: c_char) -> c_char;
toupper			                pub fn toupper(c: c_char) -> c_char;
ttyname			                pub fn ttyname(fd: c_int) -> *mut c_char;
types			pub mod types 
ungetc			                pub fn ungetc(c: c_int, stream: *mut FILE) -> c_int;
unistd			        pub mod unistd 
unlink			                pub fn unlink(c: *const c_char) -> c_int;
unsetenv			                pub fn unsetenv(name: *const c_char) -> c_int;
usleep			                pub fn usleep(secs: c_uint) -> c_int;
utime			                pub fn utime(file: *const c_char, buf: *const utimbuf) -> c_int;
wait			                pub fn wait(status: *const c_int) -> pid_t;
waitpid			                pub fn waitpid(pid: pid_t, status: *const c_int, options: c_int)
wchmod			                pub fn wchmod(path: *const wchar_t, mode: c_int) -> c_int;
wcslen			                pub fn wcslen(buf: *const wchar_t) -> size_t;
winsock			        pub mod winsock 
wopen			                pub fn wopen(path: *const wchar_t, oflag: c_int, mode: c_int)
write			                pub fn write(fd: c_int, buf: *const c_void, count: size_t)
write			                pub fn write(fd: c_int, buf: *const c_void,
wrmdir			                pub fn wrmdir(path: *const wchar_t) -> c_int;
wstat			                pub fn wstat(path: *const wchar_t, buf: *mut stat) -> c_int;
wutime			                pub fn wutime(file: *const wchar_t, buf: *mut utimbuf) -> c_int;
