Edge			    fn Edge(from: uint, to: uint, label: &'static str) -> Edge 
Edge			    struct Edge 
Edges			struct Edges(Vec<Ed>);
Graph			struct Graph { nodes: Vec<&'static str>, edges: Vec<(uint,uint)> }
GraphWalk			pub trait GraphWalk<'a, N, E> 
Id			pub struct Id<'a> 
IntoMaybeOwnedVector			pub trait IntoMaybeOwnedVector<'a,T> 
LabelText			pub enum LabelText<'a> 
LabelledGraph			    impl LabelledGraph 
LabelledGraph			    struct LabelledGraph 
LabelledGraphWithEscStrs			    impl LabelledGraphWithEscStrs 
LabelledGraphWithEscStrs			    struct LabelledGraphWithEscStrs 
Labeller			pub trait Labeller<'a,N,E> 
MaybeOwnedVector			pub enum MaybeOwnedVector<'a,T> 
NodeLabels			    enum NodeLabels<L> 
NodeLabels			    impl NodeLabels<&'static str> 
as_slice			    pub fn as_slice(&'a self) -> &'a str 
as_slice			    fn as_slice<'a>(&'a self) -> &'a [T] 
clone			    fn clone(&self) -> MaybeOwnedVector<'a, T> 
cmp			    fn cmp(&self, other: &MaybeOwnedVector<T>) -> Ordering 
container_as_bytes			    fn container_as_bytes<'a>(&'a self) -> &'a [u8] 
default			    fn default() -> MaybeOwnedVector<'a, T> 
edge_label			        fn edge_label(&'a self, e: & &'a Edge) -> LabelText<'a> 
edge_label			    fn edge_label(&'a self, e: &E) -> LabelText<'a> 
edge_label			    fn edge_label<'a>(&'a self, _: &Ed) -> dot::LabelText<'a> 
edge_label			    fn edge_label<'a>(&'a self, _: &Ed<'a>) -> dot::LabelText<'a> 
edges			        fn edges(&'a self) -> Edges<'a,&'a Edge> 
edges			    fn edges(&'a self) -> Edges<'a, E>;
edges			    fn edges(&'a self) -> dot::Edges<'a,Ed<'a>> { self.edges.iter().collect() }
edges			    fn edges(&'a self) -> dot::Edges<'a,Ed<'a>> 
edges			    fn edges(&'a self) -> dot::Edges<'a,Ed> 
empty_graph			    fn empty_graph() 
eq			    fn eq(&self, other: &MaybeOwnedVector<T>) -> bool 
equiv			    fn equiv(&self, other: &V) -> bool 
escape			    pub fn escape(&self) -> String 
escape_char			    fn escape_char(c: char, f: |char|) 
escape_str			    fn escape_str(s: &str) -> String 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
from_iter			    fn from_iter<I:Iterator<T>>(iterator: I) -> MaybeOwnedVector<T> 
graph_id			        fn graph_id(&'a self) -> Id<'a> { self.graph.graph_id() }
graph_id			        fn graph_id(&'a self) -> Id<'a> 
graph_id			    fn graph_id(&'a self) -> Id<'a>;
graph_id			    fn graph_id(&'a self) -> dot::Id<'a> { dot::Id::new("example1") }
graph_id			    fn graph_id(&'a self) -> dot::Id<'a> { dot::Id::new("example2") }
graph_id			    fn graph_id(&'a self) -> dot::Id<'a> { dot::Id::new("example3") }
hasse_diagram			    fn hasse_diagram() 
id_name			    fn id_name<'a>(n: &Node) -> Id<'a> 
in_range			        fn in_range(low: char, c: char, high: char) -> bool 
indent			    fn indent<W:Writer>(w: &mut W) -> io::IoResult<()> 
into_maybe_owned			    fn into_maybe_owned(self) -> MaybeOwnedVector<'a,T> { Borrowed(self) }
into_maybe_owned			    fn into_maybe_owned(self) -> MaybeOwnedVector<'a,T> { Growable(self) }
into_maybe_owned			    fn into_maybe_owned(self) -> MaybeOwnedVector<'a,T>;
into_owned			    fn into_owned(self) -> Vec<T> 
into_vec			    pub fn into_vec(self) -> Vec<T> 
is_constituent			        fn is_constituent(c: char) -> bool 
is_letter_or_underscore			        fn is_letter_or_underscore(c: char) -> bool 
iter			    pub fn iter(&'a self) -> slice::Items<'a,T> 
left_aligned_text			    fn left_aligned_text() 
len			    fn len(&self) -> uint 
main			pub fn main() 
maybe_owned_vec			pub mod maybe_owned_vec;
name			    pub fn name(self) -> str::MaybeOwned<'a> 
new			        fn new(name: &'static str,
new			    pub fn new<Name:str::IntoMaybeOwned<'a>>(name: Name) -> Id<'a> 
node_id			        fn node_id(&'a self, n: &Node) -> Id<'a> { self.graph.node_id(n) }
node_id			        fn node_id(&'a self, n: &Node) -> Id<'a> 
node_id			    fn node_id(&'a self, n: &N) -> Id<'a>;
node_id			    fn node_id(&'a self, n: &Nd) -> dot::Id<'a> 
node_id			    fn node_id(&'a self, n: &Nd<'a>) -> dot::Id<'a> 
node_label			        fn node_label(&'a self, n: &Node) -> LabelText<'a> 
node_label			    fn node_label(&'a self, n: &N) -> LabelText<'a> 
node_label			    fn node_label<'a>(&'a self, n: &Nd) -> dot::LabelText<'a> 
node_label			    fn node_label<'a>(&'a self, n: &Nd<'a>) -> dot::LabelText<'a> 
nodes			        fn nodes(&'a self) -> Nodes<'a,Node> 
nodes			    fn nodes(&'a self) -> Nodes<'a, N>;
nodes			    fn nodes(&'a self) -> dot::Nodes<'a,Nd<'a>> 
nodes			    fn nodes(&self) -> dot::Nodes<'a,Nd> { range(0,self.nodes.len()).collect() }
nodes			    fn nodes(&self) -> dot::Nodes<'a,Nd> 
partial_cmp			    fn partial_cmp(&self, other: &MaybeOwnedVector<T>) -> Option<Ordering> 
render			pub fn render<'a, N, E, G:Labeller<'a,N,E>+GraphWalk<'a,N,E>, W:Writer>(
render_to			pub fn render_to<W:Writer>(output: &mut W) 
single_cyclic_node			    fn single_cyclic_node() 
single_edge			    fn single_edge() 
single_node			    fn single_node() 
source			        fn source(&'a self, edge: & &'a Edge) -> Node 
source			    fn source(&'a self, edge: &E) -> N;
source			    fn source(&self, e: &Ed) -> Nd { let & &(s,_) = e; s }
source			    fn source(&self, e: &Ed) -> Nd { let &(s,_) = e; s }
source			    fn source(&self, e: &Ed<'a>) -> Nd<'a> { let &(s,_) = e; s }
target			        fn target(&'a self, edge: & &'a Edge) -> Node 
target			    fn target(&'a self, edge: &E) -> N;
target			    fn target(&self, e: &Ed) -> Nd { let & &(_,t) = e; t }
target			    fn target(&self, e: &Ed) -> Nd { let &(_,t) = e; t }
target			    fn target(&self, e: &Ed<'a>) -> Nd<'a> { let &(_,t) = e; t }
tests			mod tests 
to_opt_strs			        fn to_opt_strs(self) -> Vec<Option<&'static str>> 
to_owned			    fn to_owned(&self) -> Vec<T> 
writeln			    fn writeln<W:Writer>(w: &mut W, arg: &[&str]) -> io::IoResult<()> 
