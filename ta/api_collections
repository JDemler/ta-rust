AbsIter			struct AbsIter<T> 
AbsTraversal			impl<K, V, E, Impl> AbsTraversal<Impl>
AbsTraversal			struct AbsTraversal<Impl> 
Add for String			impl<'a> Add<&'a str> for String 
Add for Vec			impl<'a, T: Clone> Add<&'a [T]> for Vec<T> 
AsRef			impl<T> AsRef<Vec<T>> for Vec<T> 
AsRef for Cow			impl<'a, T: ?Sized + ToOwned> AsRef<T> for Cow<'a, T> 
AsRef for String			impl AsRef<str> for String 
AsRef for Vec			impl<T> AsRef<[T]> for Vec<T> 
AsSlice for Vec			impl<T> AsSlice<T> for Vec<T> 
BTreeMap			impl<K, V> BTreeMap<K, V> 
BTreeMap			impl<K: Ord, V> BTreeMap<K, V> 
BTreeMap			pub struct BTreeMap<K, V> 
BTreeSet			impl<T: Ord> BTreeSet<T> 
BTreeSet			impl<T> BTreeSet<T> 
BTreeSet			pub struct BTreeSet<T>
BinaryHeap			impl<T: Ord> BinaryHeap<T> 
BinaryHeap			pub struct BinaryHeap<T> 
BitAnd			impl<'a, 'b, T: Ord + Clone> BitAnd<&'b BTreeSet<T>> for &'a BTreeSet<T> 
BitAnd for EnumSet			impl<E:CLike> BitAnd for EnumSet<E> 
BitOr			impl<'a, 'b, T: Ord + Clone> BitOr<&'b BTreeSet<T>> for &'a BTreeSet<T> 
BitOr for EnumSet			impl<E:CLike> BitOr for EnumSet<E> 
BitSet			impl BitSet 
BitSet			pub struct BitSet 
BitVec			impl BitVec 
BitVec			pub struct BitVec 
BitXor			impl<'a, 'b, T: Ord + Clone> BitXor<&'b BTreeSet<T>> for &'a BTreeSet<T> 
BitXor for EnumSet			impl<E:CLike> BitXor for EnumSet<E> 
Borrow			impl<'a, T: ?Sized> Borrow<T> for &'a T 
Borrow			impl<'a, T: ?Sized> Borrow<T> for &'a mut T 
Borrow			pub trait Borrow<Borrowed: ?Sized> 
Borrow for Cow			impl<'a, B: ?Sized> Borrow<B> for Cow<'a, B> where B: ToOwned, <B as ToOwned>::Owned: 'a 
Borrow for String			impl Borrow<str> for String 
Borrow for T			impl<T: ?Sized> Borrow<T> for T 
Borrow for Vec			impl<T> Borrow<[T]> for Vec<T> 
Borrow for arc			impl<T> Borrow<T> for arc::Arc<T> 
Borrow for rc			impl<T> Borrow<T> for rc::Rc<T> 
BorrowMut			impl<'a, T: ?Sized> BorrowMut<T> for &'a mut T 
BorrowMut			pub trait BorrowMut<Borrowed: ?Sized> : Borrow<Borrowed> 
BorrowMut for T			impl<T: ?Sized> BorrowMut<T> for T 
BorrowMut for Vec			impl<T> BorrowMut<[T]> for Vec<T> 
Bound			pub enum Bound<T> 
CLike			pub trait CLike 
Clone for BitVec			impl Clone for BitVec 
Clone for Cow			impl<'a, B: ?Sized> Clone for Cow<'a, B> where B: ToOwned 
Clone for Difference			impl<'a, T> Clone for Difference<'a, T> 
Clone for EnumSet			impl<E> Clone for EnumSet<E> 
Clone for Intersection			impl<'a, T> Clone for Intersection<'a, T> 
Clone for Iter			impl<'a, T> Clone for Iter<'a, T> 
Clone for Iter			impl<'a, K, V> Clone for Iter<'a, K, V> 
Clone for Iter			impl<'a, T> Clone for Iter<'a, T> 
Clone for Iter			impl<E> Clone for Iter<E> 
Clone for Iter			impl<'a, T> Clone for Iter<'a, T> 
Clone for Iter			impl<'a, T> Clone for Iter<'a, T> 
Clone for Iter			impl<'a, V> Clone for Iter<'a, V> 
Clone for Keys			impl<'a, K, V> Clone for Keys<'a, K, V> 
Clone for Keys			impl<'a, V> Clone for Keys<'a, V> 
Clone for LinkedList			impl<A: Clone> Clone for LinkedList<A> 
Clone for Node			impl<K: Clone, V: Clone> Clone for Node<K, V> 
Clone for Range			impl<'a, K, V> Clone for Range<'a, K, V> 
Clone for Range			impl<'a, T> Clone for Range<'a, T> 
Clone for Rawlink			impl<T> Clone for Rawlink<T> 
Clone for SymmetricDifference			impl<'a, T> Clone for SymmetricDifference<'a, T> 
Clone for Union			impl<'a, T> Clone for Union<'a, T> 
Clone for Values			impl<'a, K, V> Clone for Values<'a, K, V> 
Clone for Values			impl<'a, V> Clone for Values<'a, V> 
Clone for Vec			impl<T:Clone> Clone for Vec<T> 
Clone for VecDeque			impl<T: Clone> Clone for VecDeque<T> 
Clone for VecMap			impl<V:Clone> Clone for VecMap<V> 
Continuation			enum Continuation<A, B> 
Copy for EnumSet			impl<E> Copy for EnumSet<E> {}
Copy for Rawlink			impl<T> Copy for Rawlink<T> {}
Cow			impl<'a, B: ?Sized> Cow<'a, B> where B: ToOwned 
Cow			pub enum Cow<'a, B: ?Sized + 'a> where B: ToOwned 
Debug for BTreeMap			impl<K: Debug, V: Debug> Debug for BTreeMap<K, V> 
Debug for BTreeSet			impl<T: Debug> Debug for BTreeSet<T> 
DecompositionType			enum DecompositionType 
Decompositions			pub struct Decompositions<'a> 
Default for BTreeMap			impl<K: Ord, V> Default for BTreeMap<K, V> 
Default for BTreeSet			impl<T: Ord> Default for BTreeSet<T> 
Default for BinaryHeap			impl<T: Ord> Default for BinaryHeap<T> 
Default for BitSet			impl Default for BitSet 
Default for BitVec			impl Default for BitVec 
Default for LinkedList			impl<T> Default for LinkedList<T> 
Default for String			impl Default for String 
Default for Vec			impl<T> Default for Vec<T> 
Default for VecDeque			impl<T> Default for VecDeque<T> 
Default for VecMap			impl<V> Default for VecMap<V> 
Deref for Cow			impl<'a, B: ?Sized> Deref for Cow<'a, B> where B: ToOwned 
Deref for DerefString			impl<'a> Deref for DerefString<'a> 
Deref for DerefVec			impl<'a, T> Deref for DerefVec<'a, T> 
Deref for IdRef			    impl<'id, T> Deref for IdRef<'id, T> 
DerefMut for IdRef			    impl<'id, T> DerefMut for IdRef<'id, T> 
DerefString			pub struct DerefString<'a> 
DerefVec			pub struct DerefVec<'a, T:'a> 
Difference			pub struct Difference<'a>(TwoBitPositions<'a>);
Difference			pub struct Difference<'a, T:'a> 
Direction			enum Direction { Pos, Neg }
DoubleEndedIterator			        impl<'a, V> DoubleEndedIterator for 
DoubleEndedIterator for AbsIter			impl<K, V, E, T> DoubleEndedIterator for AbsIter<T> where
DoubleEndedIterator for AbsTraversal			impl<K, V, E, Impl> DoubleEndedIterator for AbsTraversal<Impl>
DoubleEndedIterator for Drain			impl<'a, T: 'a> DoubleEndedIterator for Drain<'a, T> 
DoubleEndedIterator for Drain			impl<'a, T> DoubleEndedIterator for Drain<'a, T> 
DoubleEndedIterator for Drain			impl<'a, T: 'a> DoubleEndedIterator for Drain<'a, T> 
DoubleEndedIterator for Drain			impl<'a, V> DoubleEndedIterator for Drain<'a, V> 
DoubleEndedIterator for IntoIter			impl<T> DoubleEndedIterator for IntoIter<T> 
DoubleEndedIterator for IntoIter			impl<K, V> DoubleEndedIterator for IntoIter<K, V> 
DoubleEndedIterator for IntoIter			impl<T> DoubleEndedIterator for IntoIter<T> 
DoubleEndedIterator for IntoIter			impl<A> DoubleEndedIterator for IntoIter<A> 
DoubleEndedIterator for IntoIter			impl<T> DoubleEndedIterator for IntoIter<T> 
DoubleEndedIterator for IntoIter			impl<T> DoubleEndedIterator for IntoIter<T> 
DoubleEndedIterator for IntoIter			impl<V> DoubleEndedIterator for IntoIter<V> 
DoubleEndedIterator for Iter			impl<'a, T> DoubleEndedIterator for Iter<'a, T> 
DoubleEndedIterator for Iter			impl<'a> DoubleEndedIterator for Iter<'a> 
DoubleEndedIterator for Iter			impl<'a, K, V> DoubleEndedIterator for Iter<'a, K, V> 
DoubleEndedIterator for Iter			impl<'a, T> DoubleEndedIterator for Iter<'a, T> 
DoubleEndedIterator for Iter			impl<'a, A> DoubleEndedIterator for Iter<'a, A> 
DoubleEndedIterator for Iter			impl<'a, T> DoubleEndedIterator for Iter<'a, T> 
DoubleEndedIterator for IterMut			impl<'a, K, V> DoubleEndedIterator for IterMut<'a, K, V> 
DoubleEndedIterator for IterMut			impl<'a, A> DoubleEndedIterator for IterMut<'a, A> 
DoubleEndedIterator for IterMut			impl<'a, T> DoubleEndedIterator for IterMut<'a, T> 
DoubleEndedIterator for Keys			impl<'a, K, V> DoubleEndedIterator for Keys<'a, K, V> 
DoubleEndedIterator for Keys			impl<'a, V> DoubleEndedIterator for Keys<'a, V> 
DoubleEndedIterator for Range			impl<'a, K, V> DoubleEndedIterator for Range<'a, K, V> 
DoubleEndedIterator for Range			impl<'a, T> DoubleEndedIterator for Range<'a, T> 
DoubleEndedIterator for RangeMut			impl<'a, K, V> DoubleEndedIterator for RangeMut<'a, K, V> 
DoubleEndedIterator for RawItems			impl<T> DoubleEndedIterator for RawItems<T> 
DoubleEndedIterator for Values			impl<'a, K, V> DoubleEndedIterator for Values<'a, K, V> 
DoubleEndedIterator for Values			impl<'a, V> DoubleEndedIterator for Values<'a, V> 
Drain			pub struct Drain<'a, T: 'a> 
Drain			pub struct Drain<'a, T:'a> 
Drain			pub struct Drain<'a, T: 'a> 
Drain			pub struct Drain<'a, V:'a> 
Drop for DerefVec			impl<'a, T> Drop for DerefVec<'a, T> 
Drop for Drain			impl<'a, T> Drop for Drain<'a, T> 
Drop for Drain			impl<'a, T: 'a> Drop for Drain<'a, T> 
Drop for IntoIter			impl<T> Drop for IntoIter<T> 
Drop for LinkedList			impl<T> Drop for LinkedList<T> 
Drop for MoveTraversalImpl			impl<K, V> Drop for MoveTraversalImpl<K, V> 
Drop for Node			impl<K, V> Drop for Node<K, V> 
Drop for PartialVecNonZeroSized			impl<T,U> Drop for PartialVecNonZeroSized<T,U> 
Drop for PartialVecZeroSized			impl<T,U> Drop for PartialVecZeroSized<T,U> 
Drop for RawItems			impl<T> Drop for RawItems<T> 
Drop for Vec			impl<T> Drop for Vec<T> 
Drop for VecDeque			impl<T> Drop for VecDeque<T> 
Edge			    pub enum Edge {}
ElementSwaps			impl ElementSwaps 
ElementSwaps			pub struct ElementSwaps 
ElemsAndEdges			struct ElemsAndEdges<Elems, Edges>(Elems, Edges);
Entry			impl<'a, K: Ord, V> Entry<'a, K, V> 
Entry			pub enum Entry<'a, K:'a, V:'a> 
Entry			impl<'a, V> Entry<'a, V> 
Entry			pub enum Entry<'a, V:'a> 
EnumSet			impl<E:CLike> EnumSet<E> 
EnumSet			pub struct EnumSet<E> 
Eq for BTreeMap			impl<K: Eq, V: Eq> Eq for BTreeMap<K, V> {}
Eq for Cow			impl<'a, B: ?Sized> Eq for Cow<'a, B> where B: Eq + ToOwned {}
Eq for LinkedList			impl<A: Eq> Eq for LinkedList<A> {}
Eq for Vec			impl<T: Eq> Eq for Vec<T> {}
Eq for VecDeque			impl<A: Eq> Eq for VecDeque<A> {}
Eq for VecMap			impl<V: Eq> Eq for VecMap<V> {}
ExactSizeIterator for Drain			impl<'a, T: 'a> ExactSizeIterator for Drain<'a, T> {}
ExactSizeIterator for Drain			impl<'a, T> ExactSizeIterator for Drain<'a, T> {}
ExactSizeIterator for Drain			impl<'a, T: 'a> ExactSizeIterator for Drain<'a, T> {}
ExactSizeIterator for IntoIter			impl<T> ExactSizeIterator for IntoIter<T> {}
ExactSizeIterator for IntoIter			impl<K, V> ExactSizeIterator for IntoIter<K, V> {}
ExactSizeIterator for IntoIter			impl<T> ExactSizeIterator for IntoIter<T> {}
ExactSizeIterator for IntoIter			impl<A> ExactSizeIterator for IntoIter<A> {}
ExactSizeIterator for IntoIter			impl<T> ExactSizeIterator for IntoIter<T> {}
ExactSizeIterator for IntoIter			impl<T> ExactSizeIterator for IntoIter<T> {}
ExactSizeIterator for Iter			impl<'a, T> ExactSizeIterator for Iter<'a, T> {}
ExactSizeIterator for Iter			impl<'a> ExactSizeIterator for Iter<'a> {}
ExactSizeIterator for Iter			impl<'a, K, V> ExactSizeIterator for Iter<'a, K, V> {}
ExactSizeIterator for Iter			impl<'a, T> ExactSizeIterator for Iter<'a, T> {}
ExactSizeIterator for Iter			impl<'a, A> ExactSizeIterator for Iter<'a, A> {}
ExactSizeIterator for Iter			impl<'a, T> ExactSizeIterator for Iter<'a, T> {}
ExactSizeIterator for IterMut			impl<'a, K, V> ExactSizeIterator for IterMut<'a, K, V> {}
ExactSizeIterator for IterMut			impl<'a, A> ExactSizeIterator for IterMut<'a, A> {}
ExactSizeIterator for IterMut			impl<'a, T> ExactSizeIterator for IterMut<'a, T> {}
ExactSizeIterator for Keys			impl<'a, K, V> ExactSizeIterator for Keys<'a, K, V> {}
ExactSizeIterator for Values			impl<'a, K, V> ExactSizeIterator for Values<'a, K, V> {}
Extend for BTreeMap			impl<K: Ord, V> Extend<(K, V)> for BTreeMap<K, V> 
Extend for BTreeSet			impl<T: Ord> Extend<T> for BTreeSet<T> 
Extend for BinaryHeap			impl<T: Ord> Extend<T> for BinaryHeap<T> 
Extend for BitSet			impl Extend<usize> for BitSet 
Extend for BitVec			impl Extend<bool> for BitVec 
Extend for EnumSet			impl<E:CLike> Extend<E> for EnumSet<E> 
Extend for LinkedList			impl<A> Extend<A> for LinkedList<A> 
Extend for String			impl Extend<char> for String 
Extend for String			impl<'a> Extend<&'a str> for String 
Extend for Vec			impl<T> Extend<T> for Vec<T> 
Extend for VecDeque			impl<A> Extend<A> for VecDeque<A> 
Extend for VecMap			impl<V> Extend<(usize, V)> for VecMap<V> 
ForceResult			pub enum ForceResult<NodeRef, Type> 
From for Cow			impl<'a> From<&'a str> for Cow<'a, str> 
From for Cow			impl<'a> From<String> for Cow<'a, str> 
From for String			impl<'a> From<&'a str> for String 
From for Vec			impl<'a, T: Clone> From<&'a [T]> for Vec<T> 
From for Vec			impl<'a> From<&'a str> for Vec<u8> 
FromIterator for BTreeMap			impl<K: Ord, V> FromIterator<(K, V)> for BTreeMap<K, V> 
FromIterator for BTreeSet			impl<T: Ord> FromIterator<T> for BTreeSet<T> 
FromIterator for BinaryHeap			impl<T: Ord> FromIterator<T> for BinaryHeap<T> 
FromIterator for BitSet			impl FromIterator<usize> for BitSet 
FromIterator for BitVec			impl FromIterator<bool> for BitVec 
FromIterator for Cow			impl<'a, T> FromIterator<T> for Cow<'a, [T]> where T: Clone 
FromIterator for EnumSet			impl<E:CLike> FromIterator<E> for EnumSet<E> 
FromIterator for LinkedList			impl<A> FromIterator<A> for LinkedList<A> 
FromIterator for String			impl FromIterator<char> for String 
FromIterator for String			impl<'a> FromIterator<&'a str> for String 
FromIterator for Vec			impl<T> FromIterator<T> for Vec<T> 
FromIterator for VecDeque			impl<A> FromIterator<A> for VecDeque<A> 
FromIterator for VecMap			impl<V> FromIterator<(usize, V)> for VecMap<V> 
FromStr for String			impl FromStr for String 
FromUtf16Error			pub struct FromUtf16Error(());
FromUtf8Error			impl FromUtf8Error 
FromUtf8Error			pub struct FromUtf8Error 
Handle			impl<'a, K: 'a, V: 'a, NodeRef, NodeType> Handle<NodeRef, handle::KV, NodeType> where
Handle			impl<'a, K: 'a, V: 'a, NodeType> Handle<&'a Node<K, V>, handle::KV, NodeType> 
Handle			impl<'a, K: 'a, V: 'a, NodeType> Handle<&'a mut Node<K, V>, handle::KV, NodeType> 
Handle			impl<'a, K: 'a, V: 'a> Handle<&'a Node<K, V>, handle::Edge, handle::Internal> 
Handle			impl<'a, K: 'a, V: 'a> Handle<&'a mut Node<K, V>, handle::Edge, handle::Internal> 
Handle			impl<K, V, NodeRef, NodeType> Handle<NodeRef, handle::Edge, NodeType> where
Handle			impl<K, V, NodeRef, NodeType> Handle<NodeRef, handle::KV, NodeType> where
Handle			impl<K, V, NodeRef, Type, NodeType> Handle<NodeRef, Type, NodeType> where
Handle			impl<K, V, NodeRef> Handle<NodeRef, handle::Edge, handle::Internal> where
Handle			impl<K, V, NodeRef> Handle<NodeRef, handle::Edge, handle::Leaf> where
Handle			impl<K, V, NodeRef> Handle<NodeRef, handle::KV, handle::Internal> where
Handle			impl<K, V, NodeRef> Handle<NodeRef, handle::KV, handle::Leaf> where
Handle			impl<K, V, Type, NodeType> Handle<*mut Node<K, V>, Type, NodeType> 
Handle			pub struct Handle<NodeRef, Type, NodeType> 
Hash for BTreeMap			impl<K: Hash, V: Hash> Hash for BTreeMap<K, V> 
Hash for Cow			impl<'a, B: ?Sized> Hash for Cow<'a, B> where B: Hash + ToOwned
Hash for LinkedList			impl<A: Hash> Hash for LinkedList<A> 
Hash for Vec			impl<T: Hash> Hash for Vec<T> 
Hash for VecDeque			impl<A: Hash> Hash for VecDeque<A> 
Hash for VecMap			impl<V: Hash> Hash for VecMap<V> 
IdRef			    pub struct IdRef<'id, T: 'id> 
Index for BTreeMap			impl<'a, K: Ord, Q: ?Sized, V> Index<&'a Q> for BTreeMap<K, V>
Index for BitVec			impl Index<usize> for BitVec 
Index for Vec			impl<T> Index<usize> for Vec<T> 
Index for VecDeque			impl<A> Index<usize> for VecDeque<A> 
Index for VecMap			impl<'a,V> Index<&'a usize> for VecMap<V> 
Index for VecMap			impl<V> Index<usize> for VecMap<V> 
IndexMut for Vec			impl<T> IndexMut<usize> for Vec<T> 
IndexMut for VecDeque			impl<A> IndexMut<usize> for VecDeque<A> 
IndexMut for VecMap			impl<'a, V> IndexMut<&'a usize> for VecMap<V> 
IndexMut for VecMap			impl<V> IndexMut<usize> for VecMap<V> 
InsertionResult			pub enum InsertionResult<K, V> 
Internal			    pub enum Internal {}
Intersection			pub struct Intersection<'a>(Take<TwoBitPositions<'a>>);
Intersection			pub struct Intersection<'a, T:'a> 
Into			impl Into<Vec<u8>> for String 
IntoCow			pub trait IntoCow<'a, B: ?Sized> where B: ToOwned 
IntoCow			impl<'a> IntoCow<'a, str> for &'a str 
IntoCow			impl<'a, T> IntoCow<'a, [T]> for &'a [T] where T: Clone 
IntoCow for Cow			impl<'a,  B: ?Sized> IntoCow<'a, B> for Cow<'a, B> where B: ToOwned 
IntoCow for String			impl IntoCow<'static, str> for String 
IntoCow for Vec			impl<'a, T: 'a> IntoCow<'a, [T]> for Vec<T> where T: Clone 
IntoIter			pub struct IntoIter<T> 
IntoIter			pub struct IntoIter<K, V> 
IntoIter			pub struct IntoIter<T> 
IntoIter			pub struct IntoIter<T> 
IntoIter			impl<T> IntoIter<T> 
IntoIter			pub struct IntoIter<T> 
IntoIter			pub struct IntoIter<T> 
IntoIter			pub struct IntoIter<V> 
IntoIterator			impl<'a, T> IntoIterator for &'a BinaryHeap<T> where T: Ord 
IntoIterator			impl<'a> IntoIterator for &'a BitSet 
IntoIterator			impl<'a> IntoIterator for &'a BitVec 
IntoIterator			impl<'a, K, V> IntoIterator for &'a BTreeMap<K, V> 
IntoIterator			impl<'a, K, V> IntoIterator for &'a mut BTreeMap<K, V> 
IntoIterator			impl<'a, T> IntoIterator for &'a BTreeSet<T> 
IntoIterator			impl<'a, E> IntoIterator for &'a EnumSet<E> where E: CLike 
IntoIterator			impl<'a, T> IntoIterator for &'a LinkedList<T> 
IntoIterator			impl<'a, T> IntoIterator for &'a mut LinkedList<T> 
IntoIterator			impl<'a, T> IntoIterator for &'a Vec<T> 
IntoIterator			impl<'a, T> IntoIterator for &'a mut Vec<T> 
IntoIterator			impl<'a, T> IntoIterator for &'a VecDeque<T> 
IntoIterator			impl<'a, T> IntoIterator for &'a mut VecDeque<T> 
IntoIterator			impl<'a, T> IntoIterator for &'a VecMap<T> 
IntoIterator			impl<'a, T> IntoIterator for &'a mut VecMap<T> 
IntoIterator for BTreeMap			impl<K, V> IntoIterator for BTreeMap<K, V> 
IntoIterator for BTreeSet			impl<T> IntoIterator for BTreeSet<T> 
IntoIterator for BinaryHeap			impl<T: Ord> IntoIterator for BinaryHeap<T> 
IntoIterator for LinkedList			impl<T> IntoIterator for LinkedList<T> 
IntoIterator for Vec			impl<T> IntoIterator for Vec<T> 
IntoIterator for VecDeque			impl<T> IntoIterator for VecDeque<T> 
IntoIterator for VecMap			impl<T> IntoIterator for VecMap<T> 
InvariantLifetime			    impl<'id> InvariantLifetime<'id> 
InvariantLifetime			    struct InvariantLifetime<'id>(
Iter			pub struct Iter <'a, T: 'a> 
Iter			pub struct Iter<'a> 
Iter			pub struct Iter<'a, K: 'a, V: 'a> 
Iter			pub struct Iter<'a, T: 'a> 
Iter			impl<E:CLike> Iter<E> 
Iter			pub struct Iter<E> 
Iter			pub struct Iter<'a, T:'a> 
Iter			pub struct Iter<'a, T:'a> 
Iter			pub struct Iter<'a, V:'a> 
IterMut			pub struct IterMut<'a, K: 'a, V: 'a> 
IterMut			impl<'a, A> IterMut<'a, A> 
IterMut			pub struct IterMut<'a, T:'a> 
IterMut			pub struct IterMut<'a, T:'a> 
IterMut			pub struct IterMut<'a, V:'a> 
Iterator			        impl<'a, V> Iterator for 
Iterator for AbsIter			impl<K, V, E, T> Iterator for AbsIter<T> where
Iterator for AbsTraversal			impl<K, V, E, Impl> Iterator for AbsTraversal<Impl>
Iterator for Decompositions			impl<'a> Iterator for Decompositions<'a> 
Iterator for Difference			impl<'a> Iterator for Difference<'a> 
Iterator for Difference			impl<'a, T: Ord> Iterator for Difference<'a, T> 
Iterator for Drain			impl<'a, T: 'a> Iterator for Drain<'a, T> 
Iterator for Drain			impl<'a, T> Iterator for Drain<'a, T> 
Iterator for Drain			impl<'a, T: 'a> Iterator for Drain<'a, T> 
Iterator for Drain			impl<'a, V> Iterator for Drain<'a, V> 
Iterator for ElementSwaps			impl Iterator for ElementSwaps 
Iterator for Intersection			impl<'a> Iterator for Intersection<'a> 
Iterator for Intersection			impl<'a, T: Ord> Iterator for Intersection<'a, T> 
Iterator for IntoIter			impl<T> Iterator for IntoIter<T> 
Iterator for IntoIter			impl<K, V> Iterator for IntoIter<K, V> 
Iterator for IntoIter			impl<T> Iterator for IntoIter<T> 
Iterator for IntoIter			impl<A> Iterator for IntoIter<A> 
Iterator for IntoIter			impl<T> Iterator for IntoIter<T> 
Iterator for IntoIter			impl<T> Iterator for IntoIter<T> 
Iterator for IntoIter			impl<V> Iterator for IntoIter<V> 
Iterator for Iter			impl<'a, T> Iterator for Iter<'a, T> 
Iterator for Iter			impl<'a> Iterator for Iter<'a> 
Iterator for Iter			impl<'a, K, V> Iterator for Iter<'a, K, V> 
Iterator for Iter			impl<'a, T> Iterator for Iter<'a, T> 
Iterator for Iter			impl<E:CLike> Iterator for Iter<E> 
Iterator for Iter			impl<'a, A> Iterator for Iter<'a, A> 
Iterator for Iter			impl<'a, T> Iterator for Iter<'a, T> 
Iterator for IterMut			impl<'a, K, V> Iterator for IterMut<'a, K, V> 
Iterator for IterMut			impl<'a, A> Iterator for IterMut<'a, A> 
Iterator for IterMut			impl<'a, T> Iterator for IterMut<'a, T> 
Iterator for Keys			impl<'a, K, V> Iterator for Keys<'a, K, V> 
Iterator for Keys			impl<'a, V> Iterator for Keys<'a, V> 
Iterator for Permutations			impl<T: Clone> Iterator for Permutations<T> 
Iterator for Range			impl<'a, K, V> Iterator for Range<'a, K, V> 
Iterator for Range			impl<'a, T> Iterator for Range<'a, T> 
Iterator for RangeMut			impl<'a, K, V> Iterator for RangeMut<'a, K, V> 
Iterator for RawItems			impl<T> Iterator for RawItems<T> 
Iterator for Recompositions			impl<'a> Iterator for Recompositions<'a> 
Iterator for SetIter			impl<'a> Iterator for SetIter<'a> 
Iterator for SymmetricDifference			impl<'a> Iterator for SymmetricDifference<'a> 
Iterator for SymmetricDifference			impl<'a, T: Ord> Iterator for SymmetricDifference<'a, T> 
Iterator for TwoBitPositions			impl<'a> Iterator for TwoBitPositions<'a> 
Iterator for Union			impl<'a> Iterator for Union<'a> 
Iterator for Union			impl<'a, T: Ord> Iterator for Union<'a, T> 
Iterator for Utf16Units			impl<'a> Iterator for Utf16Units<'a> 
Iterator for Values			impl<'a, K, V> Iterator for Values<'a, K, V> 
Iterator for Values			impl<'a, V> Iterator for Values<'a, V> 
KV			    pub enum KV {}
Keys			pub struct Keys<'a, K: 'a, V: 'a> 
Keys			pub struct Keys<'a, V: 'a> 
Leaf			    pub enum Leaf {}
LeafOrInternal			    pub enum LeafOrInternal {}
LinkedList			impl<T> LinkedList<T> 
LinkedList			pub struct LinkedList<T> 
MoveTraversalImpl			struct MoveTraversalImpl<K, V> 
MutNodeSlice			struct MutNodeSlice<'a, K: 'a, V: 'a> 
Node			impl <K, V> Node<K, V> 
Node			impl<K, V> Node<K, V> 
Node			impl<K: Ord, V> Node<K, V> 
Node			pub struct Node<K, V> 
Node			impl<T> Node<T> 
Node			struct Node<T> 
NodeSlice			struct NodeSlice<'a, K: 'a, V: 'a> 
OccupiedEntry			impl<'a, K: Ord, V> OccupiedEntry<'a, K, V> 
OccupiedEntry			pub struct OccupiedEntry<'a, K:'a, V:'a> 
OccupiedEntry			impl<'a, V> OccupiedEntry<'a, V> 
OccupiedEntry			pub struct OccupiedEntry<'a, V:'a> 
Ord for BTreeMap			impl<K: Ord, V: Ord> Ord for BTreeMap<K, V> 
Ord for BitSet			impl Ord for BitSet 
Ord for BitVec			impl Ord for BitVec 
Ord for Cow			impl<'a, B: ?Sized> Ord for Cow<'a, B> where B: Ord + ToOwned 
Ord for LinkedList			impl<A: Ord> Ord for LinkedList<A> 
Ord for Vec			impl<T: Ord> Ord for Vec<T> 
Ord for VecDeque			impl<A: Ord> Ord for VecDeque<A> 
Ord for VecMap			impl<V: Ord> Ord for VecMap<V> 
PartialEq			impl<'a, 'b, B: ?Sized, C: ?Sized> PartialEq<Cow<'b, C>> for Cow<'a, B> where
PartialEq			        impl<'a> PartialEq<
PartialEq			        impl<'a> PartialEq<
PartialEq			impl<'a, 'b> PartialEq<Cow<'a, str>> for &'b str 
PartialEq for BTreeMap			impl<K: PartialEq, V: PartialEq> PartialEq for BTreeMap<K, V> 
PartialEq for Cow			impl<'a, 'b> PartialEq<&'b str> for Cow<'a, str> 
PartialEq for LinkedList			impl<A: PartialEq> PartialEq for LinkedList<A> 
PartialEq for String			impl PartialEq for String 
PartialEq for VecDeque			impl<A: PartialEq> PartialEq for VecDeque<A> 
PartialEq for VecMap			impl<V: PartialEq> PartialEq for VecMap<V> 
PartialOrd for BTreeMap			impl<K: PartialOrd, V: PartialOrd> PartialOrd for BTreeMap<K, V> 
PartialOrd for BitSet			impl PartialOrd for BitSet 
PartialOrd for BitVec			impl PartialOrd for BitVec 
PartialOrd for Cow			impl<'a, B: ?Sized> PartialOrd for Cow<'a, B> where B: PartialOrd + ToOwned,
PartialOrd for LinkedList			impl<A: PartialOrd> PartialOrd for LinkedList<A> 
PartialOrd for Vec			impl<T: PartialOrd> PartialOrd for Vec<T> 
PartialOrd for VecDeque			impl<A: PartialOrd> PartialOrd for VecDeque<A> 
PartialOrd for VecMap			impl<V: PartialOrd> PartialOrd for VecMap<V> 
PartialSearchStack			    impl<'a, K, V> PartialSearchStack<'a, K, V> 
PartialSearchStack			    pub struct PartialSearchStack<'a, K:'a, V:'a> 
PartialVecNonZeroSized			struct PartialVecNonZeroSized<T,U> 
PartialVecZeroSized			struct PartialVecZeroSized<T,U> 
Pattern			impl<'a, 'b> Pattern<'a> for &'b String 
Permutations			pub struct Permutations<T> 
Pusher			    impl<'id, 'a, K, V> Pusher<'id, 'a, K, V> 
Pusher			    pub struct Pusher<'id, 'a, K:'a, V:'a> 
RandomAccessIterator for Iter			impl<'a> RandomAccessIterator for Iter<'a> 
RandomAccessIterator for Iter			impl<'a, T> RandomAccessIterator for Iter<'a, T> 
Range			pub struct Range<'a, K: 'a, V: 'a> 
Range			pub struct Range<'a, T: 'a> 
RangeMut			pub struct RangeMut<'a, K: 'a, V: 'a> 
RawItems			impl<T> RawItems<T> 
RawItems			struct RawItems<T> 
Rawlink			impl<T> Rawlink<T> 
Rawlink			struct Rawlink<T> 
RecompositionState			enum RecompositionState 
Recompositions			pub struct Recompositions<'a> 
SearchResult			pub enum SearchResult<NodeRef> 
SearchStack			    impl<'a, K, V, NodeType> SearchStack<'a, K, V, handle::KV, NodeType> 
SearchStack			    impl<'a, K, V> SearchStack<'a, K, V, handle::Edge, handle::Leaf> 
SearchStack			    impl<'a, K, V> SearchStack<'a, K, V, handle::KV, handle::Leaf> 
SearchStack			    impl<'a, K, V> SearchStack<'a, K, V, handle::KV, handle::LeafOrInternal> 
SearchStack			    pub struct SearchStack<'a, K:'a, V:'a, Type, NodeType> 
SetIter			pub struct SetIter<'a> 
SizeDirection			struct SizeDirection 
SliceConcatExt			pub trait SliceConcatExt<T: ?Sized, U> 
StackOp			enum StackOp<T> 
Str for Cow			impl<'a> Str for Cow<'a, str> 
Str for String			impl Str for String 
String			impl String 
String			pub struct String 
Sub			impl<'a, 'b, T: Ord + Clone> Sub<&'b BTreeSet<T>> for &'a BTreeSet<T> 
Sub for EnumSet			impl<E:CLike> Sub for EnumSet<E> 
SymmetricDifference			pub struct SymmetricDifference<'a>(TwoBitPositions<'a>);
SymmetricDifference			pub struct SymmetricDifference<'a, T:'a> 
ToOwned			pub trait ToOwned 
ToOwned			impl<T: Clone> ToOwned for [T] 
ToOwned for T			impl<T> ToOwned for T where T: Clone 
ToOwned for str			impl ToOwned for str 
ToString			pub trait ToString 
ToString for T			impl<T: fmt::Display + ?Sized> ToString for T 
TraversalImpl			trait TraversalImpl 
TraversalImpl for MoveTraversalImpl			impl<K, V> TraversalImpl for MoveTraversalImpl<K, V> 
TraversalItem			pub enum TraversalItem<K, V, E> 
Traverse			impl<'a, K, V> Traverse<&'a Node<K, V>> for Traversal<'a, K, V> 
Traverse			impl<'a, K, V> Traverse<&'a mut Node<K, V>> for MutTraversal<'a, K, V> 
Traverse			impl<K, V> Traverse<Node<K, V>> for MoveTraversal<K, V> 
Traverse			trait Traverse<N> 
TwoBitPositions			struct TwoBitPositions<'a> 
Union			pub struct Union<'a>(TwoBitPositions<'a>);
Union			pub struct Union<'a, T:'a> 
Utf16Units			pub struct Utf16Units<'a> 
VacantEntry			impl<'a, K: Ord, V> VacantEntry<'a, K, V> 
VacantEntry			pub struct VacantEntry<'a, K:'a, V:'a> 
VacantEntry			impl<'a, V> VacantEntry<'a, V> 
VacantEntry			pub struct VacantEntry<'a, V:'a> 
Values			pub struct Values<'a, K: 'a, V: 'a> 
Values			pub struct Values<'a, V: 'a> 
Vec			impl<T: Clone> Vec<T> 
Vec			impl<T: PartialEq> Vec<T> 
Vec			impl<T> Vec<T> 
Vec			pub struct Vec<T> 
VecDeque			impl<T: Clone> VecDeque<T> 
VecDeque			impl<T> VecDeque<T> 
VecDeque			pub struct VecDeque<T> 
VecMap			impl<V> VecMap<V> 
VecMap			pub struct VecMap<V> 
absorb			    fn absorb(&mut self, key: K, val: V, mut right: Node<K, V>) 
add			    fn add(mut self, other: &str) -> String 
add			    fn add(mut self, rhs: &[T]) -> Vec<T> 
all			    pub fn all(&self) -> bool 
alloc_or_realloc			unsafe fn alloc_or_realloc<T>(ptr: *mut T, old_size: usize, size: usize) -> *mut T 
any			    pub fn any(&self) -> bool 
append			    pub fn append(&mut self, other: &mut LinkedList<T>) 
append			    pub fn append(&mut self, other: &mut Self) 
append			    pub fn append(&mut self, other: &mut Self) 
append			    pub fn append(&mut self, other: &mut Self) 
as_bytes			    pub fn as_bytes(&self) -> &[u8] 
as_bytes			    pub fn as_bytes(&self) -> &[u8] 
as_mut_ptr			    pub fn as_mut_ptr(&mut self) -> *mut T 
as_mut_slice			    pub fn as_mut_slice(&mut self) -> &mut [T] 
as_mut_slices			    pub fn as_mut_slices(&mut self) -> (&mut [T], &mut [T]) 
as_mut_vec			    pub unsafe fn as_mut_vec(&mut self) -> &mut Vec<u8> 
as_ptr			    pub fn as_ptr(&self) -> *const T 
as_ptr			    pub fn as_ptr(&self) -> *const u8 
as_raw			    pub fn as_raw(&mut self) -> Handle<*mut Node<K, V>, Type, NodeType> 
as_ref			    fn as_ref(&self) -> &T 
as_ref			    fn as_ref(&self) -> &str 
as_ref			    fn as_ref(&self) -> &Vec<T> 
as_ref			    fn as_ref(&self) -> &[T] 
as_slice			    fn as_slice(&self) -> &str 
as_slice			    fn as_slice<'b>(&'b self) -> &'b str 
as_slice			    fn as_slice(&self) -> &[T] 
as_slice			    pub fn as_slice(&self) -> &[T] 
as_slices			    pub fn as_slices<'a>(&'a self) -> (&'a [K], &'a [V]) 
as_slices			    pub fn as_slices(&self) -> (&[T], &[T]) 
as_slices_internal			    pub fn as_slices_internal<'b>(&'b self) -> NodeSlice<'b, K, V> 
as_slices_internal_mut			    pub fn as_slices_internal_mut<'b>(&'b mut self) -> MutNodeSlice<'b, K, V> 
as_slices_mut			    pub fn as_slices_mut<'a>(&'a mut self) -> (&'a mut [K], &'a mut [V]) 
as_str			    pub fn as_str(&self) -> &str 
as_string			pub fn as_string<'a>(x: &'a str) -> DerefString<'a> 
as_vec			pub fn as_vec<'a, T>(x: &'a [T]) -> DerefVec<'a, T> 
back			    pub fn back(&self) -> Option<&T> 
back			    pub fn back(&self) -> Option<&T> 
back_mut			    pub fn back_mut(&mut self) -> Option<&mut T> 
back_mut			    pub fn back_mut(&mut self) -> Option<&mut T> 
bench_pop_back_100			    fn bench_pop_back_100(b: &mut test::Bencher) 
bench_pop_front_100			    fn bench_pop_front_100(b: &mut test::Bencher) 
bench_push_back_100			    fn bench_push_back_100(b: &mut test::Bencher) 
bench_push_front_100			    fn bench_push_front_100(b: &mut test::Bencher) 
binary_heap			pub mod binary_heap;
binary_search			    pub fn binary_search(&self, x: &T) -> Result<usize, usize> where T: Ord 
binary_search_by			    pub fn binary_search_by<F>(&self, f: F) -> Result<usize, usize> where F: FnMut(&T) -> Ordering 
bit			        fn bit(bit_vec: &BitVec, byte: usize, bit: usize) -> u8 
bit			fn bit<E:CLike>(e: &E) -> usize 
bit			mod bit;
bit_set			pub mod bit_set 
bit_vec			pub mod bit_vec 
bitand			        fn bitand(w1: u32, w2: u32) -> u32 { w1 & w2 }
bitand			    fn bitand(self, rhs: &BTreeSet<T>) -> BTreeSet<T> 
bitand			    fn bitand(self, e: EnumSet<E>) -> EnumSet<E> 
bitor			    fn bitor(self, rhs: &BTreeSet<T>) -> BTreeSet<T> 
bitor			    fn bitor(self, e: EnumSet<E>) -> EnumSet<E> 
bitxor			        fn bitxor(w1: u32, w2: u32) -> u32 { w1 ^ w2 }
bitxor			    fn bitxor(self, rhs: &BTreeSet<T>) -> BTreeSet<T> 
bitxor			    fn bitxor(self, e: EnumSet<E>) -> EnumSet<E> 
blocks			    fn blocks(&self) -> Blocks 
blocks_for_bits			fn blocks_for_bits(bits: usize) -> usize 
blocks_mut			    fn blocks_mut(&mut self) -> MutBlocks 
borrow			    fn borrow(&self) -> &B 
borrow			    fn borrow(&self) -> &Borrowed;
borrow			    fn borrow(&self) -> &T { &**self }
borrow			    fn borrow(&self) -> &T { self }
borrow			pub mod borrow;
borrow			    fn borrow(&self) -> &[T] { &self[..] }
borrow			    fn borrow(&self) -> &str { &self[..] }
borrow_mut			    fn borrow_mut(&mut self) -> &mut Borrowed;
borrow_mut			    fn borrow_mut(&mut self) -> &mut T { &mut **self }
borrow_mut			    fn borrow_mut(&mut self) -> &mut T { self }
borrow_mut			    fn borrow_mut(&mut self) -> &mut [T] { &mut self[..] }
btree			mod btree;
btree_map			pub mod btree_map 
btree_set			pub mod btree_set 
buffer_as_mut_slice			    unsafe fn buffer_as_mut_slice(&mut self) -> &mut [T] 
buffer_as_slice			    unsafe fn buffer_as_slice(&self) -> &[T] 
buffer_read			    unsafe fn buffer_read(&mut self, off: usize) -> T 
buffer_write			    unsafe fn buffer_write(&mut self, off: usize, t: T) 
bytes			    pub fn bytes(&self) -> Bytes 
calculate_allocation			fn calculate_allocation(keys_size: usize, keys_align: usize,
calculate_allocation_generic			fn calculate_allocation_generic<K, V>(capacity: usize, is_leaf: bool) -> (usize, usize) 
calculate_offsets			fn calculate_offsets(keys_size: usize,
calculate_offsets_generic			fn calculate_offsets_generic<K, V>(capacity: usize, is_leaf: bool) -> (usize, usize) 
canonical_sort			fn canonical_sort(comb: &mut [(char, u8)]) 
capacity			    pub fn capacity(&self) -> usize { self.data.capacity() }
capacity			    pub fn capacity(&self) -> usize 
capacity			    pub fn capacity(&self) -> usize 
capacity			    pub fn capacity(&self) -> usize 
capacity			    pub fn capacity(&self) -> usize 
capacity			    pub fn capacity(&self) -> usize { self.cap - 1 }
capacity			    pub fn capacity(&self) -> usize 
capacity_from_b			fn capacity_from_b(b: usize) -> usize 
char_at			    pub fn char_at(&self, i: usize) -> char 
char_at_reverse			    pub fn char_at_reverse(&self, i: usize) -> char 
char_indices			    pub fn char_indices(&self) -> CharIndices 
char_range_at			    pub fn char_range_at(&self, start: usize) -> CharRange 
char_range_at_reverse			    pub fn char_range_at_reverse(&self, start: usize) -> CharRange 
chars			    pub fn chars(&self) -> Chars 
check_links			    pub fn check_links<T>(list: &LinkedList<T>) 
chunks			    pub fn chunks(&self, size: usize) -> Chunks<T> 
chunks_mut			    pub fn chunks_mut(&mut self, chunk_size: usize) -> ChunksMut<T> 
clear			    pub fn clear(&mut self) { self.drain(); }
clear			    pub fn clear(&mut self) 
clear			    pub fn clear(&mut self) 
clear			    pub fn clear(&mut self) 
clear			    pub fn clear(&mut self) 
clear			    pub fn clear(&mut self) 
clear			    pub fn clear(&mut self) 
clear			    pub fn clear(&mut self) 
clear			    pub fn clear(&mut self) 
clear			    pub fn clear(&mut self) { self.v.clear() }
clone			    fn clone(&self) -> Iter<'a, T> 
clone			    fn clone(&self) -> BitVec 
clone			    fn clone(&self) -> Cow<'a, B> 
clone			    fn clone(&self) -> Iter<'a, K, V> { Iter { inner: self.inner.clone() } }
clone			    fn clone(&self) -> Keys<'a, K, V> { Keys { inner: self.inner.clone() } }
clone			    fn clone(&self) -> Range<'a, K, V> { Range { inner: self.inner.clone() } }
clone			    fn clone(&self) -> Values<'a, K, V> { Values { inner: self.inner.clone() } }
clone			    fn clone(&self) -> Node<K, V> 
clone			    fn clone(&self) -> Difference<'a, T> 
clone			    fn clone(&self) -> Intersection<'a, T> 
clone			    fn clone(&self) -> Iter<'a, T> { Iter { iter: self.iter.clone() } }
clone			    fn clone(&self) -> Range<'a, T> { Range { iter: self.iter.clone() } }
clone			    fn clone(&self) -> SymmetricDifference<'a, T> 
clone			    fn clone(&self) -> Union<'a, T> 
clone			    fn clone(&self) -> EnumSet<E> { *self }
clone			    fn clone(&self) -> Iter<E> 
clone			    fn clone(&self) -> Iter<'a, T> 
clone			    fn clone(&self) -> LinkedList<A> 
clone			    fn clone(&self) -> Rawlink<T> 
clone			    fn clone(&self) -> Vec<T> { <[T]>::to_vec(&**self) }
clone			    fn clone(&self) -> Vec<T> 
clone			    fn clone(&self) -> Iter<'a, T> 
clone			    fn clone(&self) -> VecDeque<T> 
clone			    fn clone(&self) -> Iter<'a, V> 
clone			    fn clone(&self) -> Keys<'a, V> 
clone			    fn clone(&self) -> Values<'a, V> 
clone			    fn clone(&self) -> VecMap<V> 
clone_from			    fn clone_from(&mut self, source: &BitVec) 
clone_from			    fn clone_from(&mut self, other: &Vec<T>) 
clone_from			    fn clone_from(&mut self, source: &VecMap<V>) 
clone_from_slice			    pub fn clone_from_slice(&mut self, src: &[T]) -> usize where T: Clone 
cmp			    fn cmp(&self, other: &BitSet) -> Ordering 
cmp			    fn cmp(&self, other: &BitVec) -> Ordering 
cmp			    fn cmp(&self, other: &Cow<'a, B>) -> Ordering 
cmp			    fn cmp(&self, other: &BTreeMap<K, V>) -> Ordering 
cmp			    fn cmp(&self, other: &LinkedList<A>) -> Ordering 
cmp			    fn cmp(&self, other: &Vec<T>) -> Ordering 
cmp			    fn cmp(&self, other: &VecDeque<A>) -> Ordering 
cmp			    fn cmp(&self, other: &VecMap<V>) -> Ordering 
cmp::Eq for BitSet			impl cmp::Eq for BitSet {}
cmp::Eq for BitVec			impl cmp::Eq for BitVec {}
cmp::PartialEq for BitSet			impl cmp::PartialEq for BitSet 
cmp::PartialEq for BitVec			impl cmp::PartialEq for BitVec 
cmp_opt			fn cmp_opt<T: Ord>(x: Option<&T>, y: Option<&T>,
concat			    fn concat(&self) -> U;
concat			    fn concat(&self) -> Vec<T> 
concat			    fn concat(&self) -> String 
connect			    fn connect(&self, sep: &T) -> U;
connect			    fn connect(&self, sep: &T) -> Vec<T> 
connect			    fn connect(&self, sep: &str) -> String 
contains			    pub fn contains(&self, value: &usize) -> bool 
contains			    pub fn contains<Q: ?Sized>(&self, value: &Q) -> bool where T: Borrow<Q>, Q: Ord 
contains			    pub fn contains(&self, e: &E) -> bool 
contains			    pub fn contains(&self, x: &T) -> bool where T: PartialEq 
contains			    pub fn contains<'a, P: Pattern<'a>>(&'a self, pat: P) -> bool 
contains_key			    pub fn contains_key<Q: ?Sized>(&self, key: &Q) -> bool where K: Borrow<Q>, Q: Ord 
contains_key			    pub fn contains_key(&self, key: &usize) -> bool 
copy			    unsafe fn copy(&self, dst: usize, src: usize, len: usize) 
copy_nonoverlapping			    unsafe fn copy_nonoverlapping(&self, dst: usize, src: usize, len: usize) 
count			fn count(tail: usize, head: usize, size: usize) -> usize 
dealloc			unsafe fn dealloc<T>(ptr: *mut T, len: usize) 
dedup			    pub fn dedup(&mut self) 
default			    fn default() -> BinaryHeap<T> { BinaryHeap::new() }
default			    fn default() -> BitSet { BitSet::new() }
default			    fn default() -> BitVec { BitVec::new() }
default			    fn default() -> BTreeMap<K, V> 
default			    fn default() -> BTreeSet<T> 
default			    fn default() -> LinkedList<T> { LinkedList::new() }
default			    fn default() -> String 
default			    fn default() -> Vec<T> 
default			    fn default() -> VecDeque<T> { VecDeque::new() }
default			    fn default() -> VecMap<V> { VecMap::new() }
deref			    fn deref(&self) -> &B 
deref			        fn deref(&self) -> &T 
deref			    fn deref(&self) -> &str 
deref			    fn deref<'b>(&'b self) -> &'b String 
deref			    fn deref(&self) -> &[T] 
deref			    fn deref<'b>(&'b self) -> &'b Vec<T> 
deref_mut			        fn deref_mut(&mut self) -> &mut T 
deref_mut			    fn deref_mut(&mut self) -> &mut [T] 
destroy			    unsafe fn destroy(&mut self) 
diff			        fn diff(w1: u32, w2: u32) -> u32 { w1 & !w2 }
difference			    pub fn difference(&mut self, other: &BitVec) -> bool 
difference			    pub fn difference<'a>(&'a self, other: &'a BitSet) -> Difference<'a> 
difference			    pub fn difference<'a>(&'a self, other: &'a BTreeSet<T>) -> Difference<'a, T> 
difference_with			    pub fn difference_with(&mut self, other: &BitSet) 
drain			    pub fn drain(&mut self) -> Drain<T> 
drain			    pub fn drain(&mut self) -> Drain<T> 
drain			    pub fn drain(&mut self) -> Drain<T> 
drain			    pub fn drain<'a>(&'a mut self) -> Drain<'a, V> 
drop			    fn drop(&mut self) 
drop			    fn drop(&mut self) 
drop			    fn drop(&mut self) 
drop			    fn drop(&mut self) 
edge_mut			    pub fn edge_mut(&mut self) -> &mut Node<K, V> 
edges			    pub fn edges<'a>(&'a self) -> &'a [Node<K, V>] 
edges_mut			    pub fn edges_mut<'a>(&'a mut self) -> &'a mut [Node<K, V>] 
ends_with			    pub fn ends_with(&self, needle: &[T]) -> bool where T: PartialEq 
ends_with			    pub fn ends_with<'a, P: Pattern<'a>>(&'a self, pat: P) -> bool
entry			    pub fn entry(&mut self, mut key: K) -> Entry<K, V> 
entry			    pub fn entry(&mut self, key: usize) -> Entry<V> 
enum_set			pub mod enum_set;
eq			    fn eq(&self, other: &BitSet) -> bool 
eq			    fn eq(&self, other: &BitVec) -> bool 
eq			    fn eq(&self, other: &Cow<'b, C>) -> bool 
eq			    fn eq(&self, other: &BTreeMap<K, V>) -> bool 
eq			    fn eq(&self, other: &LinkedList<A>) -> bool 
eq			            fn eq(&self, other: &
eq			            fn eq(&self, other: &
eq			    fn eq(&self, other: &&'b str) -> bool { PartialEq::eq(&self[..], &other[..]) }
eq			    fn eq(&self, other: &Cow<'a, str>) -> bool { PartialEq::eq(&self[..], &other[..]) }
eq			    fn eq(&self, other: &String) -> bool { PartialEq::eq(&self[..], &other[..]) }
eq			    fn eq(&self, other: &VecDeque<A>) -> bool 
eq			    fn eq(&self, other: &VecMap<V>) -> bool 
eq_vec			    pub fn eq_vec(&self, v: &[bool]) -> bool 
escape_default			    pub fn escape_default(&self) -> String 
escape_unicode			    pub fn escape_unicode(&self) -> String 
extend			    fn extend<I: IntoIterator<Item=T>>(&mut self, iterable: I) 
extend			    fn extend<I: IntoIterator<Item=bool>>(&mut self, iterable: I) 
extend			    fn extend<I: IntoIterator<Item=usize>>(&mut self, iter: I) 
extend			    fn extend<T: IntoIterator<Item=(K, V)>>(&mut self, iter: T) 
extend			    fn extend<Iter: IntoIterator<Item=T>>(&mut self, iter: Iter) 
extend			    fn extend<I: IntoIterator<Item=E>>(&mut self, iter: I) 
extend			    fn extend<T: IntoIterator<Item=A>>(&mut self, iter: T) 
extend			    fn extend<I: IntoIterator<Item=&'a str>>(&mut self, iterable: I) 
extend			    fn extend<I: IntoIterator<Item=char>>(&mut self, iterable: I) 
extend			    fn extend<I: IntoIterator<Item=T>>(&mut self, iterable: I) 
extend			    fn extend<T: IntoIterator<Item=A>>(&mut self, iter: T) 
extend			    fn extend<I: IntoIterator<Item=(usize, V)>>(&mut self, iter: I) 
filter			        fn filter<A>((i, v): (usize, Option<A>)) -> Option<(usize, A)> 
find			    pub fn find<'a, P: Pattern<'a>>(&'a self, pat: P) -> Option<usize> 
first			        fn first<A, B>((a, _): (A, B)) -> A { a }
first			        fn first<A, B>((a, _): (A, B)) -> A { a }
first			    pub fn first(&self) -> Option<&T> 
first			        fn first<A, B>((a, _): (A, B)) -> A { a }
first_mut			    pub fn first_mut(&mut self) -> Option<&mut T> 
fix_last_block			    fn fix_last_block(&mut self) 
fixme_14344_be_sure_to_link_to_collections			pub fn fixme_14344_be_sure_to_link_to_collections() {}
fmt			    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result 
fmt			pub mod fmt;
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt::Debug for BitSet			impl fmt::Debug for BitSet 
fmt::Debug for BitVec			impl fmt::Debug for BitVec 
fmt::Debug for Cow			impl<'a, B: ?Sized> fmt::Debug for Cow<'a, B> where
fmt::Debug for EnumSet			impl<E:CLike + fmt::Debug> fmt::Debug for EnumSet<E> 
fmt::Debug for LinkedList			impl<A: fmt::Debug> fmt::Debug for LinkedList<A> 
fmt::Debug for String			impl fmt::Debug for String 
fmt::Debug for Vec			impl<T: fmt::Debug> fmt::Debug for Vec<T> 
fmt::Debug for VecDeque			impl<T: fmt::Debug> fmt::Debug for VecDeque<T> 
fmt::Debug for VecMap			impl<V: fmt::Debug> fmt::Debug for VecMap<V> 
fmt::Display for Cow			impl<'a, B: ?Sized> fmt::Display for Cow<'a, B> where
fmt::Display for FromUtf16Error			impl fmt::Display for FromUtf16Error 
fmt::Display for FromUtf8Error			impl fmt::Display for FromUtf8Error 
fmt::Display for String			impl fmt::Display for String 
fmt::Write for String			impl fmt::Write for String 
force			    pub fn force(self) -> ForceResult<NodeRef, Type> 
format			pub fn format(args: Arguments) -> string::String 
from			    fn from(s: &'a str) -> Cow<'a, str> 
from			    fn from(s: &'a str) -> String 
from			    fn from(s: String) -> Cow<'a, str> 
from			    fn from(s: &'a [T]) -> Vec<T> 
from			    fn from(s: &'a str) -> Vec<u8> 
from_bit_vec			    pub fn from_bit_vec(bit_vec: BitVec) -> BitSet 
from_bytes			    pub fn from_bytes(bytes: &[u8]) -> BitVec 
from_elem			    pub fn from_elem(nbits: usize, bit: bool) -> BitVec 
from_elem			pub fn from_elem<T: Clone>(elem: T, n: usize) -> Vec<T> 
from_fn			    pub fn from_fn<F>(len: usize, mut f: F) -> BitVec where F: FnMut(usize) -> bool 
from_iter			    fn from_iter<I: IntoIterator<Item=T>>(iter: I) -> BinaryHeap<T> 
from_iter			    fn from_iter<I: IntoIterator<Item=bool>>(iter: I) -> BitVec 
from_iter			    fn from_iter<I: IntoIterator<Item=usize>>(iter: I) -> BitSet 
from_iter			    fn from_iter<T: IntoIterator<Item=(K, V)>>(iter: T) -> BTreeMap<K, V> 
from_iter			    fn from_iter<I: IntoIterator<Item=T>>(iter: I) -> BTreeSet<T> 
from_iter			    fn from_iter<I: IntoIterator<Item=E>>(iter: I) -> EnumSet<E> 
from_iter			    fn from_iter<T: IntoIterator<Item=A>>(iter: T) -> LinkedList<A> 
from_iter			    fn from_iter<I: IntoIterator<Item=&'a str>>(iter: I) -> String 
from_iter			    fn from_iter<I: IntoIterator<Item=char>>(iter: I) -> String 
from_iter			    fn from_iter<I: IntoIterator<Item=T>>(it: I) -> Cow<'a, [T]> 
from_iter			    fn from_iter<I: IntoIterator<Item=T>>(iterable: I) -> Vec<T> 
from_iter			    fn from_iter<T: IntoIterator<Item=A>>(iterable: T) -> VecDeque<A> 
from_iter			    fn from_iter<I: IntoIterator<Item=(usize, V)>>(iter: I) -> VecMap<V> 
from_parts			    unsafe fn from_parts(ptr: *const T, len: usize) -> RawItems<T> 
from_raw			    pub unsafe fn from_raw<'a>(&'a self) -> Handle<&'a Node<K, V>, Type, NodeType> 
from_raw_buf			    pub unsafe fn from_raw_buf(ptr: *const T, elts: usize) -> Vec<T> 
from_raw_mut			    pub unsafe fn from_raw_mut<'a>(&'a mut self) -> Handle<&'a mut Node<K, V>, Type, NodeType> 
from_raw_parts			    pub unsafe fn from_raw_parts(buf: *mut u8, length: usize, capacity: usize) -> String 
from_raw_parts			    pub unsafe fn from_raw_parts(ptr: *mut T, length: usize,
from_slice			    unsafe fn from_slice(slice: &[T]) -> RawItems<T> 
from_str			    fn from_str(s: &str) -> Result<String, ()> 
from_str			    pub fn from_str(_: &str) -> String 
from_str			    pub fn from_str(string: &str) -> String 
from_usize			    fn from_usize(usize) -> Self;
from_utf16			    pub fn from_utf16(v: &[u16]) -> Result<String, FromUtf16Error> 
from_utf16_lossy			    pub fn from_utf16_lossy(v: &[u16]) -> String 
from_utf8			    pub fn from_utf8(vec: Vec<u8>) -> Result<String, FromUtf8Error> 
from_utf8_lossy			    pub fn from_utf8_lossy<'a>(v: &'a [u8]) -> Cow<'a, str> 
from_utf8_unchecked			    pub unsafe fn from_utf8_unchecked(bytes: Vec<u8>) -> String 
from_vec			    pub fn from_vec(vec: Vec<T>) -> BinaryHeap<T> 
front			    pub fn front(&self) -> Option<&T> 
front			    pub fn front(&self) -> Option<&T> 
front_mut			    pub fn front_mut(&mut self) -> Option<&mut T> 
front_mut			    pub fn front_mut(&mut self) -> Option<&mut T> 
fuzz_test			    fn fuzz_test(sz: i32) 
get			    pub fn get(&self, i: usize) -> Option<bool> 
get			    pub fn get(&self) -> &V 
get			    pub fn get(self) -> Result<&'a mut V, VacantEntry<'a, K, V>> 
get			    pub fn get<Q: ?Sized>(&self, key: &Q) -> Option<&V> where K: Borrow<Q>, Q: Ord 
get			    pub fn get(&self, index: usize) -> Option<&T> 
get			    pub fn get(&self, i: usize) -> Option<&T> 
get			    pub fn get(&self) -> &V 
get			    pub fn get(&self, key: &usize) -> Option<&V> 
get			    pub fn get(self) -> Result<&'a mut V, VacantEntry<'a, V>> 
get_mut			    pub fn get_mut(&mut self) -> &mut V 
get_mut			    pub fn get_mut<Q: ?Sized>(&mut self, key: &Q) -> Option<&mut V> where K: Borrow<Q>, Q: Ord 
get_mut			    pub fn get_mut(&mut self, index: usize) -> Option<&mut T> 
get_mut			    pub fn get_mut(&mut self, i: usize) -> Option<&mut T> 
get_mut			    pub fn get_mut(&mut self) -> &mut V 
get_mut			    pub fn get_mut(&mut self, key: &usize) -> Option<&mut V> 
get_ref			    pub fn get_ref(&self) -> &BitVec 
get_unchecked			    pub unsafe fn get_unchecked(&self, index: usize) -> &T 
get_unchecked_mut			    pub unsafe fn get_unchecked_mut(&mut self, index: usize) -> &mut T 
grapheme_indices			    pub fn grapheme_indices(&self, is_extended: bool) -> GraphemeIndices 
graphemes			    pub fn graphemes(&self, is_extended: bool) -> Graphemes 
grow			    pub fn grow(&mut self, n: usize, value: bool) 
grow_capacity			    fn grow_capacity(&mut self, capacity: usize) 
hack			mod hack 
handle			pub mod handle 
handle_underflow			    pub fn handle_underflow(mut self) 
handle_underflow_to_left			    unsafe fn handle_underflow_to_left(&mut self) 
handle_underflow_to_right			    unsafe fn handle_underflow_to_right(&mut self) 
hash			    fn hash<H: hash::Hasher>(&self, state: &mut H) 
hash			    fn hash<H: Hasher>(&self, state: &mut H) 
hash			    fn hash<H: Hasher>(&self, state: &mut H) 
hash			    fn hash<H: Hasher>(&self, state: &mut H) 
hash			    fn hash<H: hash::Hasher>(&self, hasher: &mut H) 
hash			    fn hash<H: hash::Hasher>(&self, state: &mut H) 
hash			    fn hash<H: Hasher>(&self, state: &mut H) 
hash			    fn hash<H: Hasher>(&self, state: &mut H) 
hash::Hash for BitSet			impl hash::Hash for BitSet 
hash::Hash for BitVec			impl hash::Hash for BitVec 
hash::Hash for String			impl hash::Hash for String 
hoist_lone_child			    pub fn hoist_lone_child(&mut self) 
idx			    fn idx(&mut self, index: usize) -> Option<bool> 
idx			    fn idx(&mut self, j: usize) -> Option<&'a T> 
index			    fn index(&self, i: usize) -> &bool 
index			    fn index(&self, key: &Q) -> &V 
index			    fn index(&self, _index: ops::RangeFull) -> &str 
index			    fn index(&self, index: ops::Range<usize>) -> &str 
index			    fn index(&self, index: ops::RangeFrom<usize>) -> &str 
index			    fn index(&self, index: ops::RangeTo<usize>) -> &str 
index			    fn index(&self, _index: ops::RangeFull) -> &[T] 
index			    fn index(&self, index: ops::Range<usize>) -> &[T] 
index			    fn index(&self, index: ops::RangeFrom<usize>) -> &[T] 
index			    fn index(&self, index: ops::RangeTo<usize>) -> &[T] 
index			    fn index(&self, index: usize) -> &T 
index			    fn index(&self, i: usize) -> &A 
index			    fn index(&self, i: &usize) -> &V 
index			    fn index<'a>(&'a self, i: usize) -> &'a V 
index_mut			    fn index_mut(&mut self, _index: ops::RangeFull) -> &mut [T] 
index_mut			    fn index_mut(&mut self, index: ops::Range<usize>) -> &mut [T] 
index_mut			    fn index_mut(&mut self, index: ops::RangeFrom<usize>) -> &mut [T] 
index_mut			    fn index_mut(&mut self, index: ops::RangeTo<usize>) -> &mut [T] 
index_mut			    fn index_mut(&mut self, index: usize) -> &mut T 
index_mut			    fn index_mut(&mut self, i: usize) -> &mut A 
index_mut			    fn index_mut(&mut self, i: &usize) -> &mut V 
index_mut			    fn index_mut(&mut self, i: usize) -> &mut V 
indexable			    fn indexable(&self) -> usize 
indexable			    fn indexable(&self) -> usize 
init			    pub fn init(&self) -> &[T] 
init_mut			    pub fn init_mut(&mut self) -> &mut [T] 
insert			    pub fn insert(&mut self, value: usize) -> bool 
insert			        pub fn insert(mut self, key: K, val: V) -> &'a mut V 
insert			    pub fn insert(&mut self, mut key: K, mut value: V) -> Option<V> 
insert			    pub fn insert(&mut self, mut value: V) -> V 
insert			    pub fn insert(self, value: V) -> &'a mut V 
insert			    pub fn insert(&mut self, value: T) -> bool 
insert			    pub fn insert(&mut self, e: E) -> bool 
insert			    pub fn insert(&mut self, idx: usize, ch: char) 
insert			    pub fn insert(&mut self, index: usize, element: T) 
insert			    pub fn insert(&mut self, i: usize, t: T) 
insert			    pub fn insert(&mut self, key: usize, value: V) -> Option<V> 
insert			    pub fn insert(&mut self, value: V) -> V 
insert			    pub fn insert(self, value: V) -> &'a mut V 
insert_as_internal			    pub fn insert_as_internal(mut self, key: K, value: V, right: Node<K, V>)
insert_as_leaf			    pub fn insert_as_leaf(mut self, key: K, value: V) ->
insert_edge			    unsafe fn insert_edge(&mut self, index: usize, edge: Node<K, V>) 
insert_kv			    unsafe fn insert_kv(&mut self, index: usize, key: K, val: V) -> &mut V 
insert_next			    pub fn insert_next(&mut self, elt: A) 
insert_next_node			    fn insert_next_node(&mut self, mut ins_node: Box<Node<A>>) 
insertion_sort			fn insertion_sort<T, F>(v: &mut [T], mut compare: F) where F: FnMut(&T, &T) -> Ordering 
intersect			    pub fn intersect(&mut self, other: &BitVec) -> bool 
intersect_with			    pub fn intersect_with(&mut self, other: &BitSet) 
intersection			    pub fn intersection<'a>(&'a self, other: &'a BitSet) -> Intersection<'a> 
intersection			    pub fn intersection<'a>(&'a self, other: &'a BTreeSet<T>)
intersection			    pub fn intersection(&self, e: EnumSet<E>) -> EnumSet<E> 
into			    fn into(self) -> Vec<u8> 
into_bit_vec			    pub fn into_bit_vec(self) -> BitVec 
into_boxed_slice			    pub fn into_boxed_slice(mut self) -> Box<[T]> 
into_bytes			    pub fn into_bytes(self) -> Vec<u8> { self.bytes }
into_bytes			    pub fn into_bytes(self) -> Vec<u8> 
into_cow			    fn into_cow(self) -> Cow<'a, B> 
into_cow			    fn into_cow(self) -> Cow<'a, B>;
into_cow			    fn into_cow(self) -> Cow<'a, str> 
into_cow			    fn into_cow(self) -> Cow<'static, str> 
into_cow			    fn into_cow(self) -> Cow<'a, [T]> 
into_edge			    pub fn into_edge(self) -> &'a Node<K, V> 
into_edge_mut			    pub fn into_edge_mut(self) -> &'a mut Node<K, V> 
into_inner			    pub fn into_inner(mut self) -> Vec<T> 
into_iter			    fn into_iter(self) -> IntoIter<T> 
into_iter			    fn into_iter(self) -> Iter<'a, T> 
into_iter			    pub fn into_iter(self) -> IntoIter<T> 
into_iter			    fn into_iter(self) -> Iter<'a> 
into_iter			    fn into_iter(self) -> SetIter<'a> 
into_iter			    fn into_iter(mut self) -> IterMut<'a, K, V> 
into_iter			    fn into_iter(self) -> IntoIter<K, V> 
into_iter			    fn into_iter(self) -> Iter<'a, K, V> 
into_iter			    pub fn into_iter(self) -> IntoIter<K, V> 
into_iter			    pub fn into_iter(self) -> MoveTraversal<K, V> 
into_iter			    fn into_iter(self) -> IntoIter<T> 
into_iter			    fn into_iter(self) -> Iter<'a, T> 
into_iter			    pub fn into_iter(self) -> IntoIter<T> 
into_iter			    fn into_iter(self) -> Iter<E> 
into_iter			    fn into_iter(mut self) -> IterMut<'a, T> 
into_iter			    fn into_iter(self) -> IntoIter<T> 
into_iter			    fn into_iter(self) -> Iter<'a, T> 
into_iter			    pub fn into_iter(self) -> IntoIter<T> 
into_iter			    fn into_iter(mut self) -> slice::IterMut<'a, T> 
into_iter			    fn into_iter(self) -> IntoIter<T> 
into_iter			    fn into_iter(self) -> slice::Iter<'a, T> 
into_iter			    pub fn into_iter(self) -> IntoIter<T> 
into_iter			    fn into_iter(mut self) -> IterMut<'a, T> 
into_iter			    fn into_iter(self) -> IntoIter<T> 
into_iter			    fn into_iter(self) -> Iter<'a, T> 
into_iter			    pub fn into_iter(self) -> IntoIter<T> 
into_iter			    fn into_iter(mut self) -> IterMut<'a, T> 
into_iter			    fn into_iter(self) -> IntoIter<T> 
into_iter			    fn into_iter(self) -> Iter<'a, T> 
into_iter			    pub fn into_iter(self) -> IntoIter<V> 
into_kv			    pub fn into_kv(self) -> (&'a K, &'a V) 
into_kv_mut			    pub fn into_kv_mut(self) -> (&'a mut K, &'a mut V) 
into_leaf			        fn into_leaf(mut self) -> SearchStack<'a, K, V, handle::KV, handle::Leaf> 
into_left_edge			    pub fn into_left_edge(self) -> Handle<&'a mut Node<K, V>, handle::Edge, NodeType> 
into_mut			    pub fn into_mut(self) -> &'a mut V 
into_mut			    pub fn into_mut(self) -> &'a mut V 
into_owned			    pub fn into_owned(self) -> <B as ToOwned>::Owned 
into_searcher			    fn into_searcher(self, haystack: &'a str) -> <&'b str as Pattern<'a>>::Searcher 
into_sorted_vec			    pub fn into_sorted_vec(mut self) -> Vec<T> 
into_top			        pub fn into_top(mut self) -> &'a mut V 
into_vec			    pub fn into_vec(self) -> Vec<T> { self.data }
into_vec			    pub fn into_vec(self: Box<Self>) -> Vec<T> 
into_vec			    pub fn into_vec<T>(mut b: Box<[T]>) -> Vec<T> 
is_char_boundary			    pub fn is_char_boundary(&self, index: usize) -> bool 
is_contained_in			    fn is_contained_in(self, haystack: &'a str) -> bool 
is_contiguous			    fn is_contiguous(&self) -> bool 
is_disjoint			    pub fn is_disjoint(&self, other: &BitSet) -> bool 
is_disjoint			    pub fn is_disjoint(&self, other: &BTreeSet<T>) -> bool 
is_disjoint			    pub fn is_disjoint(&self, other: &EnumSet<E>) -> bool 
is_empty			    pub fn is_empty(&self) -> bool { self.len() == 0 }
is_empty			    pub fn is_empty(&self) -> bool { self.len() == 0 }
is_empty			    pub fn is_empty(&self) -> bool 
is_empty			    pub fn is_empty(&self) -> bool { self.len() == 0 }
is_empty			    pub fn is_empty(&self) -> bool { self.len() == 0 }
is_empty			    pub fn is_empty(&self) -> bool 
is_empty			    pub fn is_empty(&self) -> bool 
is_empty			    pub fn is_empty(&self) -> bool 
is_empty			    pub fn is_empty(&self) -> bool 
is_empty			    pub fn is_empty(&self) -> bool { self.len() == 0 }
is_empty			    pub fn is_empty(&self) -> bool { self.len() == 0 }
is_empty			    pub fn is_empty(&self) -> bool { self.len() == 0 }
is_empty			    pub fn is_empty(&self) -> bool 
is_full			    pub fn is_full(&self) -> bool 
is_full			    fn is_full(&self) -> bool { self.cap - self.len() == 1 }
is_leaf			    pub fn is_leaf(&self) -> bool 
is_prefix_of			    fn is_prefix_of(self, haystack: &'a str) -> bool 
is_subset			    pub fn is_subset(&self, other: &BitSet) -> bool 
is_subset			    pub fn is_subset(&self, other: &BTreeSet<T>) -> bool 
is_subset			    pub fn is_subset(&self, other: &EnumSet<E>) -> bool 
is_superset			    pub fn is_superset(&self, other: &BitSet) -> bool 
is_superset			    pub fn is_superset(&self, other: &BTreeSet<T>) -> bool 
is_superset			    pub fn is_superset(&self, other: &EnumSet<E>) -> bool 
is_underfull			    pub fn is_underfull(&self) -> bool 
iter			    pub fn iter(&self) -> Iter<T> 
iter			    pub fn iter(&self) -> Iter 
iter			    pub fn iter(&self) -> bit_set::Iter 
iter			    pub fn iter(&self) -> Iter<K, V> 
iter			    pub fn iter<'a>(&'a self) -> Traversal<'a, K, V> 
iter			    pub fn iter(&self) -> Iter<T> 
iter			    pub fn iter(&self) -> Iter<E> 
iter			    pub fn iter(&self) -> Iter<T> 
iter			    pub fn iter(&self) -> Iter<T> 
iter			    pub fn iter(&self) -> Iter<T> 
iter			    pub fn iter<'r>(&'r self) -> Iter<'r, V> 
iter_mut			    pub fn iter_mut(&mut self) -> IterMut<K, V> 
iter_mut			    pub fn iter_mut<'a>(&'a mut self) -> MutTraversal<'a, K, V> 
iter_mut			    pub fn iter_mut(&mut self) -> IterMut<T> 
iter_mut			    pub fn iter_mut(&mut self) -> IterMut<T> 
iter_mut			    pub fn iter_mut(&mut self) -> IterMut<T> 
iter_mut			    pub fn iter_mut<'r>(&'r mut self) -> IterMut<'r, V> 
key_mut			    pub fn key_mut(&'a mut self) -> &'a mut K 
keys			    pub fn keys<'a>(&'a self) -> Keys<'a, K, V> 
keys			    pub fn keys<'a>(&'a self) -> &'a [K] 
keys			    pub fn keys<'r>(&'r self) -> Keys<'r, V> 
keys_mut			    pub fn keys_mut<'a>(&'a mut self) -> &'a mut [K] 
kv_handle			    pub fn kv_handle(&mut self, index: usize) -> Handle<&mut Node<K, V>, handle::KV,
last			    pub fn last(&self) -> Option<&T> 
last_mut			    pub fn last_mut(&mut self) -> Option<&mut T> 
left_edge			    pub fn left_edge<'a>(&'a mut self) -> Handle<&'a mut Node<K, V>, handle::Edge, NodeType> 
left_kv			    unsafe fn left_kv<'a>(&'a mut self) -> Handle<&'a mut Node<K, V>, handle::KV, NodeType> 
len			    pub fn len(&self) -> usize { self.data.len() }
len			    pub fn len(&self) -> usize  
len			    pub fn len(&self) -> usize { self.nbits }
len			    pub fn len(&self) -> usize { self.length }
len			    pub fn len(&self) -> usize 
len			    pub fn len(&self) -> usize { self.map.len() }
len			    pub fn len(&self) -> usize 
len			    pub fn len(&self) -> usize 
len			    pub fn len(&self) -> usize 
len			    pub fn len(&self) -> usize 
len			    pub fn len(&self) -> usize { self.vec.len() }
len			    pub fn len(&self) -> usize { self.len }
len			    pub fn len(&self) -> usize { count(self.tail, self.head, self.cap) }
len			    pub fn len(&self) -> usize 
lines			    pub fn lines(&self) -> Lines 
lines_any			    pub fn lines_any(&self) -> LinesAny 
link_with_prev			fn link_with_prev<T>(mut next: Box<Node<T>>, prev: Rawlink<Node<T>>)
linked_list			pub mod linked_list;
list_from			    fn list_from<T: Clone>(v: &[T]) -> LinkedList<T> 
macros			mod macros;
make_internal_root			    pub fn make_internal_root(left_and_out: &mut Node<K,V>, b: usize, key: K, value: V,
make_leaf_root			    pub fn make_leaf_root(b: usize) -> Node<K, V> 
map			pub mod map;
map_in_place			    pub fn map_in_place<U, F>(self, mut f: F) -> Vec<U> where F: FnMut(T) -> U 
mask_for_bits			fn mask_for_bits(bits: usize) -> u32 
match_indices			    pub fn match_indices<'a, P: Pattern<'a>>(&'a self, pat: P) -> MatchIndices<'a, P> 
match_words			fn match_words <'a,'b>(a: &'a BitVec, b: &'b BitVec) -> (MatchWords<'a>, MatchWords<'b>) 
matches			    pub fn matches<'a, P: Pattern<'a>>(&'a self, pat: P) -> Matches<'a, P> 
merge_children			    unsafe fn merge_children(mut self) 
merge_sort			fn merge_sort<T, F>(v: &mut [T], mut compare: F) where F: FnMut(&T, &T) -> Ordering 
min_load_from_capacity			fn min_load_from_capacity(cap: usize) -> usize 
move_from			    pub fn move_from(&mut self, mut src: Vec<T>, start: usize, end: usize) -> usize 
ne			    fn ne(&self, other: &LinkedList<A>) -> bool 
ne			            fn ne(&self, other: &
ne			            fn ne(&self, other: &
ne			    fn ne(&self, other: &&'b str) -> bool { PartialEq::ne(&self[..], &other[..]) }
ne			    fn ne(&self, other: &Cow<'a, str>) -> bool { PartialEq::ne(&self[..], &other[..]) }
ne			    fn ne(&self, other: &String) -> bool { PartialEq::ne(&self[..], &other[..]) }
negate			    pub fn negate(&mut self) 
new			    pub fn new() -> BinaryHeap<T> { BinaryHeap { data: vec![] } }
new			    pub fn new() -> BitSet 
new			    pub fn new() -> BitVec 
new			        fn new() -> InvariantLifetime<'id> 
new			        pub fn new(map: &'a mut BTreeMap<K, V>) -> PartialSearchStack<'a, K, V> 
new			    pub fn new() -> BTreeMap<K, V> 
new			    pub fn new() -> BTreeSet<T> 
new			    fn new(bits: usize) -> Iter<E> 
new			    pub fn new() -> EnumSet<E> 
new			    fn new(v: T) -> Node<T> 
new			    pub fn new() -> LinkedList<T> 
new			    pub fn new(length: usize) -> ElementSwaps 
new			    pub fn new() -> String 
new			    pub fn new() -> Vec<T> 
new			    pub fn new() -> VecDeque<T> 
new			    pub fn new() -> VecMap<V> { VecMap { v: vec![] } }
new_internal			    unsafe fn new_internal(capacity: usize) -> Node<K, V> 
new_leaf			    fn new_leaf(capacity: usize) -> Node<K, V> 
new_pos			        fn new_pos(i: usize, s: Direction) -> usize 
new_pos_wrapping			        fn new_pos_wrapping(i: usize, s: Direction) -> usize 
next			    fn next(&mut self) -> Option<&'a T> { self.iter.next() }
next			    fn next(&mut self) -> Option<T> { self.iter.next() }
next			    fn next(&mut self) -> Option<bool> 
next			    fn next(&mut self) -> Option<usize> 
next			    fn next(&mut self) -> Option<(&'a K)> { self.inner.next() }
next			    fn next(&mut self) -> Option<(&'a K, &'a V)> { self.inner.next() }
next			    fn next(&mut self) -> Option<(&'a K, &'a mut V)> { self.inner.next() }
next			    fn next(&mut self) -> Option<(&'a V)> { self.inner.next() }
next			    fn next(&mut self) -> Option<(K, V)> { self.inner.next() }
next			    fn next(&mut self) -> Option<(K, V)> 
next			    fn next(&mut self) -> Option<T> 
next			    fn next(&mut self) -> Option<TraversalItem<K, V, E>> 
next			    fn next(&mut self) -> Option<&'a T> { self.iter.next() }
next			    fn next(&mut self) -> Option<&'a T> 
next			    fn next(&mut self) -> Option<T> { self.iter.next() }
next			    fn next(&mut self) -> Option<E> 
next			    fn next(&mut self) -> Option<&'a A> 
next			    fn next(&mut self) -> Option<&'a mut A> 
next			    fn next(&mut self) -> Option<A> { self.list.pop_front() }
next			    fn next(&mut self) -> Option<(usize, usize)> 
next			    fn next(&mut self) -> Option<Vec<T>> 
next			    fn next(&mut self) -> Option<char> 
next			    fn next(&mut self) -> Option<u16> { self.encoder.next() }
next			    fn next(&mut self) -> Option<T> 
next			    fn next(&mut self) -> Option<&'a T> 
next			    fn next(&mut self) -> Option<&'a mut T> 
next			    fn next(&mut self) -> Option<T> 
next			            fn next(&mut self) -> Option<
next			    fn next(&mut self) -> Option<(&'a V)> { self.iter.next() }
next			    fn next(&mut self) -> Option<(usize, V)> { self.iter.next() }
next			    fn next(&mut self) -> Option<usize> { self.iter.next() }
next_back			    fn next_back(&mut self) -> Option<&'a T> { self.iter.next_back() }
next_back			    fn next_back(&mut self) -> Option<T> { self.iter.next_back() }
next_back			    fn next_back(&mut self) -> Option<bool> 
next_back			    fn next_back(&mut self) -> Option<(&'a K)> { self.inner.next_back() }
next_back			    fn next_back(&mut self) -> Option<(&'a K, &'a V)> { self.inner.next_back() }
next_back			    fn next_back(&mut self) -> Option<(&'a K, &'a mut V)> { self.inner.next_back() }
next_back			    fn next_back(&mut self) -> Option<(&'a V)> { self.inner.next_back() }
next_back			    fn next_back(&mut self) -> Option<(K, V)> { self.inner.next_back() }
next_back			    fn next_back(&mut self) -> Option<(K, V)> 
next_back			    fn next_back(&mut self) -> Option<T> 
next_back			    fn next_back(&mut self) -> Option<TraversalItem<K, V, E>> 
next_back			    fn next_back(&mut self) -> Option<&'a T> { self.iter.next_back() }
next_back			    fn next_back(&mut self) -> Option<T> { self.iter.next_back() }
next_back			    fn next_back(&mut self) -> Option<&'a A> 
next_back			    fn next_back(&mut self) -> Option<&'a mut A> 
next_back			    fn next_back(&mut self) -> Option<A> { self.list.pop_back() }
next_back			    fn next_back(&mut self) -> Option<T> 
next_back			    fn next_back(&mut self) -> Option<&'a T> 
next_back			    fn next_back(&mut self) -> Option<&'a mut T> 
next_back			    fn next_back(&mut self) -> Option<T> 
next_back			            fn next_back(&mut self) -> Option<
next_back			    fn next_back(&mut self) -> Option<(&'a V)> { self.iter.next_back() }
next_back			    fn next_back(&mut self) -> Option<(usize, V)> { self.iter.next_back() }
next_back			    fn next_back(&mut self) -> Option<usize> { self.iter.next_back() }
next_edge			    fn next_edge(&mut self) -> Option<E> { self.1.next() }
next_edge			    fn next_edge(&mut self) -> Option<Node<K, V>> 
next_edge			    fn next_edge(&mut self) -> Option<Self::Edge>;
next_edge_back			    fn next_edge_back(&mut self) -> Option<E> { self.1.next_back() }
next_edge_back			    fn next_edge_back(&mut self) -> Option<Node<K, V>> 
next_edge_back			    fn next_edge_back(&mut self) -> Option<Self::Edge>;
next_edge_item			    pub fn next_edge_item(&mut self) -> Option<E> 
next_edge_item_back			    pub fn next_edge_item_back(&mut self) -> Option<E> 
next_kv			    fn next_kv(&mut self) -> Option<(K, V)> { self.0.next() }
next_kv			    fn next_kv(&mut self) -> Option<(K, V)> 
next_kv			    fn next_kv(&mut self) -> Option<Self::Item>;
next_kv_back			    fn next_kv_back(&mut self) -> Option<(K, V)> { self.0.next_back() }
next_kv_back			    fn next_kv_back(&mut self) -> Option<(K, V)> 
next_kv_back			    fn next_kv_back(&mut self) -> Option<Self::Item>;
next_kv_item			    pub fn next_kv_item(&mut self) -> Option<(K, V)> 
next_kv_item_back			    pub fn next_kv_item_back(&mut self) -> Option<(K, V)> 
next_permutation			    pub fn next_permutation(&mut self) -> bool where T: Ord 
nfc_chars			    pub fn nfc_chars(&self) -> Recompositions 
nfd_chars			    pub fn nfd_chars(&self) -> Decompositions 
nfkc_chars			    pub fn nfkc_chars(&self) -> Recompositions 
nfkd_chars			    pub fn nfkd_chars(&self) -> Decompositions 
node			mod node;
node			    pub fn node(&self) -> &Node<K, V> 
none			    pub fn none(&self) -> bool 
none			    fn none() -> Rawlink<T> 
ops			impl ops::Index<ops::Range<usize>> for String 
ops			impl ops::Index<ops::RangeFrom<usize>> for String 
ops			impl ops::Index<ops::RangeTo<usize>> for String 
ops			impl<T> ops::Index<ops::Range<usize>> for Vec<T> 
ops			impl<T> ops::Index<ops::RangeFrom<usize>> for Vec<T> 
ops			impl<T> ops::Index<ops::RangeTo<usize>> for Vec<T> 
ops			impl<T> ops::IndexMut<ops::Range<usize>> for Vec<T> 
ops			impl<T> ops::IndexMut<ops::RangeFrom<usize>> for Vec<T> 
ops			impl<T> ops::IndexMut<ops::RangeTo<usize>> for Vec<T> 
ops::Deref for String			impl ops::Deref for String 
ops::Deref for Vec			impl<T> ops::Deref for Vec<T> 
ops::DerefMut for Vec			impl<T> ops::DerefMut for Vec<T> 
ops::Index for String			impl ops::Index<ops::RangeFull> for String 
ops::Index for Vec			impl<T> ops::Index<ops::RangeFull> for Vec<T> 
ops::IndexMut for Vec			impl<T> ops::IndexMut<ops::RangeFull> for Vec<T> 
or			        fn or(w1: u32, w2: u32) -> u32 { w1 | w2 }
or_insert			    pub fn or_insert(self, default: V) -> &'a mut V 
or_insert			    pub fn or_insert(self, default: V) -> &'a mut V 
or_insert_with			    pub fn or_insert_with<F: FnOnce() -> V>(self, default: F) -> &'a mut V 
or_insert_with			    pub fn or_insert_with<F: FnOnce() -> V>(self, default: F) -> &'a mut V 
other_op			    fn other_op<F>(&mut self, other: &BitSet, mut f: F) where F: FnMut(u32, u32) -> u32 
parse			    pub fn parse<F: FromStr>(&self) -> Result<F, F::Err> 
partial_cmp			    fn partial_cmp(&self, other: &BitSet) -> Option<Ordering> 
partial_cmp			    fn partial_cmp(&self, other: &BitVec) -> Option<Ordering> 
partial_cmp			    fn partial_cmp(&self, other: &Cow<'a, B>) -> Option<Ordering> 
partial_cmp			    fn partial_cmp(&self, other: &BTreeMap<K, V>) -> Option<Ordering> 
partial_cmp			    fn partial_cmp(&self, other: &LinkedList<A>) -> Option<Ordering> 
partial_cmp			    fn partial_cmp(&self, other: &Vec<T>) -> Option<Ordering> 
partial_cmp			    fn partial_cmp(&self, other: &VecDeque<A>) -> Option<Ordering> 
partial_cmp			    fn partial_cmp(&self, other: &VecMap<V>) -> Option<Ordering> 
peek			    pub fn peek(&self) -> Option<&T> 
peek			        pub fn peek(&self) -> &V 
peek_mut			        pub fn peek_mut(&mut self) -> &mut V 
peek_next			    pub fn peek_next(&mut self) -> Option<&mut A> 
permutations			    pub fn permutations(&self) -> Permutations<T> where T: Clone 
permutations			    pub fn permutations<T>(s: &[T]) -> Permutations<T> where T: Clone 
pop			    pub fn pop(&mut self) -> Option<T> 
pop			    pub fn pop(&mut self) -> Option<bool> 
pop			    pub fn pop(&mut self) -> Option<char> 
pop			    pub fn pop(&mut self) -> Option<T> 
pop_back			    pub fn pop_back(&mut self) -> Option<T> 
pop_back			    pub fn pop_back(&mut self) -> Option<T> 
pop_back_node			    fn pop_back_node(&mut self) -> Option<Box<Node<T>>> 
pop_edge			    unsafe fn pop_edge(&mut self) -> Node<K, V> 
pop_front			    pub fn pop_front(&mut self) -> Option<T> 
pop_front			    pub fn pop_front(&mut self) -> Option<T> 
pop_front_node			    fn pop_front_node(&mut self) -> Option<Box<Node<T>>> 
pop_kv			    unsafe fn pop_kv(&mut self) -> (K, V) 
position_elem			    pub fn position_elem(&self, t: &T) -> Option<usize> where T: PartialEq 
prev_permutation			    pub fn prev_permutation(&mut self) -> bool where T: Ord 
process			    fn process<F>(&mut self, other: &BitVec, mut op: F) -> bool where F: FnMut(u32, u32) -> u32 
push			    pub fn push(&mut self, item: T) 
push			    pub fn push(&mut self, elem: bool) 
push			        pub fn push(mut self, mut edge: node::Handle<IdRef<'id, Node<K, V>>,
push			    unsafe fn push(&mut self, val: T) 
push			    pub fn push(&mut self, ch: char) 
push			    pub fn push(&mut self, value: T) 
push_all			    pub fn push_all(&mut self, other: &[T]) 
push_back			    pub fn push_back(&mut self, elt: T) 
push_back			    pub fn push_back(&mut self, t: T) 
push_back_node			    fn push_back_node(&mut self, mut new_tail: Box<Node<T>>) 
push_edge			    unsafe fn push_edge(&mut self, edge: Node<K, V>) 
push_front			    pub fn push_front(&mut self, elt: T) 
push_front			    pub fn push_front(&mut self, t: T) 
push_front_node			    fn push_front_node(&mut self, mut new_head: Box<Node<T>>) 
push_kv			    unsafe fn push_kv(&mut self, key: K, val: V) 
push_pop			    pub fn push_pop(&mut self, mut item: T) -> T 
push_str			    pub fn push_str(&mut self, string: &str) 
range			    pub fn range<'a>(&'a self, min: Bound<&K>, max: Bound<&K>) -> Range<'a, K, V> 
range			    pub fn range<'a>(&'a self, min: Bound<&T>, max: Bound<&T>) -> Range<'a, T> 
range_mut			    pub fn range_mut<'a>(&'a mut self, min: Bound<&K>, max: Bound<&K>) -> RangeMut<'a, K, V> 
remove			    pub fn remove(&mut self, value: &usize) -> bool 
remove			        pub fn remove(self) -> V 
remove			    pub fn remove(self) -> V 
remove			    pub fn remove<Q: ?Sized>(&mut self, key: &Q) -> Option<V> where K: Borrow<Q>, Q: Ord 
remove			    pub fn remove<Q: ?Sized>(&mut self, value: &Q) -> bool where T: Borrow<Q>, Q: Ord 
remove			    pub fn remove(&mut self, e: &E) -> bool 
remove			    pub fn remove(&mut self, idx: usize) -> char 
remove			    pub fn remove(&mut self, index: usize) -> T 
remove			    pub fn remove(&mut self, i: usize) -> Option<T> 
remove			    pub fn remove(&mut self, key: &usize) -> Option<V> 
remove			    pub fn remove(self) -> V 
remove_as_leaf			    pub fn remove_as_leaf(mut self) -> (K, V) 
remove_edge			    unsafe fn remove_edge(&mut self, index: usize) -> Node<K, V> 
remove_kv			    unsafe fn remove_kv(&mut self, index: usize) -> (K, V) 
remove_leaf			        fn remove_leaf(mut self) -> V 
replace			    pub fn replace(&mut self, mut item: T) -> Option<T> 
replace			    pub fn replace(&self, from: &str, to: &str) -> String 
reserve			    pub fn reserve(&mut self, additional: usize) 
reserve			    pub fn reserve(&mut self, additional: usize) 
reserve			    pub fn reserve(&mut self, additional: usize) 
reserve			    pub fn reserve(&mut self, additional: usize) 
reserve			    pub fn reserve(&mut self, additional: usize) 
reserve_exact			    pub fn reserve_exact(&mut self, additional: usize) 
reserve_exact			    pub fn reserve_exact(&mut self, additional: usize) 
reserve_exact			    pub fn reserve_exact(&mut self, additional: usize) 
reserve_exact			    pub fn reserve_exact(&mut self, additional: usize) 
reserve_exact			    pub fn reserve_exact(&mut self, additional: usize) 
reserve_len			    pub fn reserve_len(&mut self, len: usize) 
reserve_len			    pub fn reserve_len(&mut self, len: usize) 
reserve_len_exact			    pub fn reserve_len_exact(&mut self, len: usize) 
reserve_len_exact			    pub fn reserve_len_exact(&mut self, len: usize) 
resize			        fn resize<T>(vec: &mut Vec<T>) 
resize			    pub fn resize(&mut self, new_len: usize, value: T) 
resize			    pub fn resize(&mut self, new_len: usize, value: T) 
resolve			    fn resolve<'a>(&mut self) -> Option<&'a mut T> 
resolve_immut			    fn resolve_immut<'a>(&self) -> Option<&'a T> 
retain			    pub fn retain<F>(&mut self, mut f: F) where F: FnMut(&T) -> bool 
reverse			    pub fn reverse(&mut self) 
reverse_bits			fn reverse_bits(byte: u8) -> u8 
rfind			    pub fn rfind<'a, P: Pattern<'a>>(&'a self, pat: P) -> Option<usize>
right_edge			    pub fn right_edge<'a>(&'a mut self) -> Handle<&'a mut Node<K, V>, handle::Edge, NodeType> 
right_kv			    unsafe fn right_kv<'a>(&'a mut self) -> Handle<&'a mut Node<K, V>, handle::KV, NodeType> 
rmatch_indices			    pub fn rmatch_indices<'a, P: Pattern<'a>>(&'a self, pat: P) -> RMatchIndices<'a, P>
rmatches			    pub fn rmatches<'a, P: Pattern<'a>>(&'a self, pat: P) -> RMatches<'a, P>
round_up_to_next			fn round_up_to_next(unrounded: usize, target_alignment: usize) -> usize 
rposition_elem			    pub fn rposition_elem(&self, t: &T) -> Option<usize> where T: PartialEq 
rsplit			    pub fn rsplit<'a, P: Pattern<'a>>(&'a self, pat: P) -> RSplit<'a, P>
rsplit_terminator			    pub fn rsplit_terminator<'a, P: Pattern<'a>>(&'a self, pat: P) -> RSplitTerminator<'a, P>
rsplitn			    pub fn rsplitn<F>(&self, n: usize, pred: F) -> RSplitN<T, F> where F: FnMut(&T) -> bool 
rsplitn			    pub fn rsplitn<'a, P: Pattern<'a>>(&'a self, count: usize, pat: P) -> RSplitN<'a, P>
rsplitn_mut			    pub fn rsplitn_mut<F>(&mut self,  n: usize, pred: F) -> RSplitNMut<T, F>
safe_get			        fn safe_get(xs: &[u8], i: usize, total: usize) -> u8 
seal			        pub fn seal<Type, NodeType>
search			    pub fn search<Q: ?Sized, NodeRef: Deref<Target=Node<K, V>>>(node: NodeRef, key: &Q)
search_linear			            fn search_linear<Q: ?Sized>(&self, key: &Q) -> (usize, bool)
second			        fn second<A, B>((_, b): (A, B)) -> B { b }
second			        fn second<A, B>((_, b): (A, B)) -> B { b }
set			    pub fn set(&mut self, i: usize, x: bool) 
set			pub mod set;
set_all			    pub fn set_all(&mut self) 
set_len			    pub unsafe fn set_len(&mut self, len: usize) 
shrink_to_fit			    pub fn shrink_to_fit(&mut self) 
shrink_to_fit			    pub fn shrink_to_fit(&mut self) 
shrink_to_fit			    pub fn shrink_to_fit(&mut self) 
shrink_to_fit			    pub fn shrink_to_fit(&mut self) 
shrink_to_fit			    pub fn shrink_to_fit(&mut self) 
sift_down			    fn sift_down(&mut self, pos: usize) 
sift_down_range			    fn sift_down_range(&mut self, mut pos: usize, end: usize) 
sift_up			    fn sift_up(&mut self, start: usize, mut pos: usize) 
size_hint			    fn size_hint(&self) -> (usize, Option<usize>) { self.iter.size_hint() }
size_hint			    fn size_hint(&self) -> (usize, Option<usize>) 
size_hint			    fn size_hint(&self) -> (usize, Option<usize>) { self.inner.size_hint() }
size_hint			    fn size_hint(&self) -> (usize, Option<usize>) 
size_hint			    fn size_hint(&self) -> (usize, Option<usize>) { self.iter.size_hint() }
size_hint			    fn size_hint(&self) -> (usize, Option<usize>) 
size_hint			    fn size_hint(&self) -> (usize, Option<usize>) 
size_hint			    fn size_hint(&self) -> (usize, Option<usize>) 
size_hint			    fn size_hint(&self) -> (usize, Option<usize>) { self.encoder.size_hint() }
size_hint			    fn size_hint(&self) -> (usize, Option<usize>) 
size_hint			    fn size_hint(&self) -> (usize, Option<usize>) 
size_hint			    fn size_hint(&self) -> (usize, Option<usize>) 
size_hint			            fn size_hint(&self) -> (usize, Option<usize>) 
size_hint			    fn size_hint(&self) -> (usize, Option<usize>) { self.iter.size_hint() }
slice			pub mod slice;
slice_chars			    pub fn slice_chars(&self, begin: usize, end: usize) -> &str 
slice_from			            pub fn slice_from(self, min_key: &K) -> 
slice_shift_char			    pub fn slice_shift_char(&self) -> Option<(char, &str)> 
slice_to			            pub fn slice_to(self, max_key: &K) -> 
slice_unchecked			    pub unsafe fn slice_unchecked(&self, begin: usize, end: usize) -> &str 
some			    fn some(n: &mut T) -> Rawlink<T> 
sort			    pub fn sort(&mut self) where T: Ord 
sort_by			    pub fn sort_by<F>(&mut self, compare: F) where F: FnMut(&T, &T) -> Ordering 
split			    fn split(&mut self) -> (K, V, Node<K, V>) 
split			    pub fn split<F>(&self, pred: F) -> Split<T, F> where F: FnMut(&T) -> bool 
split			    pub fn split<'a, P: Pattern<'a>>(&'a self, pat: P) -> Split<'a, P> 
split_at			    pub fn split_at(&self, mid: usize) -> (&[T], &[T]) 
split_at_mut			    pub fn split_at_mut(&mut self, mid: usize) -> (&mut [T], &mut [T]) 
split_mut			    pub fn split_mut<F>(&mut self, pred: F) -> SplitMut<T, F> where F: FnMut(&T) -> bool 
split_off			    pub fn split_off(&mut self, at: usize) -> LinkedList<T> 
split_off			    pub fn split_off(&mut self, at: usize) -> Self 
split_off			    pub fn split_off(&mut self, at: usize) -> Self 
split_off			    pub fn split_off(&mut self, at: usize) -> Self 
split_terminator			    pub fn split_terminator<'a, P: Pattern<'a>>(&'a self, pat: P) -> SplitTerminator<'a, P> 
splitn			    pub fn splitn<F>(&self, n: usize, pred: F) -> SplitN<T, F> where F: FnMut(&T) -> bool 
splitn			    pub fn splitn<'a, P: Pattern<'a>>(&'a self, count: usize, pat: P) -> SplitN<'a, P> 
splitn_mut			    pub fn splitn_mut<F>(&mut self, n: usize, pred: F) -> SplitNMut<T, F>
stack			mod stack 
starts_with			    pub fn starts_with(&self, needle: &[T]) -> bool where T: PartialEq 
starts_with			    pub fn starts_with<'a, P: Pattern<'a>>(&'a self, pat: P) -> bool 
std			mod std 
steal_leftward			    unsafe fn steal_leftward(&mut self) 
steal_rightward			    unsafe fn steal_rightward(&mut self) 
step			    unsafe fn step<T>(ptr: &mut *mut T) -> *mut T 
str			pub mod str;
str			impl str 
string			pub mod string;
sub			    fn sub(self, rhs: &BTreeSet<T>) -> BTreeSet<T> 
sub			    fn sub(self, e: EnumSet<E>) -> EnumSet<E> 
subslice_offset			    pub fn subslice_offset(&self, inner: &str) -> usize 
swap			    pub fn swap(&mut self, a: usize, b: usize) 
swap			    pub fn swap(&mut self, i: usize, j: usize) 
swap_back_remove			    pub fn swap_back_remove(&mut self, index: usize) -> Option<T> 
swap_front_remove			    pub fn swap_front_remove(&mut self, index: usize) -> Option<T> 
swap_remove			    pub fn swap_remove(&mut self, index: usize) -> T 
symmetric_difference			    pub fn symmetric_difference<'a>(&'a self, other: &'a BitSet) -> SymmetricDifference<'a> 
symmetric_difference			    pub fn symmetric_difference<'a>(&'a self, other: &'a BTreeSet<T>)
symmetric_difference_with			    pub fn symmetric_difference_with(&mut self, other: &BitSet) 
tail			    pub fn tail(&self) -> &[T] 
tail_mut			    pub fn tail_mut(&mut self) -> &mut [T] 
take			    fn take(&mut self) -> Rawlink<T> 
test			mod test 
test			        fn test(back: bool) 
test			mod test 
to_bytes			    pub fn to_bytes(&self) -> Vec<u8> 
to_lowercase			    pub fn to_lowercase(&self) -> String 
to_mut			    pub fn to_mut(&mut self) -> &mut <B as ToOwned>::Owned 
to_owned			    fn to_owned(&self) -> Self::Owned;
to_owned			    fn to_owned(&self) -> T { self.clone() }
to_owned			    fn to_owned(&self) -> Vec<T> { panic!("not available with cfg(test)") }
to_owned			    fn to_owned(&self) -> Vec<T> { self.to_vec() }
to_owned			    fn to_owned(&self) -> String 
to_string			    fn to_string(&self) -> String 
to_string			    fn to_string(&self) -> String;
to_uppercase			    pub fn to_uppercase(&self) -> String 
to_usize			    fn to_usize(&self) -> usize;
to_vec			    pub fn to_vec(&self) -> Vec<T> where T: Clone 
to_vec			    pub fn to_vec<T>(s: &[T]) -> Vec<T> where T: Clone 
traverse			    fn traverse(node: &'a Node<K, V>) -> Traversal<'a, K, V> 
traverse			    fn traverse(node: &'a mut Node<K, V>) -> MutTraversal<'a, K, V> 
traverse			    fn traverse(node: N) -> Self;
traverse			    fn traverse(node: Node<K, V>) -> MoveTraversal<K, V> 
trim			    pub fn trim(&self) -> &str 
trim_left			    pub fn trim_left(&self) -> &str 
trim_left_matches			    pub fn trim_left_matches<'a, P: Pattern<'a>>(&'a self, pat: P) -> &'a str 
trim_matches			    pub fn trim_matches<'a, P: Pattern<'a>>(&'a self, pat: P) -> &'a str
trim_right			    pub fn trim_right(&self) -> &str 
trim_right_matches			    pub fn trim_right_matches<'a, P: Pattern<'a>>(&'a self, pat: P) -> &'a str
truncate			    pub fn truncate(&mut self, len: usize) 
truncate			    pub fn truncate(&mut self, new_len: usize) 
truncate			    pub fn truncate(&mut self, len: usize) 
truncate			    pub fn truncate(&mut self, len: usize) 
union			    pub fn union(&mut self, other: &BitVec) -> bool 
union			    pub fn union<'a>(&'a self, other: &'a BitSet) -> Union<'a> 
union			    pub fn union<'a>(&'a self, other: &'a BTreeSet<T>) -> Union<'a, T> 
union			    pub fn union(&self, e: EnumSet<E>) -> EnumSet<E> 
union_with			    pub fn union_with(&mut self, other: &BitSet) 
unsafe_get			        fn unsafe_get(xs: &[u8], i: usize) -> u8 
utf16_units			    pub fn utf16_units(&self) -> Utf16Units 
utf8_error			    pub fn utf8_error(&self) -> Utf8Error { self.error }
val_mut			    pub fn val_mut(&'a mut self) -> &'a mut V 
vals			    pub fn vals<'a>(&'a self) -> &'a [V] 
vals_mut			    pub fn vals_mut<'a>(&'a mut self) -> &'a mut [V] 
values			    pub fn values<'a>(&'a self) -> Values<'a, K, V> 
values			    pub fn values<'r>(&'r self) -> Values<'r, V> 
vec			pub mod vec;
vec_deque			pub mod vec_deque;
vec_map			pub mod vec_map;
width			    pub fn width(&self, is_cjk: bool) -> usize 
windows			    pub fn windows(&self, size: usize) -> Windows<T> 
with			        pub fn with<T, F: for<'id> FnOnce(Pusher<'id, 'a, K, V>,
with_b			    pub fn with_b(b: usize) -> BTreeMap<K, V> 
with_b			    pub fn with_b(b: usize) -> BTreeSet<T> 
with_capacity			    pub fn with_capacity(capacity: usize) -> BinaryHeap<T> 
with_capacity			    pub fn with_capacity(nbits: usize) -> BitSet 
with_capacity			    pub fn with_capacity(nbits: usize) -> BitVec 
with_capacity			    pub fn with_capacity(capacity: usize) -> String 
with_capacity			    pub fn with_capacity(capacity: usize) -> Vec<T> 
with_capacity			    pub fn with_capacity(n: usize) -> VecDeque<T> 
with_capacity			    pub fn with_capacity(capacity: usize) -> VecMap<V> 
words			    pub fn words(&self) -> Words 
wrap_add			    fn wrap_add(&self, idx: usize, addend: usize) -> usize 
wrap_index			    fn wrap_index(&self, idx: usize) -> usize { wrap_index(idx, self.cap) }
wrap_index			fn wrap_index(index: usize, size: usize) -> usize 
wrap_sub			    fn wrap_sub(&self, idx: usize, subtrahend: usize) -> usize 
write_str			    fn write_str(&mut self, s: &str) -> fmt::Result 
