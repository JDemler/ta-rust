DefaultLogger			struct DefaultLogger 
Drop for DefaultLogger			impl Drop for DefaultLogger 
LogDirective			pub struct LogDirective 
LogLevel			pub struct LogLevel(pub u32);
LogLocation			pub struct LogLocation 
LogRecord			pub struct LogRecord<'a> 
Logger			pub trait Logger 
Logger for DefaultLogger			impl Logger for DefaultLogger 
directive			mod directive;
drop			    fn drop(&mut self) 
enabled			fn enabled(level: u32,
fmt			    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result 
fmt::Display for LogLevel			impl fmt::Display for LogLevel 
init			fn init() 
log			    fn log(&mut self, record: &LogRecord) 
log			    fn log(&mut self, record: &LogRecord);
log			pub fn log(level: u32, loc: &'static LogLocation, args: fmt::Arguments) 
log_level			pub fn log_level() -> u32 { unsafe { LOG_LEVEL } }
macros			pub mod macros;
match_beginning			    fn match_beginning() 
match_beginning_longest_match			    fn match_beginning_longest_match() 
match_default			    fn match_default() 
match_full_path			    fn match_full_path() 
mod_enabled			pub fn mod_enabled(level: u32, module: &str) -> bool 
no_match			    fn no_match() 
parse_log_level			fn parse_log_level(level: &str) -> Option<u32> 
parse_logging_spec			pub fn parse_logging_spec(spec: &str) -> (Vec<LogDirective>, Option<String>) 
parse_logging_spec_empty_log_level			    fn parse_logging_spec_empty_log_level() 
parse_logging_spec_empty_with_filter			    fn parse_logging_spec_empty_with_filter() 
parse_logging_spec_global			    fn parse_logging_spec_global() 
parse_logging_spec_invalid_crate			    fn parse_logging_spec_invalid_crate() 
parse_logging_spec_invalid_crate_filter			    fn parse_logging_spec_invalid_crate_filter() 
parse_logging_spec_invalid_log_level			    fn parse_logging_spec_invalid_log_level() 
parse_logging_spec_string_log_level			    fn parse_logging_spec_string_log_level() 
parse_logging_spec_valid			    fn parse_logging_spec_valid() 
parse_logging_spec_valid_filter			    fn parse_logging_spec_valid_filter() 
set_logger			pub fn set_logger(logger: Box<Logger + Send>) -> Option<Box<Logger + Send>> 
tests			mod tests 
tests			mod tests 
zero_level			    fn zero_level() 
