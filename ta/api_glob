CharSpecifier			enum CharSpecifier 
Iterator			impl Iterator<Path> for Paths 
MatchOptions			impl MatchOptions 
MatchOptions			pub struct MatchOptions 
MatchResult			enum MatchResult 
Paths			pub struct Paths 
Pattern			impl Pattern 
Pattern			pub struct Pattern 
PatternToken			enum PatternToken 
chars_eq			fn chars_eq(a: char, b: char, case_sensitive: bool) -> bool 
check_windows_verbatim			    fn check_windows_verbatim(_: &Path) -> bool { false }
check_windows_verbatim			    fn check_windows_verbatim(p: &Path) -> bool { path::windows::is_verbatim(p) }
escape			    pub fn escape(s: &str) -> String 
fill_todo			fn fill_todo(todo: &mut Vec<(Path, uint)>, patterns: &[Pattern], idx: uint, path: &Path,
glob			pub fn glob(pattern: &str) -> Paths 
glob_with			pub fn glob_with(pattern: &str, options: MatchOptions) -> Paths 
in_char_specifiers			fn in_char_specifiers(specifiers: &[CharSpecifier], c: char, options: MatchOptions) -> bool 
list_dir_sorted			fn list_dir_sorted(path: &Path) -> Option<Vec<Path>> 
matches			    pub fn matches(&self, str: &str) -> bool 
matches_from			    fn matches_from(&self,
matches_path			    pub fn matches_path(&self, path: &Path) -> bool 
matches_path_with			    pub fn matches_path_with(&self, path: &Path, options: MatchOptions) -> bool 
matches_with			    pub fn matches_with(&self, str: &str, options: MatchOptions) -> bool 
new			    pub fn new() -> MatchOptions 
new			    pub fn new(pattern: &str) -> Pattern 
next			    fn next(&mut self) -> Option<Path> 
parse_char_specifiers			fn parse_char_specifiers(s: &[char]) -> Vec<CharSpecifier> 
pattern_as_str			    fn pattern_as_str(pattern: &Pattern) -> Option<String> 
test			mod test 
