Arena			impl<'a> Arena<'a> 
Arena			impl<'longer_than_self> Arena<'longer_than_self> 
Arena			pub struct Arena<'longer_than_self> 
Chunk			impl Chunk 
Chunk			struct Chunk 
Drop for Arena			impl<'longer_than_self> Drop for Arena<'longer_than_self> 
Drop for TypedArena			impl<T> Drop for TypedArena<T> 
EI			        enum EI<'e> { I(Inner), O(Outer<'e>) }
Inner			        struct Inner { value: u8 }
Noncopy			    struct Noncopy 
Outer			        struct Outer<'a> { inner: &'a Inner }
Point			    struct Point 
TypedArena			impl<T> TypedArena<T> 
TypedArena			pub struct TypedArena<T> 
TypedArenaChunk			impl<T> TypedArenaChunk<T> 
TypedArenaChunk			struct TypedArenaChunk<T> 
Wrap			        impl<'a> Wrap<'a> 
Wrap			        struct Wrap<'a>(TypedArena<EI<'a>>);
alloc			    pub fn alloc(&self, object: T) -> &mut T 
alloc			    pub fn alloc<T:'longer_than_self, F>(&self, op: F) -> &mut T where F: FnOnce() -> T 
alloc_copy			    fn alloc_copy<T, F>(&self, op: F) -> &mut T where F: FnOnce() -> T 
alloc_copy_grow			    fn alloc_copy_grow(&self, n_bytes: usize, align: usize) -> *const u8 
alloc_copy_inner			    fn alloc_copy_inner(&self, n_bytes: usize, align: usize) -> *const u8 
alloc_inner			            fn alloc_inner<F:Fn() -> Inner>(&self, f: F) -> &Inner 
alloc_noncopy			    fn alloc_noncopy<T, F>(&self, op: F) -> &mut T where F: FnOnce() -> T 
alloc_noncopy_grow			    fn alloc_noncopy_grow(&self, n_bytes: usize,
alloc_noncopy_inner			    fn alloc_noncopy_inner(&self, n_bytes: usize,
alloc_outer			            fn alloc_outer<F:Fn() -> Outer<'a>>(&self, f: F) -> &Outer 
as_ptr			    unsafe fn as_ptr(&self) -> *const u8 
bench_copy			    pub fn bench_copy(b: &mut Bencher) 
bench_copy_nonarena			    pub fn bench_copy_nonarena(b: &mut Bencher) 
bench_copy_old_arena			    pub fn bench_copy_old_arena(b: &mut Bencher) 
bench_noncopy			    pub fn bench_noncopy(b: &mut Bencher) 
bench_noncopy_nonarena			    pub fn bench_noncopy_nonarena(b: &mut Bencher) 
bench_noncopy_old_arena			    pub fn bench_noncopy_old_arena(b: &mut Bencher) 
bitpack_tydesc_ptr			fn bitpack_tydesc_ptr(p: *const TyDesc, is_done: bool) -> usize 
calculate_size			fn calculate_size<T>(capacity: usize) -> usize 
capacity			    fn capacity(&self) -> usize 
chunk			fn chunk(size: usize, is_copy: bool) -> Chunk 
chunk_size			    fn chunk_size(&self) -> usize 
destroy			    unsafe fn destroy(&mut self, len: usize) 
destroy_chunk			unsafe fn destroy_chunk(chunk: &Chunk) 
drop			    fn drop(&mut self) 
end			    fn end(&self) -> *const u8 
grow			    fn grow(&self) 
new			    pub fn new() -> Arena<'a> 
new			    pub fn new() -> TypedArena<T> 
new			    unsafe fn new(next: *mut TypedArenaChunk<T>, capacity: usize)
new_with_size			    pub fn new_with_size(initial_size: usize) -> Arena<'a> 
round_up			fn round_up(base: usize, align: usize) -> usize 
start			    fn start(&self) -> *const u8 
tests			mod tests 
un_bitpack_tydesc_ptr			fn un_bitpack_tydesc_ptr(p: usize) -> (*const TyDesc, bool) 
with_capacity			    pub fn with_capacity(capacity: usize) -> TypedArena<T> 
