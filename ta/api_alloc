AnyOwnExt			impl AnyOwnExt for Box<Any> 
AnyOwnExt			pub trait AnyOwnExt 
AnySendOwnExt			impl AnySendOwnExt for Box<Any+Send> 
AnySendOwnExt			pub trait AnySendOwnExt 
Arc			pub struct Arc<T> 
ArcInner			struct ArcInner<T> 
Box			pub struct Box<T>(*mut T);
Canary			    struct Canary(*mut atomics::AtomicUint);
Cycle			        struct Cycle 
Cycle			        struct Cycle 
Drop			    impl Drop for Canary
Gadget			struct Gadget 
Owner			struct Owner 
Rc			pub struct Rc<T> 
RcBox			struct RcBox<T> 
RcBoxPtr			trait RcBoxPtr<T> 
Weak			pub struct Weak<T> 
Weak			pub struct Weak<T> 
_aligned_free			        fn _aligned_free(ptr: *mut c_void);
_aligned_malloc			        fn _aligned_malloc(size: size_t, align: size_t) -> *mut c_void;
_aligned_realloc			        fn _aligned_realloc(block: *mut c_void, size: size_t,
align_to			fn align_to(size: uint, align: uint) -> uint 
alloc_owned_small			    fn alloc_owned_small(b: &mut Bencher) 
allocate			    pub unsafe fn allocate(size: uint, align: uint) -> *mut u8 
allocate			pub unsafe fn allocate(size: uint, align: uint) -> *mut u8 
any_move			    fn any_move() 
arc			pub mod arc;
bench			mod bench 
clone			    fn clone(&self) -> Arc<T> 
clone			    fn clone(&self) -> Weak<T> 
clone			    fn clone(&self) -> Box<T> { box {(**self).clone()} }
clone			    fn clone(&self) -> Rc<T> 
clone			    fn clone(&self) -> Weak<T> 
clone_from			    fn clone_from(&mut self, source: &Box<T>) 
closure_exchange_malloc			unsafe fn closure_exchange_malloc(drop_glue: fn(*mut u8), size: uint,
cmp			    fn cmp(&self, other: &Box<T>) -> Ordering { (**self).cmp(*other) }
cmp			    fn cmp(&self, other: &Rc<T>) -> Ordering { (**self).cmp(&**other) }
deallocate			    pub unsafe fn deallocate(ptr: *mut u8, _size: uint, _align: uint) 
deallocate			    pub unsafe fn deallocate(ptr: *mut u8, _size: uint, align: uint) 
deallocate			pub unsafe fn deallocate(ptr: *mut u8, size: uint, align: uint) 
dec_strong			    fn dec_strong(&self) { self.inner().strong.set(self.strong() - 1); }
dec_weak			    fn dec_weak(&self) { self.inner().weak.set(self.weak() - 1); }
default			    fn default() -> Box<T> { box Default::default() }
default			    fn default() -> Rc<T> 
deref			    fn deref<'a>(&'a self) -> &'a T 
deref			    fn deref<'a>(&'a self) -> &'a T 
downgrade			    pub fn downgrade(&self) -> Weak<T> 
downgrade			    pub fn downgrade(&self) -> Weak<T> 
drop			        fn drop(&mut self) 
drop			    fn drop(&mut self) 
drop			    fn drop(&mut self) 
drop_arc			    fn drop_arc() 
drop_arc_weak			    fn drop_arc_weak() 
eq			    fn eq(&self, other: &Box<T>) -> bool { *(*self) == *(*other) }
eq			    fn eq(&self, other: &Rc<T>) -> bool { **self == **other }
exchange_free			unsafe fn exchange_free(ptr: *mut u8, size: uint, align: uint) 
exchange_malloc			unsafe fn exchange_malloc(size: uint, align: uint) -> *mut u8 
fixme_14344_be_sure_to_link_to_collections			pub fn fixme_14344_be_sure_to_link_to_collections() {}
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			impl fmt::Show for Box<Any> 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
gc_inside			    fn gc_inside() 
ge			    fn ge(&self, other: &Box<T>) -> bool { *(*self) >= *(*other) }
ge			    fn ge(&self, other: &Rc<T>) -> bool { **self >= **other }
get_box_size			pub fn get_box_size(body_size: uint, body_align: uint) -> uint 
gt			    fn gt(&self, other: &Box<T>) -> bool { *(*self) > *(*other) }
gt			    fn gt(&self, other: &Rc<T>) -> bool { **self > **other }
heap			pub mod heap;
imp			mod imp 
inc_strong			    fn inc_strong(&self) { self.inner().strong.set(self.strong() + 1); }
inc_weak			    fn inc_weak(&self) { self.inner().weak.set(self.weak() + 1); }
inner			    fn inner<'a>(&'a self) -> &'a ArcInner<T> 
inner			    fn inner<'a>(&'a self) -> &'a RcBox<T> { unsafe { &(*self._ptr) } }
inner			    fn inner<'a>(&'a self) -> &'a RcBox<T>;
je_dallocx			        fn je_dallocx(ptr: *mut c_void, flags: c_int);
je_malloc_stats_print			        fn je_malloc_stats_print(write_cb: Option<extern "C" fn(cbopaque: *mut c_void,
je_mallocx			        fn je_mallocx(size: size_t, flags: c_int) -> *mut c_void;
je_nallocx			        fn je_nallocx(size: size_t, flags: c_int) -> size_t;
je_rallocx			        fn je_rallocx(ptr: *mut c_void, size: size_t,
je_xallocx			        fn je_xallocx(ptr: *mut c_void, size: size_t, extra: size_t,
le			    fn le(&self, other: &Box<T>) -> bool { *(*self) <= *(*other) }
le			    fn le(&self, other: &Rc<T>) -> bool { **self <= **other }
libc_heap			pub mod libc_heap;
lt			    fn lt(&self, other: &Box<T>) -> bool { *(*self) < *(*other) }
lt			    fn lt(&self, other: &Rc<T>) -> bool { **self < **other }
main			fn main() 
make_unique			    pub fn make_unique<'a>(&'a mut self) -> &'a mut T 
make_unique			    pub fn make_unique<'a>(&'a mut self) -> &'a mut T 
malloc_raw			pub unsafe fn malloc_raw(size: uint) -> *mut u8 
mallocx_align			    fn mallocx_align(a: uint) -> c_int { a.trailing_zeros() as c_int }
manually_share_arc			    fn manually_share_arc() 
move			    fn move<T: 'static>(self) -> Result<Box<T>, Box<Any>> 
move			    fn move<T: 'static>(self) -> Result<Box<T>, Self>;
move_send			    fn move_send<T: 'static>(self) -> Result<Box<T>, Box<Any+Send>> 
move_send			    fn move_send<T: 'static>(self) -> Result<Box<T>, Self>;
ne			    fn ne(&self, other: &Box<T>) -> bool { *(*self) != *(*other) }
ne			    fn ne(&self, other: &Rc<T>) -> bool { **self != **other }
new			    pub fn new(data: T) -> Arc<T> 
new			    pub fn new(value: T) -> Rc<T> 
oom			fn oom() -> ! 
owned			pub mod owned;
partial_cmp			    fn partial_cmp(&self, other: &Box<T>) -> Option<Ordering> 
partial_cmp			    fn partial_cmp(&self, other: &Rc<T>) -> Option<Ordering> 
posix_memalign			        fn posix_memalign(memptr: *mut *mut libc::c_void,
rc			pub mod rc;
realloc_raw			pub unsafe fn realloc_raw(ptr: *mut u8, size: uint) -> *mut u8 
reallocate			    pub unsafe fn reallocate(ptr: *mut u8, size: uint, align: uint,
reallocate			pub unsafe fn reallocate(ptr: *mut u8, size: uint, align: uint,
reallocate_inplace			    pub unsafe fn reallocate_inplace(_ptr: *mut u8, _size: uint, _align: uint,
reallocate_inplace			    pub unsafe fn reallocate_inplace(ptr: *mut u8, size: uint, align: uint,
reallocate_inplace			pub unsafe fn reallocate_inplace(ptr: *mut u8, size: uint, align: uint,
stats_print			    pub fn stats_print() 
stats_print			    pub fn stats_print() {}
stats_print			pub fn stats_print() 
std			mod std 
strong			    fn strong(&self) -> uint { self.inner().strong.get() }
test			mod test 
tests			mod tests 
tests			mod tests 
upgrade			    pub fn upgrade(&self) -> Option<Arc<T>> 
upgrade			    pub fn upgrade(&self) -> Option<Rc<T>> 
usable_size			    pub fn usable_size(size: uint, _align: uint) -> uint 
usable_size			    pub fn usable_size(size: uint, align: uint) -> uint 
usable_size			pub fn usable_size(size: uint, align: uint) -> uint 
util			pub mod util;
weak			    fn weak(&self) -> uint { self.inner().weak.get() }
weak_self_cyclic			    fn weak_self_cyclic() 
weak_self_cyclic			    fn weak_self_cyclic() 
