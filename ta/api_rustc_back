Archive			impl<'a> Archive<'a> 
Archive			pub struct Archive<'a> 
ArchiveBuilder			impl<'a> ArchiveBuilder<'a> 
ArchiveBuilder			pub struct ArchiveBuilder<'a> 
ArchiveConfig			pub struct ArchiveConfig<'a> 
Default for TargetOptions			impl Default for TargetOptions 
Digest			pub trait Digest 
Digest for Sha256			impl Digest for Sha256 
Engine256			impl Engine256 
Engine256			struct Engine256 
Engine256State			impl Engine256State 
Engine256State			struct Engine256State 
FixedBuffer			trait FixedBuffer 
FixedBuffer for FixedBuffer64			impl FixedBuffer for FixedBuffer64 
FixedBuffer64			impl FixedBuffer64 
FixedBuffer64			struct FixedBuffer64 
InternKey			    trait InternKey { fn get_content(self) -> token::InternedString; }
InternKey for Ident			    impl InternKey for Ident 
InternKey for Name			    impl InternKey for Name 
RPathConfig			pub struct RPathConfig<F, G> where
SawAbiComponent			    enum SawAbiComponent<'a> 
SawExprComponent			    pub enum SawExprComponent<'a> 
SawStmtComponent			    pub enum SawStmtComponent 
Sha256			impl Sha256 
Sha256			pub struct Sha256 
StandardPadding			trait StandardPadding 
StandardPadding for T			impl <T: FixedBuffer> StandardPadding for T 
StrictVersionHashVisitor			    pub struct StrictVersionHashVisitor<'a> 
Svh			impl Svh 
Svh			pub struct Svh 
Target			impl Target 
Target			pub struct Target 
TargetOptions			pub struct TargetOptions 
Test			    struct Test 
ToBits			trait ToBits 
ToBits for u64			impl ToBits for u64 
Visitor for StrictVersionHashVisitor			    impl<'a, 'v> Visitor<'v> for StrictVersionHashVisitor<'a> 
aarch64_unknown_linux_gnu			mod aarch64_unknown_linux_gnu;
abi			pub mod abi;
add_archive			    fn add_archive<F>(&mut self, archive: &Path, name: &str, mut skip: F) -> io::IoResult<()> where
add_bytes_to_bits			fn add_bytes_to_bits<T: Int + ToBits>(bits: T, bytes: T) -> T 
add_file			    pub fn add_file(&mut self, file: &Path) -> io::IoResult<()> 
add_native_library			    pub fn add_native_library(&mut self, name: &str) -> io::IoResult<()> 
add_rlib			    pub fn add_rlib(&mut self, rlib: &Path, name: &str,
adjust_abi			    pub fn adjust_abi(&self, abi: abi::Abi) -> abi::Abi 
apple_base			mod apple_base;
archive			pub mod archive;
arm			pub mod arm;
arm_apple_ios			mod arm_apple_ios;
arm_linux_androideabi			mod arm_linux_androideabi;
arm_unknown_linux_gnueabi			mod arm_unknown_linux_gnueabi;
arm_unknown_linux_gnueabihf			mod arm_unknown_linux_gnueabihf;
as_str			    pub fn as_str<'a>(&'a self) -> &'a str 
bench			mod bench 
build			    pub fn build(self) -> Archive<'a> 
calculate			    pub fn calculate(metadata: &Vec<String>, krate: &ast::Crate) -> Svh 
ch			        fn ch(x: u32, y: u32, z: u32) -> u32 
content			    fn content<K:InternKey>(k: K) -> token::InternedString { k.get_content() }
create			    pub fn create(config: ArchiveConfig<'a>) -> ArchiveBuilder<'a> 
default			    fn default() -> TargetOptions 
dragonfly_base			mod dragonfly_base;
extend			    pub fn extend(self) -> ArchiveBuilder<'a> 
files			    pub fn files(&self) -> Vec<String> 
find_library			pub fn find_library(name: &str, osprefix: &str, ossuffix: &str,
finish			    fn finish(&mut self) 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt::Show for Svh			impl fmt::Show for Svh 
fmt::String for Svh			impl fmt::String for Svh 
freebsd_base			mod freebsd_base;
from_json			    pub fn from_json(obj: Json) -> Target 
fs			pub mod fs;
full_buffer			    fn full_buffer<'s>(&'s mut self) -> &'s [u8] 
full_buffer			    fn full_buffer<'s>(&'s mut self) -> &'s [u8];
get_content			        fn get_content(self) -> token::InternedString { token::get_ident(self) }
get_content			        fn get_content(self) -> token::InternedString { token::get_name(self) }
get_install_prefix_rpath			fn get_install_prefix_rpath<F, G>(config: RPathConfig<F, G>) -> String where
get_rpath_flags			pub fn get_rpath_flags<F, G>(config: RPathConfig<F, G>) -> Vec<String> where
get_rpath_relative_to_output			fn get_rpath_relative_to_output<F, G>(config: &mut RPathConfig<F, G>, lib: &Path) -> String where
get_rpaths			fn get_rpaths<F, G>(mut config: RPathConfig<F, G>, libs: &[Path]) -> Vec<String> where
get_rpaths_relative_to_output			fn get_rpaths_relative_to_output<F, G>(config: &mut RPathConfig<F, G>,
get_target_strs			pub fn get_target_strs(target_triple: String, target_os: abi::Os) -> target_strs::t 
get_target_strs			pub fn get_target_strs(target_triple: String, target_os: abi::Os) -> target_strs::t 
get_target_strs			pub fn get_target_strs(target_triple: String, target_os: abi::Os) -> target_strs::t 
get_target_strs			pub fn get_target_strs(target_triple: String, target_os: abi::Os)
get_target_strs			pub fn get_target_strs(target_triple: String, target_os: abi::Os) -> target_strs::t 
hex			        fn hex(b: u64) -> char 
i386_apple_ios			mod i386_apple_ios;
i686_apple_darwin			mod i686_apple_darwin;
i686_pc_windows_gnu			mod i686_pc_windows_gnu;
i686_unknown_dragonfly			mod i686_unknown_dragonfly;
i686_unknown_linux_gnu			mod i686_unknown_linux_gnu;
input			    fn input(&mut self, d: &[u8]) 
input			    fn input(&mut self, input: &[u8]) 
input			    fn input(&mut self, input: &[u8]);
input			    fn input<F>(&mut self, input: &[u8], func: F) where
input			    fn input<F>(&mut self, input: &[u8], mut func: F) where
input_str			    fn input_str(&mut self, input: &str) 
linux_base			mod linux_base;
load_file			        fn load_file(path: &Path) -> Result<Target, String> 
log_rpaths			    fn log_rpaths(desc: &str, rpaths: &[String]) 
macro_name			            fn macro_name(mac: &Mac) -> token::InternedString 
maj			        fn maj(x: u32, y: u32, z: u32) -> u32 
make			    pub fn make<'a>(st: &'a mut SipState) -> StrictVersionHashVisitor<'a> 
minimize_rpaths			fn minimize_rpaths(rpaths: &[String]) -> Vec<String> 
mips			pub mod mips;
mips_unknown_linux_gnu			mod mips_unknown_linux_gnu;
mipsel			pub mod mipsel;
mipsel_unknown_linux_gnu			mod mipsel_unknown_linux_gnu;
new			    fn new(archive: Archive<'a>) -> ArchiveBuilder<'a> 
new			    fn new(config: ArchiveConfig<'a>) -> Archive<'a> 
new			    fn new() -> FixedBuffer64 
new			    fn new(h: &[u32; 8]) -> Engine256 
new			    fn new(h: &[u32; 8]) -> Engine256State 
new			    pub fn new() -> Sha256 
new			    pub fn new(hash: &str) -> Svh 
next			    fn next<'s>(&'s mut self, len: uint) -> &'s mut [u8] 
next			    fn next<'s>(&'s mut self, len: uint) -> &'s mut [u8];
open			    pub fn open(config: ArchiveConfig<'a>) -> Archive<'a> 
opts			pub fn opts() -> TargetOptions 
opts			pub fn opts() -> TargetOptions 
opts			pub fn opts() -> TargetOptions 
opts			pub fn opts() -> TargetOptions 
opts			pub fn opts() -> TargetOptions 
output_bits			    fn output_bits(&self) -> uint { 256 }
output_bits			    fn output_bits(&self) -> uint;
position			    fn position(&self) -> uint { self.buffer_idx }
position			    fn position(&self) -> uint;
process_block			    fn process_block(&mut self, data: &[u8]) 
read_u32_be			fn read_u32_be(input: &[u8]) -> u32 
read_u32v_be			fn read_u32v_be(dst: &mut[u32], input: &[u8]) 
realpath			pub fn realpath(original: &Path) -> io::IoResult<Path> 
realpath_works			    fn realpath_works() 
realpath_works_tricky			    fn realpath_works_tricky() 
remaining			    fn remaining(&self) -> uint { 64 - self.buffer_idx }
remaining			    fn remaining(&self) -> uint;
remove_file			    pub fn remove_file(&mut self, file: &str) 
reset			    fn reset(&mut self) 
reset			    fn reset(&mut self);
reset			    fn reset(&mut self, h: &[u32; 8]) 
result			    fn result(&mut self, out: &mut [u8]) 
result			    fn result(&mut self, out: &mut [u8]);
result_bytes			    fn result_bytes(&mut self) -> Vec<u8> 
result_str			    fn result_str(&mut self) -> String 
rpath			pub mod rpath;
rpaths_to_flags			fn rpaths_to_flags(rpaths: &[String]) -> Vec<String> 
run_ar			fn run_ar(handler: &ErrorHandler, maybe_ar_prog: &Option<String>,
saw_expr			    fn saw_expr<'a>(node: &'a Expr_) -> SawExprComponent<'a> 
saw_stmt			    fn saw_stmt(node: &Stmt_) -> SawStmtComponent 
search			    pub fn search(target: &str) -> Result<Target, String> 
sha2			pub mod sha2;
sha256_10			    pub fn sha256_10(b: &mut Bencher) 
sha256_1k			    pub fn sha256_1k(b: &mut Bencher) 
sha256_64k			    pub fn sha256_64k(b: &mut Bencher) 
sigma0			        fn sigma0(x: u32) -> u32 
sigma1			        fn sigma1(x: u32) -> u32 
size			    fn size(&self) -> uint { 64 }
size			    fn size(&self) -> uint;
standard_padding			    fn standard_padding<F>(&mut self, rem: uint, func: F) where F: FnMut(&[u8]);
standard_padding			    fn standard_padding<F>(&mut self, rem: uint, mut func: F) where F: FnMut(&[u8]) 
sum0			        fn sum0(x: u32) -> u32 
sum1			        fn sum1(x: u32) -> u32 
svh			pub mod svh;
svh_visitor			mod svh_visitor 
t			pub struct t 
target			pub mod target;
target			pub fn target() -> Target 
target			pub fn target() -> Target 
target			pub fn target() -> Target 
target			pub fn target() -> Target 
target			pub fn target() -> Target 
target			pub fn target() -> Target 
target			pub fn target() -> Target 
target			pub fn target() -> Target 
target			pub fn target() -> Target 
target			pub fn target() -> Target 
target			pub fn target() -> Target 
target			pub fn target() -> Target 
target			pub fn target() -> Target 
target			pub fn target() -> Target 
target			pub fn target() -> Target 
target			pub fn target() -> Target 
target			pub fn target() -> Target 
target_strs			pub mod target_strs;
test			mod test 
test			mod test 
tests			mod tests 
to_bits			    fn to_bits(self) -> (Self, Self);
to_bits			    fn to_bits(self) -> (u64, u64) 
update_symbols			    pub fn update_symbols(&mut self) 
visit_arm			        fn visit_arm(&mut self, a: &Arm) 
visit_block			        fn visit_block(&mut self, b: &Block) 
visit_decl			        fn visit_decl(&mut self, d: &Decl) 
visit_explicit_self			        fn visit_explicit_self(&mut self, es: &ExplicitSelf) 
visit_expr			        fn visit_expr(&mut self, ex: &Expr) 
visit_fn			        fn visit_fn(&mut self, fk: FnKind<'v>, fd: &'v FnDecl,
visit_foreign_item			        fn visit_foreign_item(&mut self, i: &ForeignItem) 
visit_generics			        fn visit_generics(&mut self, g: &Generics) 
visit_ident			        fn visit_ident(&mut self, _: Span, ident: Ident) 
visit_item			        fn visit_item(&mut self, i: &Item) 
visit_lifetime_def			        fn visit_lifetime_def(&mut self, l: &LifetimeDef) 
visit_lifetime_ref			        fn visit_lifetime_ref(&mut self, l: &Lifetime) 
visit_local			        fn visit_local(&mut self, l: &Local) 
visit_mac			        fn visit_mac(&mut self, mac: &Mac) 
visit_mod			        fn visit_mod(&mut self, m: &Mod, _s: Span, _n: NodeId) 
visit_opt_lifetime_ref			        fn visit_opt_lifetime_ref(&mut self, _: Span, l: &Option<Lifetime>) 
visit_pat			        fn visit_pat(&mut self, p: &Pat) 
visit_path			        fn visit_path(&mut self, path: &Path, _: ast::NodeId) 
visit_stmt			        fn visit_stmt(&mut self, s: &Stmt) 
visit_struct_def			        fn visit_struct_def(&mut self, s: &StructDef, ident: Ident,
visit_struct_field			        fn visit_struct_field(&mut self, s: &StructField) 
visit_trait_item			        fn visit_trait_item(&mut self, t: &TraitItem) 
visit_ty			        fn visit_ty(&mut self, t: &Ty) 
visit_ty_method			        fn visit_ty_method(&mut self, t: &TypeMethod) 
visit_variant			        fn visit_variant(&mut self, v: &Variant, g: &Generics) 
visit_view_item			        fn visit_view_item(&mut self, i: &ViewItem) 
windows_base			mod windows_base;
write_u32_be			fn write_u32_be(dst: &mut[u8], input: u32) 
x86			pub mod x86;
x86_64			pub mod x86_64;
x86_64_apple_darwin			mod x86_64_apple_darwin;
x86_64_pc_windows_gnu			mod x86_64_pc_windows_gnu;
x86_64_unknown_dragonfly			mod x86_64_unknown_dragonfly;
x86_64_unknown_freebsd			mod x86_64_unknown_freebsd;
x86_64_unknown_linux_gnu			mod x86_64_unknown_linux_gnu;
zero_until			    fn zero_until(&mut self, idx: uint) 
zero_until			    fn zero_until(&mut self, idx: uint);
