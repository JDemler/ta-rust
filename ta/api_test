BenchHarness			impl BenchHarness 
BenchHarness			pub struct BenchHarness 
BenchSamples			pub struct BenchSamples 
Clone			impl Clone for MetricMap 
ConsoleTestState			struct ConsoleTestState<T> 
Metric			impl Metric 
Metric			pub struct Metric 
MetricChange			pub enum MetricChange 
MetricMap			impl MetricMap 
MetricMap			pub struct MetricMap(TreeMap<~str,Metric>);
NamePadding			enum NamePadding { PadNone, PadOnLeft, PadOnRight }
OutputLocation			enum OutputLocation<T> 
Stats			pub trait Stats 
Summary			impl Summary 
Summary			pub struct Summary 
TDynBenchFn			pub trait TDynBenchFn 
TestDesc			impl TestDesc 
TestDesc			pub struct TestDesc 
TestDescAndFn			pub struct TestDescAndFn 
TestEvent			enum TestEvent 
TestFn			impl TestFn 
TestFn			pub enum TestFn 
TestName			pub enum TestName 
TestOpts			pub struct TestOpts 
TestResult			pub enum TestResult 
ToJson			impl ToJson for Metric 
auto_bench			    pub fn auto_bench(&mut self, f: |&mut BenchHarness|) -> stats::Summary 
bench			pub mod bench 
bench			mod bench 
bench_n			    pub fn bench_n(&mut self, n: u64, f: |&mut BenchHarness|) 
benchmark			    pub fn benchmark(f: |&mut BenchHarness|) -> BenchSamples 
black_box			pub fn black_box<T>(dummy: T) 
calc_result			fn calc_result(desc: &TestDesc, task_succeeded: bool) -> TestResult 
callback			    fn callback<T: Writer>(event: &TestEvent,
check			    fn check(samples: &[f64], summ: &Summary) 
clone			    fn clone(&self) -> MetricMap 
compare_to_old			    pub fn compare_to_old(&self, old: &MetricMap,
do_not_run_ignored_tests			    pub fn do_not_run_ignored_tests() 
f			        fn f() { fail!(); }
f			        fn f() { }
f64_cmp			fn f64_cmp(x: f64, y: f64) -> Ordering 
f64_sort			fn f64_sort(v: &mut [f64]) 
filter			        fn filter(test: TestDescAndFn) -> Option<TestDescAndFn> 
filter_fn			        fn filter_fn(test: TestDescAndFn, filter_str: &str) ->
filter_for_ignored_option			    pub fn filter_for_ignored_option() 
filter_tests			pub fn filter_tests(
first_free_arg_should_be_a_filter			    fn first_free_arg_should_be_a_filter() 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			impl fmt::Show for TestName 
fmt_bench_samples			pub fn fmt_bench_samples(bs: &BenchSamples) -> ~str 
fmt_metrics			pub fn fmt_metrics(mm: &MetricMap) -> ~str 
freq_count			pub fn freq_count<T: Iterator<U>, U: TotalEq+Hash>(mut iter: T) -> hashmap::HashMap<U, uint> 
get_concurrency			fn get_concurrency() -> uint 
ignored_tests_result_in_ignored			    pub fn ignored_tests_result_in_ignored() 
insert_metric			    pub fn insert_metric(&mut self, name: &str, value: f64, noise: f64) 
iqr			    fn iqr(self) -> f64 
iqr			    fn iqr(self) -> f64;
iter			    pub fn iter<T>(&mut self, inner: || -> T) 
len_if_padded			    fn len_if_padded(t: &TestDescAndFn) -> uint 
load			    pub fn load(p: &Path) -> MetricMap 
max			    fn max(self) -> f64 
max			    fn max(self) -> f64;
mean			    fn mean(self) -> f64 
mean			    fn mean(self) -> f64;
median			    fn median(self) -> f64 
median			    fn median(self) -> f64;
median_abs_dev			    fn median_abs_dev(self) -> f64 
median_abs_dev			    fn median_abs_dev(self) -> f64;
median_abs_dev_pct			    fn median_abs_dev_pct(self) -> f64 
median_abs_dev_pct			    fn median_abs_dev_pct(self) -> f64;
min			    fn min(self) -> f64 
min			    fn min(self) -> f64;
new			    pub fn new() -> MetricMap 
new			    pub fn new(opts: &TestOpts,
new			    pub fn new(value: f64, noise: f64) -> Metric 
new			    pub fn new(samples: &[f64]) -> Summary 
ns_elapsed			    pub fn ns_elapsed(&mut self) -> u64 
ns_per_iter			    pub fn ns_per_iter(&mut self) -> u64 
opt_shard			pub fn opt_shard(maybestr: Option<~str>) -> Option<(uint,uint)> 
optgroups			fn optgroups() -> Vec<getopts::OptGroup> 
padded_name			    fn padded_name(&self, column_count: uint, align: NamePadding) -> ~str 
padding			    fn padding(&self) -> NamePadding 
parse_ignored_flag			    fn parse_ignored_flag() 
parse_opts			pub fn parse_opts(args: &[~str]) -> Option<OptRes> 
percentile			    fn percentile(self, pct: f64) -> f64 
percentile			    fn percentile(self, pct: f64) -> f64;
percentile_of_sorted			fn percentile_of_sorted(sorted_samples: &[f64],
quartiles			    fn quartiles(self) -> (f64,f64,f64) 
quartiles			    fn quartiles(self) -> (f64,f64,f64);
ratchet			    pub fn ratchet(&self, p: &Path, pct: Option<f64>) -> (MetricDiff, bool) 
ratchet_test			    pub fn ratchet_test() 
run			    fn run(&self, harness: &mut BenchHarness);
run_test			pub fn run_test(force_ignore: bool,
run_test_inner			    fn run_test_inner(desc: TestDesc,
run_tests			fn run_tests(opts: &TestOpts,
run_tests_console			pub fn run_tests_console(opts: &TestOpts,
save			    pub fn save(&self, p: &Path) -> io::IoResult<()> 
should_sort_failures_before_printing_them			fn should_sort_failures_before_printing_them() 
sort_tests			    pub fn sort_tests() 
stats			pub mod stats;
std_dev			    fn std_dev(self) -> f64 
std_dev			    fn std_dev(self) -> f64;
std_dev_pct			    fn std_dev_pct(self) -> f64 
std_dev_pct			    fn std_dev_pct(self) -> f64;
sum			    fn sum(self) -> f64 
sum			    fn sum(self) -> f64;
sum_many_f64			    pub fn sum_many_f64(bh: &mut BenchHarness) 
sum_three_items			    pub fn sum_three_items(bh: &mut BenchHarness) 
t			        fn t(s: &Summary, expected: ~str) 
test			pub mod test 
test_binom25			    fn test_binom25() 
test_boxplot_nonpositive			    fn test_boxplot_nonpositive() 
test_exp10a			    fn test_exp10a() 
test_exp10b			    fn test_exp10b() 
test_exp10c			    fn test_exp10c() 
test_exp25			    fn test_exp25() 
test_main			pub fn test_main(args: &[~str], tests: Vec<TestDescAndFn> ) 
test_main_static			pub fn test_main_static(args: &[~str], tests: &[TestDescAndFn]) 
test_metricmap_compare			    pub fn test_metricmap_compare() 
test_min_max_nan			    fn test_min_max_nan() 
test_norm10medium			    fn test_norm10medium() 
test_norm10narrow			    fn test_norm10narrow() 
test_norm10wide			    fn test_norm10wide() 
test_norm2			    fn test_norm2() 
test_norm25verynarrow			    fn test_norm25verynarrow() 
test_pois25lambda30			    fn test_pois25lambda30() 
test_pois25lambda40			    fn test_pois25lambda40() 
test_pois25lambda50			    fn test_pois25lambda50() 
test_should_fail			    fn test_should_fail() 
test_should_fail_but_succeeds			    fn test_should_fail_but_succeeds() 
test_sum_f64_between_ints_that_sum_to_0			    fn test_sum_f64_between_ints_that_sum_to_0() 
test_sum_f64s			    fn test_sum_f64s() 
test_unif25			    fn test_unif25() 
testfn			            fn testfn() { }
tests			mod tests 
tests			mod tests 
to_json			    fn to_json(&self) -> json::Json 
usage			fn usage(binary: &str, helpstr: &str) 
use_color			fn use_color() -> bool { return get_concurrency() == 1; }
var			    fn var(self) -> f64 
var			    fn var(self) -> f64;
winsorize			pub fn winsorize(samples: &mut [f64], pct: f64) 
write_5_number_summary			pub fn write_5_number_summary(w: &mut io::Writer,
write_added			    pub fn write_added(&mut self) -> io::IoResult<()> 
write_bench			    pub fn write_bench(&mut self) -> io::IoResult<()> 
write_boxplot			pub fn write_boxplot(w: &mut io::Writer, s: &Summary,
write_failed			    pub fn write_failed(&mut self) -> io::IoResult<()> 
write_failures			    pub fn write_failures(&mut self) -> io::IoResult<()> 
write_ignored			    pub fn write_ignored(&mut self) -> io::IoResult<()> 
write_improved			    pub fn write_improved(&mut self) -> io::IoResult<()> 
write_log			    pub fn write_log(&mut self, test: &TestDesc,
write_metric			    pub fn write_metric(&mut self) -> io::IoResult<()> 
write_metric_diff			    pub fn write_metric_diff(&mut self, diff: &MetricDiff) -> io::IoResult<()> 
write_ok			    pub fn write_ok(&mut self) -> io::IoResult<()> 
write_plain			    pub fn write_plain(&mut self, s: &str) -> io::IoResult<()> 
write_pretty			    pub fn write_pretty(&mut self,
write_regressed			    pub fn write_regressed(&mut self) -> io::IoResult<()> 
write_removed			    pub fn write_removed(&mut self) -> io::IoResult<()> 
write_result			    pub fn write_result(&mut self, result: &TestResult) -> io::IoResult<()> 
write_run_finish			    pub fn write_run_finish(&mut self,
write_run_start			    pub fn write_run_start(&mut self, len: uint) -> io::IoResult<()> 
write_test_start			    pub fn write_test_start(&mut self, test: &TestDesc,
