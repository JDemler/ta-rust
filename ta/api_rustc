Aliasability			pub enum Aliasability 
AliasableReason			pub enum AliasableReason 
Annotator			impl<'a, 'tcx: 'a> Annotator<'a, 'tcx> 
Annotator			struct Annotator<'a, 'tcx: 'a> 
ArchiveMetadata			impl ArchiveMetadata 
ArchiveMetadata			pub struct ArchiveMetadata 
AsPredicate			pub trait AsPredicate<'tcx> 
AsPredicate for PolyEquatePredicate			impl<'tcx> AsPredicate<'tcx> for PolyEquatePredicate<'tcx> 
AsPredicate for PolyProjectionPredicate			impl<'tcx> AsPredicate<'tcx> for PolyProjectionPredicate<'tcx> 
AsPredicate for PolyRegionOutlivesPredicate			impl<'tcx> AsPredicate<'tcx> for PolyRegionOutlivesPredicate 
AsPredicate for PolyTraitRef			impl<'tcx> AsPredicate<'tcx> for PolyTraitRef<'tcx> 
AsPredicate for PolyTypeOutlivesPredicate			impl<'tcx> AsPredicate<'tcx> for PolyTypeOutlivesPredicate<'tcx> 
AsPredicate for TraitRef			impl<'tcx> AsPredicate<'tcx> for TraitRef<'tcx> 
AssociatedConst			pub struct AssociatedConst<'tcx> 
AssociatedType			pub struct AssociatedType<'tcx> 
AssociatedTypeNormalizer			impl<'a,'b,'tcx> AssociatedTypeNormalizer<'a,'b,'tcx> 
AssociatedTypeNormalizer			struct AssociatedTypeNormalizer<'a,'b:'a,'tcx:'b> 
AtBindingPatternVisitor			struct AtBindingPatternVisitor<'a, 'b:'a, 'tcx:'b> 
AutoAdjustment			impl<'tcx> AutoAdjustment<'tcx> 
AutoAdjustment			pub enum AutoAdjustment<'tcx> 
AutoDerefRef			impl<'tcx> AutoDerefRef<'tcx> 
AutoDerefRef			pub struct AutoDerefRef<'tcx> 
AutoRef			pub enum AutoRef<'tcx> 
BareFnTy			pub struct BareFnTy<'tcx> 
Binder			impl<T> Binder<T> 
Binder			pub struct Binder<T>(pub T);
BitwiseOperator			pub trait BitwiseOperator 
BitwiseOperator for Subtract			impl BitwiseOperator for Subtract 
BitwiseOperator for Union			impl BitwiseOperator for Union 
Bivariate			impl<'a, 'tcx> Bivariate<'a, 'tcx> 
Bivariate			pub struct Bivariate<'a, 'tcx: 'a> 
BlockQueryVisitor			struct BlockQueryVisitor<P> where P: FnMut(&ast::Expr) -> bool 
BlockRemainder			pub struct BlockRemainder 
Borrow			impl<'tcx> Borrow<TypeVariants<'tcx>> for InternedTy<'tcx> 
BorrowKind			impl BorrowKind 
BorrowKind			pub enum BorrowKind 
BottomUpFolder			pub struct BottomUpFolder<'a, 'tcx: 'a, F> where F: FnMut(Ty<'tcx>) -> Ty<'tcx> 
BoundRegion			pub enum BoundRegion 
BuiltinBound			pub enum BuiltinBound 
BuiltinBoundConditions			enum BuiltinBoundConditions<'tcx> 
BuiltinBounds			impl BuiltinBounds 
BuiltinBounds			pub struct BuiltinBounds(EnumSet<BuiltinBound>);
CFG			impl CFG 
CFG			pub struct CFG 
CFGBuilder			impl<'a, 'tcx> CFGBuilder<'a, 'tcx> 
CFGBuilder			struct CFGBuilder<'a, 'tcx: 'a> 
CFGEdgeData			pub struct CFGEdgeData 
CFGNodeData			impl CFGNodeData 
CFGNodeData			pub enum CFGNodeData 
CLike for BuiltinBound			impl CLike for BuiltinBound 
CStore			impl CStore 
CStore			pub struct CStore 
CaptureInfo			struct CaptureInfo 
CastKind			pub enum CastKind 
CastTy			impl<'tcx> CastTy<'tcx> 
CastTy			pub enum CastTy<'tcx> 
Cause			pub enum Cause 
CheckCrateVisitor			impl<'a, 'tcx> CheckCrateVisitor<'a, 'tcx> 
CheckCrateVisitor			struct CheckCrateVisitor<'a, 'tcx: 'a> 
CheckCrateVisitor			struct CheckCrateVisitor<'a, 'ast: 'a> 
CheckItemRecursionVisitor			impl<'a, 'ast: 'a> CheckItemRecursionVisitor<'a, 'ast> 
CheckItemRecursionVisitor			struct CheckItemRecursionVisitor<'a, 'ast: 'a> 
CheckLoopVisitor			impl<'a> CheckLoopVisitor<'a> 
CheckLoopVisitor			struct CheckLoopVisitor<'a> 
Checker			impl<'a, 'tcx> Checker<'a, 'tcx> 
Checker			struct Checker<'a, 'tcx: 'a> 
Classification			enum Classification { Expanding, Contracting }
Clone for LiveNode			impl Clone for LiveNode 
Clone for MapEntry			impl<'ast> Clone for MapEntry<'ast> 
Clone for MemCategorizationContext			impl<'t,TYPER:'t> Clone for MemCategorizationContext<'t,TYPER> 
ClosureKind			impl ClosureKind 
ClosureKind			pub enum ClosureKind 
ClosureParts			impl<'a> ClosureParts<'a> 
ClosureParts			struct ClosureParts<'a> 
ClosureTy			pub struct ClosureTy<'tcx> 
ClosureTyper			pub trait ClosureTyper<'tcx> 
ClosureTyper for ty			impl<'a,'tcx> ClosureTyper<'tcx> for ty::ParameterEnvironment<'a,'tcx> 
ClosureUpvar			pub struct ClosureUpvar<'tcx> 
Code			impl<'a> Code<'a> 
Code			pub enum Code<'a> 
CodeExtent			impl CodeExtent 
CodeExtent			pub enum CodeExtent 
CombineFields			impl<'a, 'tcx> CombineFields<'a, 'tcx> 
CombineFields			pub struct CombineFields<'a, 'tcx: 'a> 
CombineMapType			pub enum CombineMapType 
CombinedSnapshot			pub struct CombinedSnapshot 
CommonTypes			impl<'tcx> CommonTypes<'tcx> 
CommonTypes			pub struct CommonTypes<'tcx> 
Config			pub struct Config 
ConstEvalErr			impl ConstEvalErr 
ConstEvalErr			pub struct ConstEvalErr 
ConstVal			pub enum ConstVal 
Constraint			pub enum Constraint 
ConstraintGraph			impl<'a, 'tcx> ConstraintGraph<'a, 'tcx> 
ConstraintGraph			struct ConstraintGraph<'a, 'tcx: 'a> 
Constructor			pub enum Constructor 
ConsumeMode			pub enum ConsumeMode 
Context			impl<'a, 'tcx> Context<'a, 'tcx> 
Context			pub struct Context<'a, 'tcx: 'a> 
Context			impl<'a> Context<'a> 
Context			pub struct Context<'a> 
Context			enum Context 
Context			pub struct Context 
Context			impl<'a> Context<'a> 
Context			struct Context<'a> 
Copy for MemCategorizationContext			impl<'t,TYPER:'t> Copy for MemCategorizationContext<'t,TYPER> {}
CopyImplementationError			pub enum CopyImplementationError 
CrateAnalysis			pub struct CrateAnalysis 
CrateDep			pub struct CrateDep 
CrateInfo			struct CrateInfo 
CrateMismatch			pub struct CrateMismatch 
CratePaths			impl CratePaths 
CratePaths			pub struct CratePaths 
CrateReader			impl<'a> CrateReader<'a> 
CrateReader			pub struct CrateReader<'a> 
CrateSource			pub struct CrateSource 
CrateType			pub enum CrateType 
CtxtArenas			impl<'tcx> CtxtArenas<'tcx> 
CtxtArenas			pub struct CtxtArenas<'tcx> 
CustomCoerceUnsized			pub enum CustomCoerceUnsized 
DataFlowContext			impl<'a, 'tcx, O:DataFlowOperator+Clone+'static> DataFlowContext<'a, 'tcx, O> 
DataFlowContext			impl<'a, 'tcx, O:DataFlowOperator> DataFlowContext<'a, 'tcx, O> 
DataFlowContext			pub struct DataFlowContext<'a, 'tcx: 'a, O> 
DataFlowOperator			pub trait DataFlowOperator : BitwiseOperator 
DeadVisitor			impl<'a, 'tcx> DeadVisitor<'a, 'tcx> 
DeadVisitor			struct DeadVisitor<'a, 'tcx: 'a> 
DebruijnIndex			impl DebruijnIndex 
DebruijnIndex			pub struct DebruijnIndex 
DebugInfoLevel			pub enum DebugInfoLevel 
DebugStat			            struct DebugStat 
DeclaringStatementContext			impl DeclaringStatementContext 
DeclaringStatementContext			struct DeclaringStatementContext 
DecodeContext			impl<'a, 'b, 'tcx> DecodeContext<'a, 'b, 'tcx> 
DecodeContext			struct DecodeContext<'a, 'b, 'tcx: 'a> 
Def			impl Def 
Def			pub enum Def 
DefIdMap			pub fn DefIdMap<T>() -> DefIdMap<T> { FnvHashMap() }
DefIdSet			pub fn DefIdSet() -> DefIdSet { FnvHashSet() }
DefIdSource			pub enum DefIdSource 
DefLike			pub enum DefLike 
DefRegion			pub enum DefRegion 
Default for FnvHasher			impl Default for FnvHasher 
Delegate			pub trait Delegate<'tcx> 
Delegate			struct Delegate<'tcx>(PhantomData<&'tcx ()>);
Delegate for MutationChecker			impl<'a, 'tcx> Delegate<'tcx> for MutationChecker<'a, 'tcx> 
DerivedObligationCause			pub struct DerivedObligationCause<'tcx> 
DestructionScopeData			impl DestructionScopeData 
DestructionScopeData			pub struct DestructionScopeData 
Drop for Indenter			impl Drop for Indenter 
DtorKind			impl DtorKind 
DtorKind			pub enum DtorKind 
EarlyBoundRegion			pub struct EarlyBoundRegion 
Edge			enum Edge 
EffectCheckVisitor			impl<'a, 'tcx> EffectCheckVisitor<'a, 'tcx> 
EffectCheckVisitor			struct EffectCheckVisitor<'a, 'tcx: 'a> 
Elaborator			impl<'cx, 'tcx> Elaborator<'cx, 'tcx> 
Elaborator			pub struct Elaborator<'cx, 'tcx:'cx> 
ElementKind			pub enum ElementKind 
EncodeContext			pub struct EncodeContext<'a, 'tcx: 'a> 
EncodeParams			pub struct EncodeParams<'a, 'tcx: 'a> 
EncodeVisitor			struct EncodeVisitor<'a, 'b:'a, 'c:'a, 'tcx:'c> 
EntryContext			struct EntryContext<'a, 'ast: 'a> 
EntryFnType			pub enum EntryFnType 
EntryOrExit			pub enum EntryOrExit 
Enum			enum Enum 
EnumeratedItems			impl<'a,T> EnumeratedItems<'a,T> 
EnumeratedItems			pub struct EnumeratedItems<'a,T:'a> 
Eq for InternedTy			impl<'tcx> Eq for InternedTy<'tcx> {}
Eq for LintId			impl Eq for LintId { }
Eq for TyS			impl<'tcx> Eq for TyS<'tcx> {}
Equate			impl<'a, 'tcx> Equate<'a, 'tcx> 
Equate			pub struct Equate<'a, 'tcx: 'a> 
EquatePredicate			pub struct EquatePredicate<'tcx>(pub Ty<'tcx>, pub Ty<'tcx>); \/\/ `0 == 1`
ErrKind			pub enum ErrKind 
ErrorReported			pub struct ErrorReported;
ErrorReporting			pub trait ErrorReporting<'tcx> 
ErrorReporting for InferCtxt			impl<'a, 'tcx> ErrorReporting<'tcx> for InferCtxt<'a, 'tcx> 
ErrorReportingHelpers			trait ErrorReportingHelpers<'tcx> 
ErrorReportingHelpers for InferCtxt			impl<'a, 'tcx> ErrorReportingHelpers<'tcx> for InferCtxt<'a, 'tcx> 
EvaluationResult			enum EvaluationResult<'tcx> 
EvaluationResult			impl<'tcx> EvaluationResult<'tcx> 
ExistentialBounds			pub struct ExistentialBounds<'tcx> 
ExplicitSelfCategory			pub enum ExplicitSelfCategory 
Export			pub struct Export 
ExprUseVisitor			pub struct ExprUseVisitor<'d,'t,'tcx:'t,TYPER:'t> 
ExtensionCrate			struct ExtensionCrate 
FakeExtCtxt			trait FakeExtCtxt 
FakeExtCtxt for parse			impl FakeExtCtxt for parse::ParseSess 
Family			enum Family 
FieldName			pub enum FieldName 
FileMatch			pub enum FileMatch 
FileSearch			impl<'a> FileSearch<'a> 
FileSearch			pub struct FileSearch<'a> 
FilterToTraits			impl<I> FilterToTraits<I> 
FilterToTraits			pub struct FilterToTraits<I> 
FlagComputation			impl FlagComputation 
FlagComputation			struct FlagComputation 
FloatVid			pub struct FloatVid 
FnLikeNode			impl<'a> FnLikeNode<'a> 
FnLikeNode			pub struct FnLikeNode<'a> { node: ast_map::Node<'a> }
FnOutput			impl<'tcx> FnOutput<'tcx> 
FnOutput			pub enum FnOutput<'tcx> 
FnParts			pub struct FnParts<'a> 
FnSig			pub struct FnSig<'tcx> 
FnvHashMap			pub fn FnvHashMap<K: Hash + Eq, V>() -> FnvHashMap<K, V> 
FnvHashSet			pub fn FnvHashSet<V: Hash + Eq>() -> FnvHashSet<V> 
FnvHasher			pub struct FnvHasher(u64);
FoldOps			pub trait FoldOps 
Folder for IdAndSpanUpdater			impl<F: FoldOps> Folder for IdAndSpanUpdater<F> 
Folder for NestedItemsDropper			impl Folder for NestedItemsDropper 
Folder for StaticInliner			impl<'a, 'tcx> Folder for StaticInliner<'a, 'tcx> 
Foo			impl Foo 
Foo			impl<T> Foo<T> 
Foo			struct Foo { a: u8 }
Foo			struct Foo 
Foo			struct Foo(i32);
Foo			struct Foo<'a, T: 'a> 
Foo			struct Foo<'a, T> 
Foo			struct Foo<'a> 
Foo			struct Foo<T: 'static> 
Foo			struct Foo<T> 
Forest			impl Forest 
Forest			pub struct Forest 
Formals			        struct Formals<'a> 
FoundAst			pub enum FoundAst<'ast> 
FreeLifetimeCollector			    struct FreeLifetimeCollector<'a> 
FreeRegion			pub struct FreeRegion 
FreeRegionMap			impl FreeRegionMap 
FreeRegionMap			pub struct FreeRegionMap 
FreeRegionsFromSameFn			        impl FreeRegionsFromSameFn 
FreeRegionsFromSameFn			        struct FreeRegionsFromSameFn 
Freevar			pub struct Freevar 
FreshOrKept			enum FreshOrKept 
FromIterator			impl<'a> FromIterator<Vec<&'a Pat>> for Matrix<'a> 
FulfilledPredicates			impl<'tcx> FulfilledPredicates<'tcx> 
FulfilledPredicates			pub struct FulfilledPredicates<'tcx> 
FulfillmentContext			impl<'tcx> FulfillmentContext<'tcx> 
FulfillmentContext			pub struct FulfillmentContext<'tcx> 
FulfillmentError			impl<'tcx> FulfillmentError<'tcx> 
FulfillmentError			pub struct FulfillmentError<'tcx> 
FulfillmentErrorCode			pub enum FulfillmentErrorCode<'tcx> 
FullTypeResolver			struct FullTypeResolver<'a, 'tcx:'a> 
GatherLabels			    struct GatherLabels<'a> 
GatherNodeLevels			pub struct GatherNodeLevels;
Generalizer			struct Generalizer<'cx, 'tcx:'cx> 
GenericKind			impl<'tcx> GenericKind<'tcx> 
GenericKind			pub enum GenericKind<'tcx> 
GenericPredicates			impl<'tcx> GenericPredicates<'tcx> 
GenericPredicates			pub struct GenericPredicates<'tcx> 
Generics			impl<'tcx> Generics<'tcx> 
Generics			pub struct Generics<'tcx> 
Glb			impl<'a, 'tcx> Glb<'a, 'tcx> 
Glb			pub struct Glb<'a, 'tcx: 'a> 
HardwiredLints			pub struct HardwiredLints;
HasProjectionTypes			pub trait HasProjectionTypes 
HasProjectionTypes for BareFnTy			impl<'tcx> HasProjectionTypes for BareFnTy<'tcx> 
HasProjectionTypes for Binder			impl<T> HasProjectionTypes for Binder<T>
HasProjectionTypes for Box			impl<'tcx,T> HasProjectionTypes for Box<T>
HasProjectionTypes for ClosureTy			impl<'tcx> HasProjectionTypes for ClosureTy<'tcx> 
HasProjectionTypes for ClosureUpvar			impl<'tcx> HasProjectionTypes for ClosureUpvar<'tcx> 
HasProjectionTypes for EquatePredicate			impl<'tcx> HasProjectionTypes for EquatePredicate<'tcx> 
HasProjectionTypes for FnOutput			impl<'tcx> HasProjectionTypes for FnOutput<'tcx> 
HasProjectionTypes for FnSig			impl<'tcx> HasProjectionTypes for FnSig<'tcx> 
HasProjectionTypes for Option			impl<'tcx,T> HasProjectionTypes for Option<T>
HasProjectionTypes for OutlivesPredicate			impl<T:HasProjectionTypes,U:HasProjectionTypes> HasProjectionTypes for OutlivesPredicate<T,U> 
HasProjectionTypes for Predicate			impl<'tcx> HasProjectionTypes for Predicate<'tcx> 
HasProjectionTypes for ProjectionPredicate			impl<'tcx> HasProjectionTypes for ProjectionPredicate<'tcx> 
HasProjectionTypes for ProjectionTy			impl<'tcx> HasProjectionTypes for ProjectionTy<'tcx> 
HasProjectionTypes for Rc			impl<'tcx,T> HasProjectionTypes for Rc<T>
HasProjectionTypes for Region			impl HasProjectionTypes for Region 
HasProjectionTypes for TraitPredicate			impl<'tcx> HasProjectionTypes for TraitPredicate<'tcx> 
HasProjectionTypes for TraitRef			impl<'tcx> HasProjectionTypes for TraitRef<'tcx> 
HasProjectionTypes for Ty			impl<'tcx> HasProjectionTypes for Ty<'tcx> 
HasProjectionTypes for Vec			impl<'tcx,T:HasProjectionTypes> HasProjectionTypes for Vec<T> 
HasProjectionTypes for VecPerParamSpace			impl<'tcx,T:HasProjectionTypes> HasProjectionTypes for VecPerParamSpace<T> 
HasProjectionTypes for field			impl<'tcx> HasProjectionTypes for field<'tcx> 
HasProjectionTypes for subst			impl<'tcx> HasProjectionTypes for subst::Substs<'tcx> 
HasProjectionTypes for ty			impl<'tcx> HasProjectionTypes for ty::InstantiatedPredicates<'tcx> 
Hash for InternedTy			impl<'tcx> Hash for InternedTy<'tcx> 
Hash for TyS			impl<'tcx> Hash for TyS<'tcx> 
Hasher for FnvHasher			impl Hasher for FnvHasher 
HigherRankedRelations			pub trait HigherRankedRelations<'a,'tcx> 
HigherRankedRelations for CombineFields			impl<'a,'tcx> HigherRankedRelations<'a,'tcx> for CombineFields<'a,'tcx> 
IdAndSpanUpdater			struct IdAndSpanUpdater<F> 
IdVisitingOperation for Context			impl<'a, 'tcx> IdVisitingOperation for Context<'a, 'tcx> 
ImplOrTraitItem			impl<'tcx> ImplOrTraitItem<'tcx> 
ImplOrTraitItem			pub enum ImplOrTraitItem<'tcx> 
ImplOrTraitItemContainer			impl ImplOrTraitItemContainer 
ImplOrTraitItemContainer			pub enum ImplOrTraitItemContainer 
ImplOrTraitItemId			impl ImplOrTraitItemId 
ImplOrTraitItemId			pub enum ImplOrTraitItemId 
ImplVisitor			struct ImplVisitor<'a, 'b:'a, 'c:'a, 'tcx:'b> 
Implication			pub enum Implication<'tcx> 
Implicator			impl<'a, 'tcx> Implicator<'a, 'tcx> 
Implicator			struct Implicator<'a, 'tcx: 'a> 
ImportUse			pub enum ImportUse 
ImportedFileMap			pub struct ImportedFileMap 
Indenter			pub struct Indenter 
Index			impl<'tcx> Index<'tcx> 
Index			pub struct Index<'tcx> 
Index for Foo			impl Index<u8> for Foo 
InferCtxt			impl<'a, 'tcx> InferCtxt<'a, 'tcx> 
InferCtxt			pub struct InferCtxt<'a, 'tcx: 'a> 
InferCtxtExt			trait InferCtxtExt 
InferCtxtExt for InferCtxt			impl<'a,'tcx> InferCtxtExt for InferCtxt<'a,'tcx> 
InferIsLocal			struct InferIsLocal(bool);
InferRegion			pub enum InferRegion 
InferTy			pub enum InferTy 
InlinedItemRef			pub enum InlinedItemRef<'a> 
InlinedParent			struct InlinedParent 
InnermostDeclaringBlock			enum InnermostDeclaringBlock 
InnermostDeclaringBlock			impl InnermostDeclaringBlock 
InnermostEnclosingExpr			enum InnermostEnclosingExpr 
InnermostEnclosingExpr			impl InnermostEnclosingExpr 
Input			impl Input 
Input			pub enum Input 
InstantiatedPredicates			impl<'tcx> InstantiatedPredicates<'tcx> 
InstantiatedPredicates			pub struct InstantiatedPredicates<'tcx> 
IntTy			pub enum IntTy 
IntTy			impl IntTy 
IntTy			pub enum IntTy { I8, I16, I32, I64 }
IntTypeExt			trait IntTypeExt 
IntTypeExt for attr			impl IntTypeExt for attr::IntType 
IntVarValue			pub enum IntVarValue 
IntVid			pub struct IntVid 
InteriorKind			pub enum InteriorKind 
InteriorOffsetKind			pub enum InteriorOffsetKind 
InternedTy			pub struct InternedTy<'tcx> 
IntoIterator			impl<'a,T> IntoIterator for &'a VecPerParamSpace<T> 
IntoIterator			impl<'a> IntoIterator for &'a BuiltinBounds 
IntoIterator for VecPerParamSpace			impl<T> IntoIterator for VecPerParamSpace<T> 
IntrinsicCheckingVisitor			impl<'a, 'tcx> IntrinsicCheckingVisitor<'a, 'tcx> 
IntrinsicCheckingVisitor			struct IntrinsicCheckingVisitor<'a, 'tcx: 'a> 
IrMaps			impl<'a, 'tcx> IrMaps<'a, 'tcx> 
IrMaps			struct IrMaps<'a, 'tcx: 'a> 
Irrefutable			struct Irrefutable(i32);
ItemFnParts			struct ItemFnParts<'a> 
ItemSubsts			impl<'tcx> ItemSubsts<'tcx> 
ItemSubsts			pub struct ItemSubsts<'tcx> 
ItemVariances			pub struct ItemVariances 
Iter			pub struct Iter<'a> 
Iterator for Elaborator			impl<'cx, 'tcx> Iterator for Elaborator<'cx, 'tcx> 
Iterator for EnumeratedItems			impl<'a,T> Iterator for EnumeratedItems<'a,T> 
Iterator for Iter			impl<'a> Iterator for Iter<'a> 
Iterator for LinkedPath			impl<'a> Iterator for LinkedPath<'a> 
Iterator for NodesMatchingSuffix			impl<'a, 'ast> Iterator for NodesMatchingSuffix<'a, 'ast> 
Iterator for SupertraitDefIds			impl<'cx, 'tcx> Iterator for SupertraitDefIds<'cx, 'tcx> 
Iterator for TraitObligationStackList			impl<'o,'tcx> Iterator for TraitObligationStackList<'o,'tcx>
Iterator for TypeWalker			impl<'tcx> Iterator for TypeWalker<'tcx> 
KillFrom			pub enum KillFrom 
LabelledCFG			pub struct LabelledCFG<'a, 'ast: 'a> 
LangItem			    pub enum LangItem 
LanguageItemCollector			impl<'a> LanguageItemCollector<'a> 
LanguageItemCollector			struct LanguageItemCollector<'a> 
LanguageItems			impl LanguageItems 
LanguageItems			pub struct LanguageItems 
LastPrivate			impl LastPrivate 
LastPrivate			pub enum LastPrivate 
LateBoundRegionConversionTime			pub enum LateBoundRegionConversionTime 
LatticeDir			pub trait LatticeDir<'f,'tcx> : TypeRelation<'f,'tcx> 
LatticeDir for Glb			impl<'a, 'tcx> LatticeDir<'a,'tcx> for Glb<'a, 'tcx> 
LatticeDir for Lub			impl<'a, 'tcx> LatticeDir<'a,'tcx> for Lub<'a, 'tcx> 
Level			impl Level 
Level			pub enum Level 
Library			pub struct Library 
LifeGiver			impl LifeGiver 
LifeGiver			struct LifeGiver 
LifeSeeder			struct LifeSeeder 
LifetimeContext			impl<'a> LifetimeContext<'a> 
LifetimeContext			struct LifetimeContext<'a> 
Lift			impl<'a, 'tcx> Lift<'tcx> for &'a Substs<'a> 
Lift			pub trait Lift<'tcx> 
Lift for EquatePredicate			impl<'a, 'tcx> Lift<'tcx> for EquatePredicate<'a> 
Lift for ProjectionPredicate			impl<'a, 'tcx> Lift<'tcx> for ProjectionPredicate<'a> 
Lift for Region			impl<'tcx> Lift<'tcx> for Region 
Lift for TraitPredicate			impl<'a, 'tcx> Lift<'tcx> for TraitPredicate<'a> 
Lift for TraitRef			impl<'a, 'tcx> Lift<'tcx> for TraitRef<'a> 
Lift for Ty			impl<'a, 'tcx> Lift<'tcx> for Ty<'a> 
LinkMeta			pub struct LinkMeta 
LinkagePreference			pub enum LinkagePreference 
LinkedPath			impl<'a> LinkedPath<'a> 
LinkedPath			pub struct LinkedPath<'a>(Option<&'a LinkedPathNode<'a>>);
LinkedPathNode			pub struct LinkedPathNode<'a> 
Lint			impl Lint 
Lint			pub struct Lint 
LintId			impl LintId 
LintId			pub struct LintId 
LintPass			pub trait LintPass 
LintPass for GatherNodeLevels			impl LintPass for GatherNodeLevels 
LintPass for HardwiredLints			impl LintPass for HardwiredLints 
LintSource			pub enum LintSource 
LintStore			impl LintStore 
LintStore			pub struct LintStore 
LiveNode			impl LiveNode 
LiveNode			struct LiveNode(usize);
LiveNodeKind			enum LiveNodeKind 
Liveness			impl<'a, 'tcx> Liveness<'a, 'tcx> 
Liveness			struct Liveness<'a, 'tcx: 'a> 
LoanCause			pub enum LoanCause 
LocalInfo			struct LocalInfo 
LoopKind			enum LoopKind<'a> 
LoopQueryVisitor			struct LoopQueryVisitor<P> where P: FnMut(&ast::Expr_) -> bool 
LoopScope			struct LoopScope 
Lub			impl<'a, 'tcx> Lub<'a, 'tcx> 
Lub			pub struct Lub<'a, 'tcx: 'a> 
MacroLoader			impl<'a> MacroLoader<'a> 
MacroLoader			struct MacroLoader<'a> 
Map			impl<'ast> Map<'ast> 
Map			pub struct Map<'ast> 
MapEntry			enum MapEntry<'ast> 
MapEntry			impl<'ast> MapEntry<'ast> 
MarkSymbolVisitor			impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> 
MarkSymbolVisitor			struct MarkSymbolVisitor<'a, 'tcx: 'a> 
Match			impl<'a, 'tcx> Match<'a, 'tcx> 
Match			pub struct Match<'a, 'tcx: 'a> 
MatchCheckCtxt			pub struct MatchCheckCtxt<'a, 'tcx: 'a> 
MatchMode			pub enum MatchMode 
Matrix			struct Matrix<'a>(Vec<Vec<&'a Pat>>);
MaybeFnLike			pub trait MaybeFnLike { fn is_fn_like(&self) -> bool; }
MaybeFnLike for ast			impl MaybeFnLike for ast::Expr 
MaybeFnLike for ast			impl MaybeFnLike for ast::Item 
MaybeFnLike for ast			impl MaybeFnLike for ast::TraitItem 
MemCategorizationContext			pub struct MemCategorizationContext<'t,TYPER:'t> 
MetadataBlob			impl MetadataBlob 
MetadataBlob			pub enum MetadataBlob 
Method			enum Method { GET, POST }
Method			enum Method 
Method			impl<'tcx> Method<'tcx> 
Method			pub struct Method<'tcx> 
MethodCall			impl MethodCall 
MethodCall			pub struct MethodCall 
MethodCallee			pub struct MethodCallee<'tcx> 
MethodInfo			pub struct MethodInfo 
MethodMatchResult			impl MethodMatchResult 
MethodMatchResult			pub enum MethodMatchResult 
MethodMatchedData			pub enum MethodMatchedData 
MethodObject			pub struct MethodObject<'tcx> 
MethodOrigin			pub enum MethodOrigin<'tcx> 
MethodParam			pub struct MethodParam<'tcx> 
MethodProvenance			impl MethodProvenance 
MethodProvenance			pub enum MethodProvenance 
MethodViolationCode			pub enum MethodViolationCode 
MismatchedProjectionTypes			pub struct MismatchedProjectionTypes<'tcx> 
Mode			enum Mode 
MoveReason			pub enum MoveReason 
MutabilityCategory			impl MutabilityCategory 
MutabilityCategory			pub enum MutabilityCategory 
MutateMode			pub enum MutateMode 
MutationChecker			struct MutationChecker<'a, 'tcx: 'a> 
Named			trait Named 
Named for ForeignItem			impl Named for ForeignItem { fn name(&self) -> Name { self.ident.name } }
Named for ImplItem			impl Named for ImplItem { fn name(&self) -> Name { self.ident.name } }
Named for Item			impl Named for Item { fn name(&self) -> Name { self.ident.name } }
Named for Spanned			impl<T:Named> Named for Spanned<T> { fn name(&self) -> Name { self.node.name() } }
Named for TraitItem			impl Named for TraitItem { fn name(&self) -> Name { self.ident.name } }
Named for Variant_			impl Named for Variant_ { fn name(&self) -> Name { self.name.name } }
NativeLibraryKind			    pub enum NativeLibraryKind 
NestedItemsDropper			struct NestedItemsDropper;
Node			pub enum Node<'ast> 
Node			enum Node 
NodeCollector			impl<'ast> NodeCollector<'ast> 
NodeCollector			struct NodeCollector<'ast> 
NodeMap			pub fn NodeMap<T>() -> NodeMap<T> { FnvHashMap() }
NodePrinter			pub trait NodePrinter 
NodePrinter for pprust			impl<'a> NodePrinter for pprust::State<'a> 
NodeSet			pub fn NodeSet() -> NodeSet { FnvHashSet() }
NodesMatchingSuffix			impl<'a, 'ast> NodesMatchingSuffix<'a, 'ast> 
NodesMatchingSuffix			pub struct NodesMatchingSuffix<'a, 'ast:'a> 
Normalized			impl<'tcx,T> Normalized<'tcx,T> 
Normalized			pub struct Normalized<'tcx,T> 
Note			pub enum Note 
ObjectLifetimeDefault			pub enum ObjectLifetimeDefault 
ObjectSafetyViolation			pub enum ObjectSafetyViolation<'tcx> 
Obligation			impl<'tcx,O> Obligation<'tcx,O> 
Obligation			pub struct Obligation<'tcx, T> 
ObligationCause			impl<'tcx> ObligationCause<'tcx> 
ObligationCause			pub struct ObligationCause<'tcx> 
ObligationCauseCode			pub enum ObligationCauseCode<'tcx> 
OpportunisticTypeResolver			impl<'a, 'tcx> OpportunisticTypeResolver<'a, 'tcx> 
OpportunisticTypeResolver			pub struct OpportunisticTypeResolver<'a, 'tcx:'a> 
OptLevel			pub enum OptLevel 
OptionStability			pub enum OptionStability { Stable, Unstable }
Options			pub struct Options 
Original			struct Original { kind: ShadowKind, span: Span }
OrphanCheckErr			pub enum OrphanCheckErr<'tcx> 
OutlivesPredicate			pub struct OutlivesPredicate<A,B>(pub A, pub B); \/\/ `A : B`
OutputFilenames			impl OutputFilenames 
OutputFilenames			pub struct OutputFilenames 
OutputType			pub enum OutputType 
OverloadedCallType			enum OverloadedCallType 
OverloadedCallType			impl OverloadedCallType 
PMDSource			enum PMDSource 
PMDSource			impl PMDSource 
PState			pub struct PState<'a, 'tcx: 'a> 
ParamSpace			impl ParamSpace 
ParamSpace			pub enum ParamSpace 
ParamTy			impl ParamTy 
ParamTy			pub struct ParamTy 
ParameterEnvironment			impl<'a, 'tcx> ParameterEnvironment<'a, 'tcx> 
ParameterEnvironment			pub struct ParameterEnvironment<'a, 'tcx:'a> 
PartialEq for InternedTy			impl<'tcx> PartialEq for InternedTy<'tcx> 
PartialEq for LintId			impl PartialEq for LintId 
PartialEq for TyS			impl<'tcx> PartialEq for TyS<'tcx> 
PassArgs			enum PassArgs 
Passes			impl Passes 
Passes			pub enum Passes 
PathElem			impl PathElem 
PathElem			pub enum PathElem 
PathKind			pub enum PathKind 
PathResolution			impl PathResolution 
PathResolution			pub struct PathResolution 
PluginLoader			impl<'a> PluginLoader<'a> 
PluginLoader			struct PluginLoader<'a> 
PluginRegistrar			pub struct PluginRegistrar 
PointerKind			pub enum PointerKind 
PolyFnOutput			impl<'tcx> PolyFnOutput<'tcx> 
PolyFnSig			impl<'tcx> PolyFnSig<'tcx> 
PolyProjectionPredicate			impl<'tcx> PolyProjectionPredicate<'tcx> 
PolyTraitPredicate			impl<'tcx> PolyTraitPredicate<'tcx> 
PolyTraitRef			impl<'tcx> PolyTraitRef<'tcx> 
Predicate			impl<'tcx> Predicate<'tcx> 
Predicate			pub enum Predicate<'tcx> 
PredicateSet			impl<'a,'tcx> PredicateSet<'a,'tcx> 
PredicateSet			struct PredicateSet<'a,'tcx:'a> 
PrintRequest			pub enum PrintRequest 
PrivateDep			pub enum PrivateDep 
ProjectedTy			enum ProjectedTy<'tcx> 
ProjectionPredicate			pub struct ProjectionPredicate<'tcx> 
ProjectionTy			impl<'tcx> ProjectionTy<'tcx> 
ProjectionTy			pub struct ProjectionTy<'tcx> 
ProjectionTyCandidate			enum ProjectionTyCandidate<'tcx> 
ProjectionTyCandidateSet			struct ProjectionTyCandidateSet<'tcx> 
ProjectionTyError			pub enum ProjectionTyError<'tcx> 
PropagationContext			impl<'a, 'b, 'tcx, O:DataFlowOperator> PropagationContext<'a, 'b, 'tcx, O> 
PropagationContext			struct PropagationContext<'a, 'b: 'a, 'tcx: 'b, O: 'a> 
ReachableContext			impl<'a, 'tcx> ReachableContext<'a, 'tcx> 
ReachableContext			struct ReachableContext<'a, 'tcx: 'a> 
RebuildPathInfo			struct RebuildPathInfo<'a> 
Rebuilder			impl<'a, 'tcx> Rebuilder<'a, 'tcx> 
Rebuilder			struct Rebuilder<'a, 'tcx: 'a> 
ReferencesError			pub trait ReferencesError 
ReferencesError for Binder			impl<T:ReferencesError> ReferencesError for Binder<T> 
ReferencesError for EquatePredicate			impl<'tcx> ReferencesError for EquatePredicate<'tcx>
ReferencesError for OutlivesPredicate			impl<A,B> ReferencesError for OutlivesPredicate<A,B>
ReferencesError for Predicate			impl<'tcx> ReferencesError for Predicate<'tcx> 
ReferencesError for ProjectionPredicate			impl<'tcx> ReferencesError for ProjectionPredicate<'tcx> 
ReferencesError for Rc			impl<T:ReferencesError> ReferencesError for Rc<T> 
ReferencesError for Region			impl ReferencesError for Region
ReferencesError for TraitPredicate			impl<'tcx> ReferencesError for TraitPredicate<'tcx> 
ReferencesError for TraitRef			impl<'tcx> ReferencesError for TraitRef<'tcx> 
ReferencesError for Ty			impl<'tcx> ReferencesError for Ty<'tcx> 
Region			impl Region 
Region			pub enum Region 
RegionAndOrigin			struct RegionAndOrigin<'tcx> 
RegionEraser			pub struct RegionEraser<'a, 'tcx: 'a> 
RegionEscape			pub trait RegionEscape 
RegionEscape for Binder			impl<'tcx,T:RegionEscape> RegionEscape for Binder<T> 
RegionEscape for EquatePredicate			impl<'tcx> RegionEscape for EquatePredicate<'tcx> 
RegionEscape for GenericPredicates			impl<'tcx> RegionEscape for GenericPredicates<'tcx> 
RegionEscape for OutlivesPredicate			impl<T:RegionEscape,U:RegionEscape> RegionEscape for OutlivesPredicate<T,U> 
RegionEscape for Predicate			impl<'tcx> RegionEscape for Predicate<'tcx> 
RegionEscape for ProjectionPredicate			impl<'tcx> RegionEscape for ProjectionPredicate<'tcx> 
RegionEscape for ProjectionTy			impl<'tcx> RegionEscape for ProjectionTy<'tcx> 
RegionEscape for Region			impl RegionEscape for Region 
RegionEscape for Substs			impl<'tcx> RegionEscape for Substs<'tcx> 
RegionEscape for TraitPredicate			impl<'tcx> RegionEscape for TraitPredicate<'tcx> 
RegionEscape for TraitRef			impl<'tcx> RegionEscape for TraitRef<'tcx> 
RegionEscape for Ty			impl<'tcx> RegionEscape for Ty<'tcx> 
RegionEscape for TypeScheme			impl<'tcx> RegionEscape for TypeScheme<'tcx> 
RegionEscape for VecPerParamSpace			impl<'tcx,T:RegionEscape> RegionEscape for VecPerParamSpace<T> 
RegionEscape for subst			impl<'tcx> RegionEscape for subst::RegionSubsts 
RegionEscape for traits			impl<'tcx,P:RegionEscape> RegionEscape for traits::Obligation<'tcx,P> 
RegionFolder			impl<'a, 'tcx> RegionFolder<'a, 'tcx> 
RegionFolder			pub struct RegionFolder<'a, 'tcx: 'a> 
RegionMaps			impl RegionMaps 
RegionMaps			pub struct RegionMaps 
RegionObligation			pub struct RegionObligation<'tcx> 
RegionParameterDef			impl RegionParameterDef 
RegionParameterDef			pub struct RegionParameterDef 
RegionReplacer			impl<'a, 'tcx> RegionReplacer<'a, 'tcx> 
RegionReplacer			struct RegionReplacer<'a, 'tcx: 'a> 
RegionResolutionError			pub enum RegionResolutionError<'tcx> 
RegionResolutionVisitor			struct RegionResolutionVisitor<'a> 
RegionSnapshot			pub struct RegionSnapshot 
RegionSubsts			impl RegionSubsts 
RegionSubsts			pub enum RegionSubsts 
RegionVarBindings			impl<'a, 'tcx> RegionVarBindings<'a, 'tcx> 
RegionVarBindings			pub struct RegionVarBindings<'a, 'tcx: 'a> 
RegionVariableOrigin			impl RegionVariableOrigin 
RegionVariableOrigin			pub enum RegionVariableOrigin 
RegionVid			pub struct RegionVid 
RegistrarFinder			struct RegistrarFinder 
Registry			impl<'a> Registry<'a> 
Registry			pub struct Registry<'a> 
Relate			pub trait Relate<'a,'tcx>: TypeFoldable<'tcx> 
Relate for Box			impl<'a,'tcx:'a,T> Relate<'a,'tcx> for Box<T>
Relate for Rc			impl<'a,'tcx:'a,T> Relate<'a,'tcx> for Rc<T>
Relate for Ty			impl<'a,'tcx:'a> Relate<'a,'tcx> for Ty<'tcx> 
Relate for Vec			impl<'a,'tcx:'a> Relate<'a,'tcx> for Vec<ty::PolyProjectionPredicate<'tcx>> 
Relate for abi			impl<'a,'tcx:'a> Relate<'a,'tcx> for abi::Abi 
Relate for ast			impl<'a,'tcx:'a> Relate<'a,'tcx> for ast::Unsafety 
Relate for ty			impl<'a,'tcx:'a,T> Relate<'a,'tcx> for ty::Binder<T>
Relate for ty			impl<'a,'tcx:'a> Relate<'a,'tcx> for ty::BareFnTy<'tcx> 
Relate for ty			impl<'a,'tcx:'a> Relate<'a,'tcx> for ty::BuiltinBounds 
Relate for ty			impl<'a,'tcx:'a> Relate<'a,'tcx> for ty::ExistentialBounds<'tcx> 
Relate for ty			impl<'a,'tcx:'a> Relate<'a,'tcx> for ty::FnSig<'tcx> 
Relate for ty			impl<'a,'tcx:'a> Relate<'a,'tcx> for ty::ProjectionPredicate<'tcx> 
Relate for ty			impl<'a,'tcx:'a> Relate<'a,'tcx> for ty::ProjectionTy<'tcx> 
Relate for ty			impl<'a,'tcx:'a> Relate<'a,'tcx> for ty::Region 
Relate for ty			impl<'a,'tcx:'a> Relate<'a,'tcx> for ty::TraitRef<'tcx> 
Relate for ty			impl<'a,'tcx:'a> Relate<'a,'tcx> for ty::mt<'tcx> 
RelateResultCompare			pub trait RelateResultCompare<'tcx, T> 
RelateResultCompare for RelateResult			impl<'tcx, T:Clone + PartialEq> RelateResultCompare<'tcx, T> for RelateResult<'tcx, T> 
RelationDir			impl RelationDir 
RelationDir			pub enum RelationDir 
RenamingRecorder			struct RenamingRecorder<'map> 
Representability			pub enum Representability 
Resolvable			pub trait Resolvable<'tcx> 
Resolvable for Ty			impl<'tcx> Resolvable<'tcx> for Ty<'tcx> 
Resolvable for ty			impl<'tcx> Resolvable<'tcx> for ty::PolyTraitRef<'tcx> 
Resolvable for ty			impl<'tcx> Resolvable<'tcx> for ty::TraitRef<'tcx> 
RustcOptGroup			impl RustcOptGroup 
RustcOptGroup			pub struct RustcOptGroup 
RvalueContext			struct RvalueContext<'a, 'tcx: 'a> 
RvalueContextDelegate			struct RvalueContextDelegate<'a, 'tcx: 'a> 
SameRegions			impl SameRegions 
SameRegions			pub struct SameRegions 
ScopeChain			enum ScopeChain<'a> 
SearchPaths			impl SearchPaths 
SearchPaths			pub struct SearchPaths 
SelectionCache			impl<'tcx> SelectionCache<'tcx> 
SelectionCache			pub struct SelectionCache<'tcx> 
SelectionCandidate			enum SelectionCandidate<'tcx> 
SelectionCandidateSet			struct SelectionCandidateSet<'tcx> 
SelectionContext			impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> 
SelectionContext			pub struct SelectionContext<'cx, 'tcx:'cx> 
SelectionError			pub enum SelectionError<'tcx> 
SeparateVecsPerParamSpace			pub struct SeparateVecsPerParamSpace<T> 
Session			impl Session 
Session			pub struct Session 
ShadowKind			enum ShadowKind { Label, Lifetime }
ShadowKind			impl ShadowKind 
Shadower			struct Shadower { kind: ShadowKind, span: Span }
SideTableEncodingIdVisitor			struct SideTableEncodingIdVisitor<'a, 'b:'a, 'c:'a, 'tcx:'c> 
SimplifiedType			pub enum SimplifiedType 
Snapshot			pub struct Snapshot 
Specials			struct Specials 
StaticInliner			impl<'a, 'tcx> StaticInliner<'a, 'tcx> 
StaticInliner			pub struct StaticInliner<'a, 'tcx: 'a> 
Stats			    struct Stats 
StructFieldVisitor			    struct StructFieldVisitor<'a, 'b:'a> 
Sub			impl<'a, 'tcx> Sub<'a, 'tcx> 
Sub			pub struct Sub<'a, 'tcx: 'a> 
SubregionOrigin			impl<'tcx> SubregionOrigin<'tcx> 
SubregionOrigin			pub enum SubregionOrigin<'tcx> 
Subst			pub trait Subst<'tcx> : Sized 
SubstFolder			impl<'a,'tcx> SubstFolder<'a,'tcx> 
SubstFolder			struct SubstFolder<'a, 'tcx: 'a> 
Substs			impl<'tcx> Substs<'tcx> 
Substs			pub struct Substs<'tcx> 
Subtract			struct Subtract;
SupertraitDefIds			pub struct SupertraitDefIds<'cx, 'tcx:'cx> 
TC			    mod TC 
TargetLint			enum TargetLint 
Test			enum Test 
Test			impl Test 
ThreadLocalTyCx			    struct ThreadLocalTyCx;
ToPolyTraitRef			pub trait ToPolyTraitRef<'tcx> 
ToPolyTraitRef for PolyProjectionPredicate			impl<'tcx> ToPolyTraitRef<'tcx> for PolyProjectionPredicate<'tcx> 
ToPolyTraitRef for PolyTraitPredicate			impl<'tcx> ToPolyTraitRef<'tcx> for PolyTraitPredicate<'tcx> 
ToPolyTraitRef for TraitRef			impl<'tcx> ToPolyTraitRef<'tcx> for TraitRef<'tcx> 
ToPrimitive			pub trait ToPrimitive 
ToPrimitive for i64			impl ToPrimitive for i64 
ToPrimitive for u64			impl ToPrimitive for u64 
ToType			pub trait ToType<'tcx> 
ToType for IntVarValue			impl<'tcx> ToType<'tcx> for IntVarValue 
ToType for ast			impl<'tcx> ToType<'tcx> for ast::FloatTy 
TrackMatchMode			enum TrackMatchMode 
TrackMatchMode			impl TrackMatchMode 
Trait			trait Trait { type AssociatedType; }
Trait for i8			impl Trait for i8 { type AssociatedType = &'static str; }
TraitAndProjections			struct TraitAndProjections<'tcx>(ty::TraitRef<'tcx>, Vec<ty::ProjectionPredicate<'tcx>>);
TraitDef			impl<'tcx> TraitDef<'tcx> 
TraitDef			pub struct TraitDef<'tcx> 
TraitObligation			impl<'tcx> TraitObligation<'tcx> 
TraitObligationStack			impl<'o,'tcx> TraitObligationStack<'o,'tcx> 
TraitObligationStack			struct TraitObligationStack<'prev, 'tcx: 'prev> 
TraitObligationStackList			impl<'o,'tcx> TraitObligationStackList<'o,'tcx> 
TraitObligationStackList			struct TraitObligationStackList<'o,'tcx:'o> 
TraitPredicate			impl<'tcx> TraitPredicate<'tcx> 
TraitPredicate			pub struct TraitPredicate<'tcx> 
TraitRef			impl<'tcx> TraitRef<'tcx> 
TraitRef			pub struct TraitRef<'tcx> 
TraitTy			impl<'tcx> TraitTy<'tcx> 
TraitTy			pub struct TraitTy<'tcx> 
TransmuteRestriction			pub struct TransmuteRestriction<'tcx> 
TupleArgumentsFlag			pub enum TupleArgumentsFlag { Yes, No }
TwoRegions			pub struct TwoRegions 
TyS			impl<'tcx> TyS<'tcx> 
TyS			pub struct TyS<'tcx> 
TyVid			pub struct TyVid 
TypeContents			impl TypeContents 
TypeContents			pub struct TypeContents 
TypeFoldable			            impl<'tcx> TypeFoldable<'tcx> for 
TypeFoldable			pub trait TypeFoldable<'tcx>: fmt::Debug + Clone 
TypeFoldable for TraitAndProjections			impl<'tcx> TypeFoldable<'tcx> for TraitAndProjections<'tcx> 
TypeFoldable for Ty			impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> 
TypeFoldable for subst			impl<'tcx> TypeFoldable<'tcx> for subst::Substs<'tcx> 
TypeFoldable for traits			impl<'tcx,O> TypeFoldable<'tcx> for traits::Obligation<'tcx,O>
TypeFoldable for traits			impl<'tcx> TypeFoldable<'tcx> for traits::VtableObjectData<'tcx> 
TypeFoldable for ty			impl<'a, 'tcx> TypeFoldable<'tcx> for ty::ParameterEnvironment<'a, 'tcx> where 'tcx: 'a 
TypeFoldable for ty			impl<'tcx,T,U> TypeFoldable<'tcx> for ty::OutlivesPredicate<T,U>
TypeFoldable for ty			impl<'tcx> TypeFoldable<'tcx> for ty::AutoRef<'tcx> 
TypeFoldable for ty			impl<'tcx> TypeFoldable<'tcx> for ty::BareFnTy<'tcx> 
TypeFoldable for ty			impl<'tcx> TypeFoldable<'tcx> for ty::BuiltinBounds 
TypeFoldable for ty			impl<'tcx> TypeFoldable<'tcx> for ty::ClosureTy<'tcx> 
TypeFoldable for ty			impl<'tcx> TypeFoldable<'tcx> for ty::ClosureUpvar<'tcx> 
TypeFoldable for ty			impl<'tcx> TypeFoldable<'tcx> for ty::EquatePredicate<'tcx> 
TypeFoldable for ty			impl<'tcx> TypeFoldable<'tcx> for ty::ExistentialBounds<'tcx> 
TypeFoldable for ty			impl<'tcx> TypeFoldable<'tcx> for ty::FnOutput<'tcx> 
TypeFoldable for ty			impl<'tcx> TypeFoldable<'tcx> for ty::FnSig<'tcx> 
TypeFoldable for ty			impl<'tcx> TypeFoldable<'tcx> for ty::GenericPredicates<'tcx> 
TypeFoldable for ty			impl<'tcx> TypeFoldable<'tcx> for ty::Generics<'tcx> 
TypeFoldable for ty			impl<'tcx> TypeFoldable<'tcx> for ty::InstantiatedPredicates<'tcx> 
TypeFoldable for ty			impl<'tcx> TypeFoldable<'tcx> for ty::ItemSubsts<'tcx> 
TypeFoldable for ty			impl<'tcx> TypeFoldable<'tcx> for ty::MethodOrigin<'tcx> 
TypeFoldable for ty			impl<'tcx> TypeFoldable<'tcx> for ty::ObjectLifetimeDefault 
TypeFoldable for ty			impl<'tcx> TypeFoldable<'tcx> for ty::Predicate<'tcx> 
TypeFoldable for ty			impl<'tcx> TypeFoldable<'tcx> for ty::ProjectionPredicate<'tcx> 
TypeFoldable for ty			impl<'tcx> TypeFoldable<'tcx> for ty::ProjectionTy<'tcx> 
TypeFoldable for ty			impl<'tcx> TypeFoldable<'tcx> for ty::Region 
TypeFoldable for ty			impl<'tcx> TypeFoldable<'tcx> for ty::RegionParameterDef 
TypeFoldable for ty			impl<'tcx> TypeFoldable<'tcx> for ty::TraitPredicate<'tcx> 
TypeFoldable for ty			impl<'tcx> TypeFoldable<'tcx> for ty::TraitRef<'tcx> 
TypeFoldable for ty			impl<'tcx> TypeFoldable<'tcx> for ty::TypeParameterDef<'tcx> 
TypeFoldable for ty			impl<'tcx> TypeFoldable<'tcx> for ty::field<'tcx> 
TypeFoldable for ty			impl<'tcx> TypeFoldable<'tcx> for ty::mt<'tcx> 
TypeFolder			pub trait TypeFolder<'tcx> : Sized 
TypeFolder for AssociatedTypeNormalizer			impl<'a,'b,'tcx> TypeFolder<'tcx> for AssociatedTypeNormalizer<'a,'b,'tcx> 
TypeFolder for BottomUpFolder			impl<'a, 'tcx, F> TypeFolder<'tcx> for BottomUpFolder<'a, 'tcx, F> where
TypeFolder for RegionEraser			impl<'a, 'tcx> TypeFolder<'tcx> for RegionEraser<'a, 'tcx> 
TypeFolder for RegionFolder			impl<'a, 'tcx> TypeFolder<'tcx> for RegionFolder<'a, 'tcx>
TypeFolder for RegionReplacer			impl<'a, 'tcx> TypeFolder<'tcx> for RegionReplacer<'a, 'tcx>
TypeFolder for SubstFolder			impl<'a, 'tcx> TypeFolder<'tcx> for SubstFolder<'a, 'tcx> 
TypeFolder for TypeFreshener			impl<'a, 'tcx> TypeFolder<'tcx> for TypeFreshener<'a, 'tcx> 
TypeFreshener			impl<'a, 'tcx> TypeFreshener<'a, 'tcx> 
TypeFreshener			pub struct TypeFreshener<'a, 'tcx:'a> 
TypeOrigin			impl TypeOrigin 
TypeOrigin			pub enum TypeOrigin 
TypeParameterDef			pub struct TypeParameterDef<'tcx> 
TypeRelation			pub trait TypeRelation<'a,'tcx> : Sized 
TypeRelation for Bivariate			impl<'a, 'tcx> TypeRelation<'a, 'tcx> for Bivariate<'a, 'tcx> 
TypeRelation for Equate			impl<'a, 'tcx> TypeRelation<'a,'tcx> for Equate<'a, 'tcx> 
TypeRelation for Glb			impl<'a, 'tcx> TypeRelation<'a, 'tcx> for Glb<'a, 'tcx> 
TypeRelation for Lub			impl<'a, 'tcx> TypeRelation<'a, 'tcx> for Lub<'a, 'tcx> 
TypeRelation for Match			impl<'a, 'tcx> TypeRelation<'a, 'tcx> for Match<'a, 'tcx> 
TypeRelation for Sub			impl<'a, 'tcx> TypeRelation<'a, 'tcx> for Sub<'a, 'tcx> 
TypeScheme			pub struct TypeScheme<'tcx> 
TypeTrace			impl<'tcx> TypeTrace<'tcx> 
TypeTrace			pub struct TypeTrace<'tcx> 
TypeVariableData			struct TypeVariableData<'tcx> 
TypeVariableTable			impl<'tcx> TypeVariableTable<'tcx> 
TypeVariableTable			pub struct TypeVariableTable<'tcx> 
TypeVariableValue			enum TypeVariableValue<'tcx> 
TypeVariants			pub enum TypeVariants<'tcx> 
TypeWalker			impl<'tcx> TypeWalker<'tcx> 
TypeWalker			pub struct TypeWalker<'tcx> 
Typer			pub trait Typer<'tcx> : ty::ClosureTyper<'tcx> 
UintTy			impl UintTy 
UintTy			pub enum UintTy { U8, U16, U32, U64 }
UnconstrainedNumeric			pub enum UnconstrainedNumeric 
UndoEntry			enum UndoEntry 
UndoLogEntry			pub enum UndoLogEntry 
UnifyKey for ty			impl UnifyKey for ty::FloatVid 
UnifyKey for ty			impl UnifyKey for ty::IntVid 
Union			struct Union;
UnsafeContext			enum UnsafeContext 
Upvar			pub struct Upvar 
UpvarBorrow			pub struct UpvarBorrow 
UpvarCapture			pub enum UpvarCapture 
UpvarId			pub struct UpvarId 
Usefulness			enum Usefulness 
Users			struct Users 
ValuePairs			pub enum ValuePairs<'tcx> 
VarData			struct VarData 
VarKind			enum VarKind 
VarValue			pub enum VarValue { NoValue, Value(Region), ErrorValue }
Variable			impl Variable 
Variable			struct Variable(usize);
Variance			pub enum Variance 
VariantInfo			impl<'tcx> VariantInfo<'tcx> 
VariantInfo			pub struct VariantInfo<'tcx> 
VecPerParamSpace			impl<T> VecPerParamSpace<T> 
VecPerParamSpace			pub struct VecPerParamSpace<T> 
Verify			pub enum Verify<'tcx> 
Visitor for Annotator			impl<'a, 'tcx, 'v> Visitor<'v> for Annotator<'a, 'tcx> 
Visitor for AtBindingPatternVisitor			impl<'a, 'b, 'tcx, 'v> Visitor<'v> for AtBindingPatternVisitor<'a, 'b, 'tcx> 
Visitor for BlockQueryVisitor			impl<'v, P> Visitor<'v> for BlockQueryVisitor<P> where P: FnMut(&ast::Expr) -> bool 
Visitor for CheckCrateVisitor			impl<'a, 'tcx, 'v> Visitor<'v> for CheckCrateVisitor<'a, 'tcx> 
Visitor for CheckCrateVisitor			impl<'v, 'a, 'ast> Visitor<'v> for CheckCrateVisitor<'a, 'ast> 
Visitor for CheckItemRecursionVisitor			impl<'a, 'ast, 'v> Visitor<'v> for CheckItemRecursionVisitor<'a, 'ast> 
Visitor for CheckLoopVisitor			impl<'a, 'v> Visitor<'v> for CheckLoopVisitor<'a> 
Visitor for Checker			impl<'a, 'v, 'tcx> Visitor<'v> for Checker<'a, 'tcx> 
Visitor for Context			impl<'a, 'tcx, 'v> Visitor<'v> for Context<'a, 'tcx> 
Visitor for Context			impl<'a, 'v> Visitor<'v> for Context<'a> 
Visitor for DeadVisitor			impl<'a, 'tcx, 'v> Visitor<'v> for DeadVisitor<'a, 'tcx> 
Visitor for EffectCheckVisitor			impl<'a, 'tcx, 'v> Visitor<'v> for EffectCheckVisitor<'a, 'tcx> 
Visitor for EncodeVisitor			impl<'a, 'b, 'c, 'tcx, 'v> Visitor<'v> for EncodeVisitor<'a, 'b, 'c, 'tcx> 
Visitor for EntryContext			impl<'a, 'ast, 'v> Visitor<'v> for EntryContext<'a, 'ast> 
Visitor for FreeLifetimeCollector			    impl<'a, 'v> Visitor<'v> for FreeLifetimeCollector<'a> 
Visitor for GatherLabels			    impl<'v, 'a> Visitor<'v> for GatherLabels<'a> 
Visitor for ImplVisitor			impl<'a, 'b, 'c, 'tcx, 'v> Visitor<'v> for ImplVisitor<'a, 'b, 'c, 'tcx> 
Visitor for IntrinsicCheckingVisitor			impl<'a, 'tcx, 'v> Visitor<'v> for IntrinsicCheckingVisitor<'a, 'tcx> 
Visitor for IrMaps			impl<'a, 'tcx, 'v> Visitor<'v> for IrMaps<'a, 'tcx> 
Visitor for LanguageItemCollector			impl<'a, 'v> Visitor<'v> for LanguageItemCollector<'a> 
Visitor for LifeSeeder			impl<'v> Visitor<'v> for LifeSeeder 
Visitor for LifetimeContext			impl<'a, 'v> Visitor<'v> for LifetimeContext<'a> 
Visitor for Liveness			impl<'a, 'tcx, 'v> Visitor<'v> for Liveness<'a, 'tcx> 
Visitor for LoopQueryVisitor			impl<'v, P> Visitor<'v> for LoopQueryVisitor<P> where P: FnMut(&ast::Expr_) -> bool 
Visitor for MacroLoader			impl<'a, 'v> Visitor<'v> for MacroLoader<'a> 
Visitor for MarkSymbolVisitor			impl<'a, 'tcx, 'v> Visitor<'v> for MarkSymbolVisitor<'a, 'tcx> 
Visitor for MatchCheckCtxt			impl<'a, 'tcx, 'v> Visitor<'v> for MatchCheckCtxt<'a, 'tcx> 
Visitor for NodeCollector			impl<'ast> Visitor<'ast> for NodeCollector<'ast> 
Visitor for ReachableContext			impl<'a, 'tcx, 'v> Visitor<'v> for ReachableContext<'a, 'tcx> 
Visitor for RegionResolutionVisitor			impl<'a, 'v> Visitor<'v> for RegionResolutionVisitor<'a> 
Visitor for RegistrarFinder			impl<'v> Visitor<'v> for RegistrarFinder 
Visitor for StructFieldVisitor			    impl<'a, 'b, 'v> Visitor<'v> for StructFieldVisitor<'a, 'b> 
Vtable			impl<'tcx, N> Vtable<'tcx, N> 
Vtable			pub enum Vtable<'tcx, N> 
VtableBuiltinData			pub struct VtableBuiltinData<N> 
VtableClosureData			pub struct VtableClosureData<'tcx, N> 
VtableDefaultImplData			pub struct VtableDefaultImplData<N> 
VtableImplData			pub struct VtableImplData<'tcx, N> 
VtableObjectData			pub struct VtableObjectData<'tcx> 
WalkState			        struct WalkState<'tcx> 
WitnessPreference			enum WitnessPreference 
X			struct X { x: (), }
a_is_expected			    fn a_is_expected(&self) -> bool { self.fields.a_is_expected }
a_is_expected			    fn a_is_expected(&self) -> bool { self.fields.a_is_expected }
a_is_expected			    fn a_is_expected(&self) -> bool { self.fields.a_is_expected }
a_is_expected			    fn a_is_expected(&self) -> bool { self.fields.a_is_expected }
a_is_expected			    fn a_is_expected(&self) -> bool { self.fields.a_is_expected }
a_is_expected			    fn a_is_expected(&self) -> bool { true } \/\/ irrelevant
a_is_expected			    fn a_is_expected(&self) -> bool;
abort_if_errors			    pub fn abort_if_errors(&self) 
acc			    fn acc(&mut self, ln: LiveNode, var: Variable, acc: u32) 
access_path			    fn access_path(&mut self, expr: &Expr, succ: LiveNode, acc: u32)
accum_substs			    fn accum_substs(accumulator: &mut Vec<Region>, substs: &Substs) 
accumulate_from_adt			    fn accumulate_from_adt(&mut self,
accumulate_from_assoc_types			    fn accumulate_from_assoc_types(&mut self,
accumulate_from_assoc_types_transitive			    fn accumulate_from_assoc_types_transitive(&mut self,
accumulate_from_object_ty			    fn accumulate_from_object_ty(&mut self,
accumulate_from_rptr			    fn accumulate_from_rptr(&mut self,
accumulate_from_ty			    fn accumulate_from_ty(&mut self, ty: Ty<'tcx>) 
accumulate_lifetimes_in_type			pub fn accumulate_lifetimes_in_type(accumulator: &mut Vec<ty::Region>,
add_ast_node			    fn add_ast_node(&mut self, id: ast::NodeId, preds: &[CFGIndex]) -> CFGIndex 
add_bound_computation			    fn add_bound_computation(&mut self, computation: &FlagComputation) 
add_bounds			    fn add_bounds(&mut self, bounds: &ExistentialBounds) 
add_constraint			    fn add_constraint(&self,
add_contained_edge			    fn add_contained_edge(&mut self,
add_depth			    fn add_depth(&mut self, depth: u32) 
add_dummy_node			    fn add_dummy_node(&mut self, preds: &[CFGIndex]) -> CFGIndex 
add_entries_from_fn_decl			    fn add_entries_from_fn_decl(index: &mut NodeMap<Vec<CFGIndex>>,
add_exiting_edge			    fn add_exiting_edge(&mut self,
add_extern_mod_stmt_cnum			    pub fn add_extern_mod_stmt_cnum(&self,
add_flags			    fn add_flags(&mut self, flags: TypeFlags) 
add_fn_sig			    fn add_fn_sig(&mut self, fn_sig: &PolyFnSig) 
add_gen			    pub fn add_gen(&mut self, id: ast::NodeId, bit: usize) 
add_given			    pub fn add_given(&self,
add_given			    pub fn add_given(&self,
add_kill			    pub fn add_kill(&mut self, kind: KillFrom, id: ast::NodeId, bit: usize) 
add_kills_from_flow_exits			    pub fn add_kills_from_flow_exits(&mut self, cfg: &cfg::CFG) 
add_library			fn add_library(sess: &session::Session,
add_lint			    pub fn add_lint(&self,
add_live_node			    fn add_live_node(&mut self, lnk: LiveNodeKind) -> LiveNode 
add_live_node_for_node			    fn add_live_node_for_node(&mut self, node_id: NodeId, lnk: LiveNodeKind) 
add_node			    fn add_node(&mut self, data: CFGNodeData, preds: &[CFGIndex]) -> CFGIndex 
add_path			    pub fn add_path(&mut self, path: &str) 
add_projection_predicate			    fn add_projection_predicate(&mut self, projection_predicate: &ProjectionPredicate) 
add_projection_ty			    fn add_projection_ty(&mut self, projection_ty: &ProjectionTy) 
add_qualif			    fn add_qualif(&mut self, qualif: ConstQualif) 
add_region			    fn add_region(&mut self, r: Region) 
add_returning_edge			    fn add_returning_edge(&mut self,
add_sty			    fn add_sty(&mut self, st: &TypeVariants) 
add_substs			    fn add_substs(&mut self, substs: &Substs) 
add_to_index			    fn add_to_index(item: &ast::Item, rbml_w: &mut Encoder,
add_ty			    fn add_ty(&mut self, ty: Ty) 
add_tys			    fn add_tys(&mut self, tys: &[Ty]) 
add_unreachable_node			    fn add_unreachable_node(&mut self) -> CFGIndex 
add_used_crate_source			    pub fn add_used_crate_source(&self, src: CrateSource) 
add_used_library			    pub fn add_used_library(&self, lib: String, kind: NativeLibraryKind) 
add_used_link_args			    pub fn add_used_link_args(&self, args: &str) 
add_variable			    fn add_variable(&mut self, vk: VarKind) -> Variable 
add_verify			    fn add_verify(&self,
adjust_node			        fn adjust_node(this: &RegionVarBindings,
adjust_space			    fn adjust_space(&mut self) 
adjust_ty			pub fn adjust_ty<'tcx, F>(cx: &ctxt<'tcx>,
adjust_ty_for_autoref			pub fn adjust_ty_for_autoref<'tcx>(cx: &ctxt<'tcx>,
adjustments			    fn adjustments<'a>(&'a self) -> &'a RefCell<NodeMap<ty::AutoAdjustment<'tcx>>>;
adjustments			    fn adjustments(&self) -> &RefCell<NodeMap<ty::AutoAdjustment<'tcx>>> 
all			    pub fn all() -> [ParamSpace; 3] 
all			    pub fn all<P>(&self, pred: P) -> bool where P: FnMut(&T) -> bool 
all_constructors			fn all_constructors(cx: &MatchCheckCtxt, left_ty: Ty,
all_vecs			    pub fn all_vecs<P>(&self, mut pred: P) -> bool where
ancestors_of			        fn ancestors_of(this: &RegionMaps, scope: CodeExtent) -> Vec<CodeExtent> 
and			                               struct and enum constructors", v.msg());
annotate			    fn annotate<F>(&mut self, id: NodeId, use_parent: bool,
anonymize_late_bound_regions			pub fn anonymize_late_bound_regions<'tcx, T>(
any			    pub fn any<P>(&self, pred: P) -> bool where P: FnMut(&T) -> bool 
append_configuration			pub fn append_configuration(cfg: &mut ast::CrateConfig,
append_to_same_regions			        fn append_to_same_regions(same_regions: &mut Vec<SameRegions>,
apply_gen_kill			    fn apply_gen_kill(&self, cfgidx: CFGIndex, bits: &mut [usize]) 
apply_lang_items			    fn apply_lang_items(cx: &ctxt, did: ast::DefId, tc: TypeContents)
are_equal_modulo_startpos			    fn are_equal_modulo_startpos(fm1: &codemap::FileMap,
are_inner_types_recursive			    fn are_inner_types_recursive<'tcx>(cx: &ctxt<'tcx>, sp: Span,
args			    pub fn args<'b>(&'b self) -> &'b Vec<P<ast::MetaItem>> 
arm_contains_ref_binding			pub fn arm_contains_ref_binding(dm: &DefMap, arm: &ast::Arm) -> Option<ast::Mutability> 
arm_contains_ref_binding			    pub fn arm_contains_ref_binding(&self, arm: &ast::Arm) -> Option<ast::Mutability> 
arm_move_mode			    fn arm_move_mode(&mut self, discr_cmt: mc::cmt<'tcx>, arm: &ast::Arm) -> TrackMatchMode 
arm_pats_bindings			    fn arm_pats_bindings<F>(&mut self, pat: Option<&ast::Pat>, f: F) where
array_element_ty			pub fn array_element_ty<'tcx>(tcx: &ctxt<'tcx>, ty: Ty<'tcx>) -> Option<Ty<'tcx>> 
as_int			    fn as_int(&self) -> isize { reader::doc_as_u64(*self) as isize }
as_int			    fn as_int(&self) -> isize;
as_opt_method			    pub fn as_opt_method(&self) -> Option<Rc<Method<'tcx>>> 
as_opt_param_ty			    pub fn as_opt_param_ty(&self) -> Option<ty::ParamTy> 
as_predicate			    fn as_predicate(&self) -> Predicate<'tcx> 
as_predicate			    fn as_predicate(&self) -> Predicate<'tcx>;
as_ref			    pub fn as_ref(&self) -> Binder<&T> 
as_slice			    pub fn as_slice<'a>(&'a self) -> &'a [u8] 
as_slice			    pub fn as_slice<'a>(&'a self) -> &'a [u8] 
as_slice			    pub fn as_slice<'a>(&'a self) -> &'a [u8] { unsafe { &*self.data } }
as_slice			    pub fn as_slice(&self) -> &[T] 
as_str			    pub fn as_str(&self) -> String 
as_str			    pub fn as_str(self) -> &'static str 
as_str			    fn as_str(&self) -> &'static str 
asm_comments			    pub fn asm_comments(&self) -> bool { self.opts.debugging_opts.asm_comments }
assemble_builtin_bound_candidates			    fn assemble_builtin_bound_candidates<'o>(&mut self,
assemble_candidates			    fn assemble_candidates<'o>(&mut self,
assemble_candidates_for_unsizing			    fn assemble_candidates_for_unsizing(&mut self,
assemble_candidates_from_caller_bounds			    fn assemble_candidates_from_caller_bounds<'o>(&mut self,
assemble_candidates_from_default_impls			    fn assemble_candidates_from_default_impls(&mut self,
assemble_candidates_from_impls			fn assemble_candidates_from_impls<'cx,'tcx>(
assemble_candidates_from_impls			    fn assemble_candidates_from_impls(&mut self,
assemble_candidates_from_object_ty			    fn assemble_candidates_from_object_ty(&mut self,
assemble_candidates_from_object_type			fn assemble_candidates_from_object_type<'cx,'tcx>(
assemble_candidates_from_param_env			fn assemble_candidates_from_param_env<'cx,'tcx>(
assemble_candidates_from_predicates			fn assemble_candidates_from_predicates<'cx,'tcx,I>(
assemble_candidates_from_projected_tys			    fn assemble_candidates_from_projected_tys(&mut self,
assemble_candidates_from_trait_def			fn assemble_candidates_from_trait_def<'cx,'tcx>(
assemble_closure_candidates			    fn assemble_closure_candidates(&mut self,
assemble_fn_pointer_candidates			    fn assemble_fn_pointer_candidates(&mut self,
assigned_on_entry			    fn assigned_on_entry(&self, ln: LiveNode, var: Variable)
assigned_on_exit			    fn assigned_on_exit(&self, ln: LiveNode, var: Variable)
associated_consts			pub fn associated_consts<'tcx>(cx: &ctxt<'tcx>, id: ast::DefId)
associated_type_parameter_index			pub fn associated_type_parameter_index(cx: &ctxt,
ast_map			pub mod ast_map;
ast_map			impl<'a, 'b, 'c, 'tcx> ast_map::FoldOps for &'a DecodeContext<'b, 'c, 'tcx> 
ast_node			pub trait ast_node 
ast_node for ast			impl ast_node for ast::Expr 
ast_node for ast			impl ast_node for ast::Pat 
ast_ty_to_prim_ty			pub fn ast_ty_to_prim_ty<'tcx>(tcx: &ty::ctxt<'tcx>, ast_ty: &ast::Ty)
ast_util			impl<'a, 'b, 'c, 'tcx> ast_util::IdVisitingOperation for
ast_util::IdVisitingOperation for RenamingRecorder			impl<'map> ast_util::IdVisitingOperation for RenamingRecorder<'map> 
astconv_util			    pub mod astconv_util;
astencode			    pub mod astencode;
astencode_tag			    pub enum astencode_tag { \/\/ Reserves 0x50 -- 0x6f
attempt_static			fn attempt_static(sess: &session::Session) -> Option<DependencyList> 
attrs			    pub fn attrs(&self, id: NodeId) -> &'ast [Attribute] 
autoderef			    pub fn autoderef(expr_id: ast::NodeId, autoderef: u32) -> MethodCall 
back			pub mod back 
bar			    fn bar(&self) -> i32 { self.0 }
bar			    fn bar() -> i32 
basic_options			pub fn basic_options() -> Options 
baz			    fn baz() 
binders			    fn binders<T>(&mut self, a: &ty::Binder<T>, b: &ty::Binder<T>)
binders			    fn binders<T>(&mut self, a: &ty::Binder<T>, b: &ty::Binder<T>)
binders			    fn binders<T>(&mut self, a: &ty::Binder<T>, b: &ty::Binder<T>)
binders			    fn binders<T>(&mut self, a: &ty::Binder<T>, b: &ty::Binder<T>)
binders			    fn binders<T>(&mut self, a: &ty::Binder<T>, b: &ty::Binder<T>)
binders			    fn binders<T>(&mut self, a: &ty::Binder<T>, b: &ty::Binder<T>)
binders			    fn binders<T>(&mut self, a: &ty::Binder<T>, b: &ty::Binder<T>)
binds_late_bound_regions			pub fn binds_late_bound_regions<'tcx, T>(
bit_str			fn bit_str(bit: usize) -> String 
bitand			    fn bitand(self, other: TypeContents) -> TypeContents 
bitor			    fn bitor(self, other: TypeContents) -> TypeContents 
bits_to_string			fn bits_to_string(words: &[usize]) -> String 
bitwise			fn bitwise<Op:BitwiseOperator>(out_vec: &mut [usize],
bivariate			    pub fn bivariate(&self) -> Bivariate<'a, 'tcx> 
bivariate			pub mod bivariate;
block			    fn block(&mut self, blk: &ast::Block, pred: CFGIndex) -> CFGIndex 
block_query			pub fn block_query<P>(b: &ast::Block, p: P) -> bool where P: FnMut(&ast::Expr) -> bool 
blocks			pub mod blocks;
body			    pub fn body(self) -> &'a Block 
borrow			    fn borrow(&mut self,
borrow			    fn borrow(&mut self,
borrow			    fn borrow(&mut self,
borrow			    fn borrow(&mut self,
borrow			    fn borrow<'a>(&'a self) -> &'a TypeVariants<'tcx> 
borrow_expr			    fn borrow_expr(&mut self,
borrowck_stats			    pub fn borrowck_stats(&self) -> bool { self.opts.debugging_opts.borrowck_stats }
borrowed_contents			    fn borrowed_contents(region: ty::Region,
bound_list_is_sorted			fn bound_list_is_sorted(bounds: &[ty::PolyProjectionPredicate]) -> bool 
bug			    pub fn bug(&self, msg: &str) -> ! 
build			    pub fn build(&mut self, tcx: &ty::ctxt<'tcx>, krate: &Crate, export_map: &PublicItems) 
build			pub mod build;
build_configuration			pub fn build_configuration(sess: &Session) -> ast::CrateConfig 
build_nodeid_to_index			fn build_nodeid_to_index(decl: Option<&ast::FnDecl>,
build_session			pub fn build_session(sopts: config::Options,
build_session_			pub fn build_session_(sopts: config::Options,
build_session_options			pub fn build_session_options(matches: &getopts::Matches) -> Options 
build_target_config			pub fn build_target_config(opts: &Options, sp: &SpanHandler) -> Config 
build_to			        fn build_to(from: P<ast::Ty>,
builtin			pub mod builtin;
builtin_bound			    fn builtin_bound(&mut self,
calculate			pub fn calculate(tcx: &ty::ctxt) 
calculate_type			fn calculate_type(sess: &session::Session,
call			    fn call<'b, I: Iterator<Item=&'b ast::Expr>>(&mut self,
call_site			    fn call_site(&self) -> codemap::Span 
call_site			    fn call_site(&self) -> codemap::Span;
can_equate			    pub fn can_equate<'b,T>(&'b self, a: &T, b: &T) -> UnitResult<'tcx>
can_mk_eqty			pub fn can_mk_eqty<'a, 'tcx>(cx: &InferCtxt<'a, 'tcx>, a: Ty<'tcx>, b: Ty<'tcx>)
can_mk_subty			pub fn can_mk_subty<'a, 'tcx>(cx: &InferCtxt<'a, 'tcx>,
can_reach			pub fn can_reach<T, S>(edges_map: &HashMap<T, Vec<T>, S>, source: T,
can_type_implement_copy			pub fn can_type_implement_copy<'a,'tcx>(param_env: &ParameterEnvironment<'a, 'tcx>,
candidate_from_obligation			    fn candidate_from_obligation<'o>(&mut self,
candidate_from_obligation_no_cache			    fn candidate_from_obligation_no_cache<'o>(&mut self,
candidate_should_be_dropped_in_favor_of			    fn candidate_should_be_dropped_in_favor_of<'o>(&mut self,
canonicalize			    fn canonicalize(path: Option<PathBuf>) -> Option<PathBuf> 
cast			    pub mod cast;
cast_const			fn cast_const<'tcx>(tcx: &ty::ctxt<'tcx>, val: ConstVal, ty: Ty) -> CastResult 
cat_captured_var			    fn cat_captured_var(&mut self,
cat_def			    pub fn cat_def(&self,
cat_deref			    fn cat_deref<N:ast_node>(&self,
cat_deref_common			    fn cat_deref_common<N:ast_node>(&self,
cat_downcast			    pub fn cat_downcast<N:ast_node>(&self,
cat_expr			    pub fn cat_expr(&self, expr: &ast::Expr) -> McResult<cmt<'tcx>> 
cat_expr_autoderefd			    pub fn cat_expr_autoderefd(&self,
cat_expr_unadjusted			    pub fn cat_expr_unadjusted(&self, expr: &ast::Expr) -> McResult<cmt<'tcx>> 
cat_field			    pub fn cat_field<N:ast_node>(&self,
cat_imm_interior			    pub fn cat_imm_interior<N:ast_node>(&self,
cat_index			    pub fn cat_index<N:ast_node>(&self,
cat_pattern			    pub fn cat_pattern<F>(&self, cmt: cmt<'tcx>, pat: &ast::Pat, mut op: F) -> McResult<()>
cat_pattern_			    fn cat_pattern_<F>(&self, cmt: cmt<'tcx>, pat: &ast::Pat, op: &mut F)
cat_rvalue			    pub fn cat_rvalue(&self,
cat_rvalue_node			    pub fn cat_rvalue_node(&self,
cat_slice_pattern			    pub fn cat_slice_pattern(&self,
cat_tup_field			    pub fn cat_tup_field<N:ast_node>(&self,
cat_upvar			    fn cat_upvar(&self,
categorization			pub enum categorization<'tcx> 
cfg			    pub mod cfg;
cfg			    fn cfg(&self) -> ast::CrateConfig { Vec::new() }
cfg			    fn cfg(&self) -> ast::CrateConfig;
check			    fn check(&mut self, id: ast::DefId, span: Span, stab: &Option<&Stability>) 
check_arm			    fn check_arm(&mut self, _: &Context, _: &ast::Arm) { }
check_arm			fn check_arm(this: &mut Liveness, arm: &ast::Arm) 
check_arms			fn check_arms(cx: &MatchCheckCtxt,
check_attribute			    fn check_attribute(&mut self, _: &Context, _: &ast::Attribute) { }
check_block			    fn check_block(&mut self, _: &Context, _: &ast::Block) { }
check_candidate_cache			    fn check_candidate_cache(&mut self,
check_const			    pub mod check_const;
check_crate			pub fn check_crate(tcx: &ty::ctxt,
check_crate			    fn check_crate(&mut self, _: &Context, _: &ast::Crate) { }
check_crate			pub fn check_crate(tcx: &ty::ctxt) 
check_crate			pub fn check_crate(sess: &Session, krate: &ast::Crate) 
check_crate			pub fn check_crate(tcx: &ty::ctxt) 
check_crate			pub fn check_crate(tcx: &ty::ctxt,
check_crate			pub fn check_crate<'ast>(sess: &Session,
check_crate			pub fn check_crate(tcx: &ty::ctxt,
check_crate			pub fn check_crate(tcx: &ty::ctxt) 
check_crate			pub fn check_crate(tcx: &ctxt) 
check_crate			pub fn check_crate(tcx: &ty::ctxt) 
check_crate			pub fn check_crate(krate: &ast::Crate,
check_decl			    fn check_decl(&mut self, _: &Context, _: &ast::Decl) { }
check_def_id			    fn check_def_id(&mut self, def_id: ast::DefId) 
check_exhaustive			fn check_exhaustive(cx: &MatchCheckCtxt, sp: Span, matrix: &Matrix, source: ast::MatchSource) 
check_explicit_self			    fn check_explicit_self(&mut self, _: &Context, _: &ast::ExplicitSelf) { }
check_expr			    fn check_expr(&mut self, _: &Context, _: &ast::Expr) { }
check_expr			fn check_expr<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>,
check_expr			fn check_expr(cx: &mut MatchCheckCtxt, ex: &ast::Expr) 
check_expr			fn check_expr(this: &mut Liveness, expr: &Expr) 
check_expr			pub fn check_expr(tcx: &ty::ctxt, e: &ast::Expr,
check_expr_post			    fn check_expr_post(&mut self, _: &Context, _: &ast::Expr) { }
check_fn			    fn check_fn(&mut self, _: &Context,
check_fn			fn check_fn(cx: &mut MatchCheckCtxt,
check_fn			fn check_fn(_v: &Liveness,
check_for_bindings_named_the_same_as_variants			fn check_for_bindings_named_the_same_as_variants(cx: &MatchCheckCtxt, pat: &Pat) 
check_for_mutation_in_guard			fn check_for_mutation_in_guard<'a, 'tcx>(cx: &'a MatchCheckCtxt<'a, 'tcx>,
check_for_static_nan			fn check_for_static_nan(cx: &MatchCheckCtxt, pat: &Pat) 
check_foreign_item			    fn check_foreign_item(&mut self, _: &Context, _: &ast::ForeignItem) { }
check_generics			    fn check_generics(&mut self, _: &Context, _: &ast::Generics) { }
check_ident			    fn check_ident(&mut self, _: &Context, _: Span, _: ast::Ident) { }
check_if_label_shadows_lifetime			    fn check_if_label_shadows_lifetime<'a>(sess: &'a Session,
check_impl_item			    fn check_impl_item(&mut self, _: &Context, _: &ast::ImplItem) { }
check_item			    fn check_item(&mut self, cx: &Context, it: &ast::Item) 
check_item			    fn check_item(&mut self, _: &Context, _: &ast::Item) { }
check_item			pub fn check_item(tcx: &ty::ctxt, item: &ast::Item, warn_about_defns: bool,
check_legality_of_bindings_in_at_patterns			fn check_legality_of_bindings_in_at_patterns(cx: &MatchCheckCtxt, pat: &Pat) 
check_legality_of_move_bindings			fn check_legality_of_move_bindings(cx: &MatchCheckCtxt,
check_lifetime_def			    fn check_lifetime_def(&mut self, _: &Context, _: &ast::LifetimeDef) { }
check_lifetime_def_for_shadowing			    fn check_lifetime_def_for_shadowing(&self,
check_lifetime_defs			    fn check_lifetime_defs(&mut self, old_scope: Scope, lifetimes: &Vec<ast::LifetimeDef>) 
check_lifetime_ref			    fn check_lifetime_ref(&mut self, _: &Context, _: &ast::Lifetime) { }
check_local			    fn check_local(&mut self, _: &Context, _: &ast::Local) { }
check_local			fn check_local(cx: &mut MatchCheckCtxt, loc: &ast::Local) 
check_local			fn check_local(this: &mut Liveness, local: &ast::Local) 
check_loop			    pub mod check_loop;
check_lvalue			    fn check_lvalue(&mut self, expr: &Expr) 
check_mac			    fn check_mac(&mut self, _: &Context, _: &ast::Mac) { }
check_match			    pub mod check_match;
check_mod			    fn check_mod(&mut self, _: &Context, _: &ast::Mod, _: Span, _: ast::NodeId) { }
check_node			        fn check_node(this: &RegionVarBindings,
check_opt_lifetime_ref			    fn check_opt_lifetime_ref(&mut self, _: &Context, _: Span, _: &Option<ast::Lifetime>) { }
check_pat			    fn check_pat(&mut self, _: &Context, _: &ast::Pat) { }
check_pat			pub fn check_pat(tcx: &ty::ctxt, pat: &ast::Pat,
check_path			    fn check_path(&mut self, _: &Context, _: &ast::Path, _: ast::NodeId) { }
check_path			pub fn check_path(tcx: &ty::ctxt, path: &ast::Path, id: ast::NodeId,
check_path_args			pub fn check_path_args(tcx: &ty::ctxt, segments: &[ast::PathSegment], flags: usize) 
check_ret			    fn check_ret(&self,
check_rvalues			    pub mod check_rvalues;
check_static_mut_type			    fn check_static_mut_type(&self, e: &ast::Expr) 
check_static_recursion			    pub mod check_static_recursion;
check_static_type			    fn check_static_type(&self, e: &ast::Expr) 
check_stmt			    fn check_stmt(&mut self, _: &Context, _: &ast::Stmt) { }
check_str_index			    fn check_str_index(&mut self, e: &ast::Expr) 
check_struct_def			    fn check_struct_def(&mut self, _: &Context,
check_struct_def_post			    fn check_struct_def_post(&mut self, _: &Context,
check_struct_field			    fn check_struct_field(&mut self, _: &Context, _: &ast::StructField) { }
check_trait_item			    fn check_trait_item(&mut self, _: &Context, _: &ast::TraitItem) { }
check_transmute			    fn check_transmute(&self, span: Span, from: Ty<'tcx>, to: Ty<'tcx>, id: ast::NodeId) 
check_ty			    fn check_ty(&mut self, _: &Context, _: &ast::Ty) { }
check_unstable_api_usage			pub fn check_unstable_api_usage(tcx: &ty::ctxt)
check_unused_or_stable_features			pub fn check_unused_or_stable_features(sess: &Session,
check_variant			    fn check_variant(&mut self, _: &Context, _: &ast::Variant, _: &ast::Generics) { }
check_variant_post			    fn check_variant_post(&mut self, _: &Context, _: &ast::Variant, _: &ast::Generics) { }
clone			    fn clone(&self) -> MapEntry<'ast> 
clone			    fn clone(&self) -> LiveNode 
clone			    fn clone(&self) -> MemCategorizationContext<'t,TYPER> { *self }
closure_kind			    fn closure_kind(&self,
closure_kind			    pub fn closure_kind(&self, def_id: ast::DefId) -> ty::ClosureKind 
closure_trait_ref			    fn closure_trait_ref(&mut self,
closure_trait_ref_and_return_type			pub fn closure_trait_ref_and_return_type<'tcx>(
closure_trait_ref_unnormalized			    fn closure_trait_ref_unnormalized(&mut self,
closure_type			    fn closure_type(&self,
closure_type			    pub fn closure_type(&self,
closure_typer			    pub fn closure_typer(&self) -> &'cx (ty::ClosureTyper<'tcx>+'cx) 
closure_upvars			    fn closure_upvars(&self,
closure_upvars			pub fn closure_upvars<'tcx>(typer: &mc::Typer<'tcx>,
cmp::PartialEq for InferRegion			impl cmp::PartialEq for InferRegion 
cmt_			impl<'tcx> cmt_<'tcx> 
cmt_			pub struct cmt_<'tcx> 
codemap			    pub fn codemap<'a>(&'a self) -> &'a codemap::CodeMap 
coherence			mod coherence;
collect			    pub fn collect(&mut self, krate: &ast::Crate) 
collect_concrete_region_errors			    fn collect_concrete_region_errors(&self,
collect_concrete_regions			    fn collect_concrete_regions(&self,
collect_error_for_contracting_node			    fn collect_error_for_contracting_node(
collect_error_for_expanding_node			    fn collect_error_for_expanding_node(&self,
collect_external_language_items			    pub fn collect_external_language_items(&mut self) 
collect_item			    pub fn collect_item(&mut self, item_index: usize,
collect_language_items			pub fn collect_language_items(krate: &ast::Crate,
collect_local_language_items			    pub fn collect_local_language_items(&mut self, krate: &ast::Crate) 
collect_predicates_for_types			    fn collect_predicates_for_types(&mut self,
collect_regions			pub fn collect_regions<'tcx,T>(tcx: &ty::ctxt<'tcx>, value: &T) -> Vec<ty::Region>
combine			pub mod combine;
combine_fields			    fn combine_fields(&'a self, a_is_expected: bool, trace: TypeTrace<'tcx>)
combine_map			    fn combine_map(&self, t: CombineMapType)
combine_vars			    pub fn combine_vars<F>(&self,
commit			    pub fn commit(&self, snapshot: RegionSnapshot) 
commit			    pub fn commit(&mut self, s: Snapshot) 
commit_from			    fn commit_from(&self, snapshot: CombinedSnapshot) 
commit_if_ok			    pub fn commit_if_ok<T, E, F>(&self, f: F) -> Result<T, E> where
commit_regions_if_ok			    pub fn commit_regions_if_ok<T, E, F>(&self, f: F) -> Result<T, E> where
commit_unconditionally			    pub fn commit_unconditionally<R, F>(&self, f: F) -> R where
common			    pub mod common;
common			pub mod common;
common_supertype			pub fn common_supertype<'a, 'tcx>(cx: &InferCtxt<'a, 'tcx>,
compare			    fn compare<F>(&self, t: T, f: F) -> RelateResult<'tcx, T> where
compare_const_vals			pub fn compare_const_vals(a: &ConstVal, b: &ConstVal) -> Option<Ordering> 
compare_lit_exprs			pub fn compare_lit_exprs<'tcx, S>(tcx: &ty::ctxt<'tcx>,
compute			    fn compute(&mut self, decl: &ast::FnDecl, body: &ast::Block) -> LiveNode 
compute_enum_variants			fn compute_enum_variants<'tcx>(cx: &ctxt<'tcx>,
compute_id_range			    fn compute_id_range(&self, cfgidx: CFGIndex) -> (usize, usize) 
config			pub mod config;
configure_main			fn configure_main(this: &mut EntryContext) 
confirm_builtin_candidate			    fn confirm_builtin_candidate(&mut self,
confirm_builtin_unsize_candidate			    fn confirm_builtin_unsize_candidate(&mut self,
confirm_callable_candidate			fn confirm_callable_candidate<'cx,'tcx>(
confirm_candidate			fn confirm_candidate<'cx,'tcx>(
confirm_candidate			    fn confirm_candidate(&mut self,
confirm_closure_candidate			fn confirm_closure_candidate<'cx,'tcx>(
confirm_closure_candidate			    fn confirm_closure_candidate(&mut self,
confirm_default_impl_candidate			    fn confirm_default_impl_candidate(&mut self,
confirm_default_impl_object_candidate			    fn confirm_default_impl_object_candidate(&mut self,
confirm_fn_pointer_candidate			fn confirm_fn_pointer_candidate<'cx,'tcx>(
confirm_fn_pointer_candidate			    fn confirm_fn_pointer_candidate(&mut self,
confirm_impl_candidate			fn confirm_impl_candidate<'cx,'tcx>(
confirm_impl_candidate			    fn confirm_impl_candidate(&mut self,
confirm_object_candidate			    fn confirm_object_candidate(&mut self,
confirm_param_candidate			    fn confirm_param_candidate(&mut self,
confirm_param_env_candidate			fn confirm_param_env_candidate<'cx,'tcx>(
confirm_poly_trait_refs			    fn confirm_poly_trait_refs(&mut self,
confirm_projection_candidate			    fn confirm_projection_candidate(&mut self,
consider_adding_bidirectional_edges			        fn consider_adding_bidirectional_edges(result_set: &mut Vec<Region>,
consider_adding_directed_edge			        fn consider_adding_directed_edge(result_set: &mut Vec<Region>,
consider_unification_despite_ambiguity			fn consider_unification_despite_ambiguity<'cx,'tcx>(selcx: &mut SelectionContext<'cx,'tcx>,
consider_unification_despite_ambiguity			    fn consider_unification_despite_ambiguity(&mut self, obligation: &TraitObligation<'tcx>) 
const_eval			    pub mod const_eval;
const_expr_to_pat			pub fn const_expr_to_pat(tcx: &ty::ctxt, expr: &Expr, span: Span) -> P<ast::Pat> 
const_int_checked_div			pub fn const_int_checked_div<'a>(
const_int_checked_neg			pub fn const_int_checked_neg<'a>(
const_int_checked_rem			pub fn const_int_checked_rem<'a>(
const_uint_checked_div			pub fn const_uint_checked_div<'a>(
const_uint_checked_neg			pub fn const_uint_checked_neg<'a>(
const_uint_checked_rem			pub fn const_uint_checked_rem<'a>(
const_uint_not			fn const_uint_not(a: u64, opt_ety: Option<UintTy>) -> ConstVal 
const_val_to_expr			fn const_val_to_expr(value: &ConstVal) -> P<ast::Expr> 
constituent_types_for_ty			    fn constituent_types_for_ty(&self, t: Ty<'tcx>) -> Option<Vec<Ty<'tcx>>> 
constraint_to_nodes			fn constraint_to_nodes(c: &Constraint) -> (Node, Node) 
construct			pub fn construct(tcx: &ty::ctxt,
construct			mod construct;
construct_free_substs			pub fn construct_free_substs<'a,'tcx>(
construct_graph			    fn construct_graph(&self) -> RegionGraph 
construct_parameter_environment			pub fn construct_parameter_environment<'a,'tcx>(
construct_skolemized_subst			    pub fn construct_skolemized_subst(&self,
construct_skolemized_substs			pub fn construct_skolemized_substs<'a,'tcx>(infcx: &InferCtxt<'a,'tcx>,
construct_var_data			    fn construct_var_data(&self) -> Vec<VarData> 
construct_witness			fn construct_witness(cx: &MatchCheckCtxt, ctor: &Constructor,
constructor_arity			pub fn constructor_arity(cx: &MatchCheckCtxt, ctor: &Constructor, ty: Ty) -> usize 
consume			    fn consume(&mut self,
consume			    fn consume(&mut self, _: NodeId, _: Span, _: cmt, _: ConsumeMode) {}
consume			    fn consume(&mut self,
consume			    fn consume(&mut self,
consume_expr			    pub fn consume_expr(&mut self, expr: &ast::Expr) 
consume_exprs			    fn consume_exprs(&mut self, exprs: &Vec<P<ast::Expr>>) 
consume_pat			    fn consume_pat(&mut self,
consume_pat			    fn consume_pat(&mut self, _: &Pat, _: cmt, _: ConsumeMode) {}
consume_pat			    fn consume_pat(&mut self,
consume_pat			    fn consume_pat(&mut self,
container			    pub fn container(&self) -> ImplOrTraitItemContainer 
container_id			    pub fn container_id(&self) -> ast::DefId 
contains			    pub fn contains(&self, other: &BoundRegion) -> bool 
contains_error			    fn contains_error(&self) -> bool 
contains_error			    fn contains_error(&self) -> bool;
contains_field_named			        fn contains_field_named(field: &ty::field,
contains_illegal_self_type_reference			fn contains_illegal_self_type_reference<'tcx>(tcx: &ty::ctxt<'tcx>,
context			mod context;
contract_node			    fn contract_node(&self,
contraction			    fn contraction(&self,
convert_def_id			    fn convert_def_id(&mut self,
copy_if_invalid			        fn copy_if_invalid(src: LiveNode, dst: &mut LiveNode) -> bool 
copy_or_move			fn copy_or_move<'tcx>(typer: &mc::Typer<'tcx>,
count_late_bound_regions			pub fn count_late_bound_regions<'tcx, T>(
count_llvm_insns			    pub fn count_llvm_insns(&self) -> bool 
count_type_sizes			    pub fn count_type_sizes(&self) -> bool 
crate_matches			    fn crate_matches(&mut self, crate_data: &[u8], libpath: &Path) -> bool 
crate_metadata			impl crate_metadata 
crate_metadata			pub struct crate_metadata 
creader			pub mod creader;
creader_cache_key			pub struct creader_cache_key 
create_and_seed_worklist			fn create_and_seed_worklist(tcx: &ty::ctxt,
csearch			pub mod csearch;
cstore			pub mod cstore;
ctxt			pub struct ctxt<'a, 'tcx: 'a> 
ctxt			impl<'tcx> ctxt<'tcx> 
ctxt			pub struct ctxt<'tcx> 
current_level			    pub fn current_level(&self, lint: &'static Lint) -> Level 
custom_coerce_unsized_kind			pub fn custom_coerce_unsized_kind<'tcx>(cx: &ctxt<'tcx>, did: ast::DefId)
data			    pub fn data<'a>(&'a self) -> &'a [u8] { self.data.as_slice() }
data_log_string			fn data_log_string(data: &[u8], pos: usize) -> String 
dataflow			    pub mod dataflow;
dead			    pub mod dead;
decl			    pub fn decl(self) -> &'a FnDecl 
decl			    fn decl(&mut self, decl: &ast::Decl, pred: CFGIndex) -> CFGIndex 
decl_without_init			    fn decl_without_init(&mut self,
decl_without_init			    fn decl_without_init(&mut self, _: NodeId, _: Span) {}
decl_without_init			    fn decl_without_init(&mut self,
decl_without_init			    fn decl_without_init(&mut self,
decode_ast			fn decode_ast(par_doc: rbml::Doc) -> ast::InlinedItem 
decode_def			fn decode_def(dcx: &DecodeContext, dsr: &mut reader::Decoder) -> def::Def 
decode_inlined_item			pub fn decode_inlined_item<'tcx>(cdata: &cstore::crate_metadata,
decode_item_ast			fn decode_item_ast(par_doc: rbml::Doc) -> ast::Item 
decode_side_tables			fn decode_side_tables(dcx: &DecodeContext,
decoder			pub mod decoder;
def			    pub mod def;
def_id			    pub fn def_id(&self) -> ast::DefId 
def_id			    pub fn def_id(&self) -> ast::DefId 
def_id_debug			    fn def_id_debug(def_id: ast::DefId, f: &mut fmt::Formatter) -> fmt::Result 
def_id_decoder_helpers			trait def_id_decoder_helpers 
def_id_decoder_helpers for D			impl<D:serialize::Decoder> def_id_decoder_helpers for D
def_id_encoder_helpers			trait def_id_encoder_helpers 
def_id_encoder_helpers for S			impl<S:serialize::Encoder> def_id_encoder_helpers for S
def_id_is_transmute			    fn def_id_is_transmute(&self, def_id: DefId) -> bool 
def_id_represents_local_inlined_item			    fn def_id_represents_local_inlined_item(&self, def_id: ast::DefId) -> bool 
def_id_span			    pub fn def_id_span(&self, def_id: DefId, fallback: Span) -> Span 
def_to_path			pub fn def_to_path(tcx: &ty::ctxt, id: ast::DefId) -> ast::Path 
def_to_string			pub fn def_to_string(did: DefId) -> String 
def_to_u64			pub fn def_to_u64(did: DefId) -> u64 
default			    fn default() -> FnvHasher { FnvHasher(0xcbf29ce484222325) }
default_configuration			pub fn default_configuration(sess: &Session) -> ast::CrateConfig 
default_lib_output			pub fn default_lib_output() -> CrateType 
define			    fn define(&mut self, writer: LiveNode, var: Variable) 
define_bindings_in_arm_pats			    fn define_bindings_in_arm_pats(&mut self, pat: Option<&ast::Pat>, succ: LiveNode)
define_bindings_in_pat			    fn define_bindings_in_pat(&mut self, pat: &ast::Pat, succ: LiveNode)
definition			                                                            trait definition for {} refers to \\
definition			                                                        trait definition for {} must have named \\
definition			                                                 trait definition for {} must have a value, \\
delay_span_bug			    pub fn delay_span_bug(&self, sp: Span, msg: &str) 
delegate_consume			    fn delegate_consume(&mut self,
dependency_format			    pub mod dependency_format;
deref			    fn deref(&self) -> &Self::Target { &self.0 }
deref			pub fn deref<'tcx>(ty: Ty<'tcx>, explicit: bool) -> Option<mt<'tcx>> 
deref_kind			fn deref_kind(t: Ty, context: DerefKindContext) -> McResult<deref_kind> 
deref_kind			pub enum deref_kind 
deref_mut			    fn deref_mut(&mut self) -> &mut Self::Target { &mut self.0 }
deref_vec			    fn deref_vec<N:ast_node>(&self,
derived_cause			    fn derived_cause(&self,
desc			    fn desc(&self) -> &'static str 
description			    pub fn description(&self) -> Cow<str> 
descriptive_string			    pub fn descriptive_string(&self, tcx: &ty::ctxt) -> String 
determine_pat_move_mode			    fn determine_pat_move_mode(&mut self,
diagnostic			    pub fn diagnostic<'a>(&'a self) -> &'a diagnostic::SpanHandler 
diagnostics			pub mod diagnostics;
disr_incr			    fn disr_incr(&self, val: Disr) -> Option<Disr> 
disr_incr			    fn disr_incr(&self, val: Disr) -> Option<Disr>;
disr_string			    fn disr_string(&self, val: Disr) -> String 
disr_string			    fn disr_string(&self, val: Disr) -> String;
disr_wrap_incr			    fn disr_wrap_incr(&self, val: Option<Disr>) -> Disr 
disr_wrap_incr			    fn disr_wrap_incr(&self, val: Option<Disr>) -> Disr;
diverges			    pub fn diverges(&self) -> bool 
doc_decoder_helpers			trait doc_decoder_helpers 
doc_decoder_helpers for rbml			impl<'a> doc_decoder_helpers for rbml::Doc<'a> 
doc_generics			fn doc_generics<'tcx>(base_doc: rbml::Doc,
doc_method_fty			fn doc_method_fty<'tcx>(doc: rbml::Doc, tcx: &ty::ctxt<'tcx>,
doc_predicates			fn doc_predicates<'tcx>(base_doc: rbml::Doc,
doc_trait_ref			fn doc_trait_ref<'tcx>(doc: rbml::Doc, tcx: &ty::ctxt<'tcx>, cdata: Cmd)
doc_type			fn doc_type<'tcx>(doc: rbml::Doc, tcx: &ty::ctxt<'tcx>, cdata: Cmd) -> Ty<'tcx> 
docstr			    fn docstr(doc: rbml::Doc, tag_: usize) -> String 
dot			impl<'a, 'ast> dot::GraphWalk<'a, Node<'a>, Edge<'a>> for LabelledCFG<'a, 'ast>
dot			impl<'a, 'ast> dot::Labeller<'a, Node<'a>, Edge<'a>> for LabelledCFG<'a, 'ast> 
dot			impl<'a> dot::GraphWalk<'a, Node<'a>, Edge<'a>> for &'a cfg::CFG 
dot::GraphWalk for ConstraintGraph			impl<'a, 'tcx> dot::GraphWalk<'a, Node, Edge> for ConstraintGraph<'a, 'tcx> 
dot::Labeller for ConstraintGraph			impl<'a, 'tcx> dot::Labeller<'a, Node, Edge> for ConstraintGraph<'a, 'tcx> 
drop			    fn drop(&mut self) { debug!("<<"); }
dummy			    pub fn dummy(tcx: &ty::ctxt<'tcx>) -> TypeTrace<'tcx> 
dummy			    pub fn dummy() -> ObligationCause<'tcx> 
dump_constraints			    fn dump_constraints(&self, subject: ast::NodeId) 
dump_crates			fn dump_crates(cstore: &CStore) 
dump_region_constraints_to			fn dump_region_constraints_to<'a, 'tcx:'a >(tcx: &'a ty::ctxt<'tcx>,
dylibname			    fn dylibname(&self) -> (String, String) 
dylink_registrar			    fn dylink_registrar(&mut self,
each_auxiliary_node_id			fn each_auxiliary_node_id<F>(item: &ast::Item, callback: F) -> bool where
each_bit			    fn each_bit<F>(&self, words: &[usize], mut f: F) -> bool where
each_bit_for_node			    pub fn each_bit_for_node<F>(&self, e: EntryOrExit, cfgidx: CFGIndex, f: F) -> bool where
each_bit_on_entry			    pub fn each_bit_on_entry<F>(&self, id: ast::NodeId, mut f: F) -> bool where
each_bound_trait_and_supertraits			pub fn each_bound_trait_and_supertraits<'tcx, F>(tcx: &ctxt<'tcx>,
each_child_of_item			pub fn each_child_of_item<F>(cstore: &cstore::CStore,
each_child_of_item			pub fn each_child_of_item<F, G>(intr: Rc<IdentInterner>,
each_child_of_item_or_crate			fn each_child_of_item_or_crate<F, G>(intr: Rc<IdentInterner>,
each_encl_scope			    pub fn each_encl_scope<E>(&self, mut e:E) where E: FnMut(&CodeExtent, &CodeExtent) 
each_exported_macro			pub fn each_exported_macro<F>(data: &[u8], intr: &IdentInterner, mut f: F) where
each_gen_bit			    pub fn each_gen_bit<F>(&self, id: ast::NodeId, mut f: F) -> bool where
each_implementation_for_trait			pub fn each_implementation_for_trait<F>(cstore: &cstore::CStore,
each_implementation_for_trait			pub fn each_implementation_for_trait<F>(cdata: Cmd,
each_inherent_implementation_for_type			pub fn each_inherent_implementation_for_type<F>(cstore: &cstore::CStore,
each_inherent_implementation_for_type			pub fn each_inherent_implementation_for_type<F>(cdata: Cmd,
each_lang_item			pub fn each_lang_item<F>(cstore: &cstore::CStore,
each_lang_item			pub fn each_lang_item<F>(cdata: Cmd, mut f: F) -> bool where
each_rvalue_scope			    pub fn each_rvalue_scope<E>(&self, mut e:E) where E: FnMut(&ast::NodeId, &CodeExtent) 
each_terminating_scope			    pub fn each_terminating_scope<E>(&self, mut e:E) where E: FnMut(&CodeExtent) 
each_top_level_item_of_crate			pub fn each_top_level_item_of_crate<F>(cstore: &cstore::CStore,
each_top_level_item_of_crate			pub fn each_top_level_item_of_crate<F, G>(intr: Rc<IdentInterner>,
each_var_scope			    pub fn each_var_scope<E>(&self, mut e:E) where E: FnMut(&ast::NodeId, &CodeExtent) 
early_bound_lifetime_names			fn early_bound_lifetime_names(generics: &ast::Generics) -> Vec<ast::Name> 
early_bound_lifetimes			pub fn early_bound_lifetimes<'a>(generics: &'a ast::Generics) -> Vec<ast::LifetimeDef> 
early_error			pub fn early_error(msg: &str) -> ! 
early_warn			pub fn early_warn(msg: &str) 
edge_label			    fn edge_label(&self, e: &Edge<'a>) -> dot::LabelText<'a> 
edge_label			    fn edge_label(&self, e: &Edge) -> dot::LabelText 
edge_to_nodes			fn edge_to_nodes(e: &Edge) -> (Node, Node) 
edges			    fn edges(&'a self) -> dot::Edges<'a, Edge<'a>> { self.cfg.edges() }
edges			    fn edges(&'a self) -> dot::Edges<'a, Edge<'a>> 
edges			    fn edges(&self) -> dot::Edges<Edge> 
effect			    pub mod effect;
elaborate_predicates			pub fn elaborate_predicates<'cx, 'tcx>(
elaborate_trait_ref			pub fn elaborate_trait_ref<'cx, 'tcx>(
elaborate_trait_refs			pub fn elaborate_trait_refs<'cx, 'tcx>(
element_kind			fn element_kind(t: Ty) -> ElementKind 
emit_auto_adjustment			    fn emit_auto_adjustment<'a>(&mut self, ecx: &e::EncodeContext<'a, 'tcx>,
emit_auto_adjustment			    fn emit_auto_adjustment<'b>(&mut self, ecx: &e::EncodeContext<'b, 'tcx>,
emit_auto_deref_ref			    fn emit_auto_deref_ref<'a>(&mut self, ecx: &e::EncodeContext<'a, 'tcx>,
emit_auto_deref_ref			    fn emit_auto_deref_ref<'b>(&mut self, ecx: &e::EncodeContext<'b, 'tcx>,
emit_autoref			    fn emit_autoref<'a>(&mut self, autoref: &ty::AutoRef<'tcx>);
emit_autoref			    fn emit_autoref<'b>(&mut self, autoref: &ty::AutoRef<'tcx>) 
emit_builtin_bounds			    fn emit_builtin_bounds(&mut self, ecx: &e::EncodeContext, bounds: &ty::BuiltinBounds) 
emit_builtin_bounds			    fn emit_builtin_bounds(&mut self, ecx: &e::EncodeContext, bounds: &ty::BuiltinBounds);
emit_closure_type			    fn emit_closure_type<'a>(&mut self, ecx: &e::EncodeContext<'a, 'tcx>,
emit_closure_type			    fn emit_closure_type<'b>(&mut self,
emit_def_id			    fn emit_def_id(&mut self, did: ast::DefId) 
emit_def_id			    fn emit_def_id(&mut self, did: ast::DefId);
emit_existential_bounds			    fn emit_existential_bounds<'b>(&mut self, ecx: &e::EncodeContext<'b,'tcx>,
emit_method_origin			    fn emit_method_origin<'a>(&mut self,
emit_method_origin			    fn emit_method_origin<'b>(&mut self,
emit_predicate			    fn emit_predicate<'a>(&mut self, ecx: &e::EncodeContext<'a, 'tcx>,
emit_predicate			    fn emit_predicate<'b>(&mut self, ecx: &e::EncodeContext<'b, 'tcx>,
emit_substs			    fn emit_substs<'a>(&mut self, ecx: &e::EncodeContext<'a, 'tcx>,
emit_substs			    fn emit_substs<'b>(&mut self, ecx: &e::EncodeContext<'b, 'tcx>,
emit_trait_ref			    fn emit_trait_ref<'a>(&mut self, ecx: &e::EncodeContext<'a, 'tcx>,
emit_trait_ref			    fn emit_trait_ref<'b>(&mut self, ecx: &e::EncodeContext<'b, 'tcx>,
emit_ty			    fn emit_ty<'a>(&mut self, ecx: &e::EncodeContext<'a, 'tcx>, ty: Ty<'tcx>);
emit_ty			    fn emit_ty<'b>(&mut self, ecx: &e::EncodeContext<'b, 'tcx>, ty: Ty<'tcx>) 
emit_type_param_def			    fn emit_type_param_def<'a>(&mut self, ecx: &e::EncodeContext<'a, 'tcx>,
emit_type_param_def			    fn emit_type_param_def<'b>(&mut self, ecx: &e::EncodeContext<'b, 'tcx>,
emit_type_scheme			    fn emit_type_scheme<'a>(&mut self, ecx: &e::EncodeContext<'a, 'tcx>,
emit_type_scheme			    fn emit_type_scheme<'b>(&mut self,
emit_tys			    fn emit_tys<'a>(&mut self, ecx: &e::EncodeContext<'a, 'tcx>, tys: &[Ty<'tcx>]);
emit_tys			    fn emit_tys<'b>(&mut self, ecx: &e::EncodeContext<'b, 'tcx>, tys: &[Ty<'tcx>]) 
empty			    pub fn empty() -> LinkedPath<'a> 
empty			    pub fn empty() -> Substs<'tcx> 
empty			    pub fn empty() -> VecPerParamSpace<T> 
empty			    fn empty() -> TraitObligationStackList<'o,'tcx> 
empty			       pub fn empty() -> BuiltinBounds 
empty			    pub fn empty() -> GenericPredicates<'tcx> 
empty			    pub fn empty() -> Generics<'tcx> 
empty			    pub fn empty() -> InstantiatedPredicates<'tcx> 
empty			    pub fn empty() -> ItemSubsts<'tcx> 
empty_parameter_environment			pub fn empty_parameter_environment<'a,'tcx>(cx: &'a ctxt<'tcx>) -> ParameterEnvironment<'a,'tcx> 
enc_abi			fn enc_abi(w: &mut Encoder, abi: Abi) 
enc_bare_fn_ty			pub fn enc_bare_fn_ty<'a, 'tcx>(w: &mut Encoder, cx: &ctxt<'a, 'tcx>,
enc_bound_region			fn enc_bound_region(w: &mut Encoder, cx: &ctxt, br: ty::BoundRegion) 
enc_builtin_bounds			pub fn enc_builtin_bounds(w: &mut Encoder, _cx: &ctxt, bs: &ty::BuiltinBounds) 
enc_closure_ty			pub fn enc_closure_ty<'a, 'tcx>(w: &mut Encoder, cx: &ctxt<'a, 'tcx>,
enc_destruction_scope_data			fn enc_destruction_scope_data(w: &mut Encoder,
enc_existential_bounds			pub fn enc_existential_bounds<'a,'tcx>(w: &mut Encoder,
enc_fn_sig			fn enc_fn_sig<'a, 'tcx>(w: &mut Encoder, cx: &ctxt<'a, 'tcx>,
enc_mt			fn enc_mt<'a, 'tcx>(w: &mut Encoder, cx: &ctxt<'a, 'tcx>,
enc_mutability			fn enc_mutability(w: &mut Encoder, mt: ast::Mutability) 
enc_object_lifetime_default			fn enc_object_lifetime_default<'a, 'tcx>(w: &mut Encoder,
enc_opt			fn enc_opt<T, F>(w: &mut Encoder, t: Option<T>, enc_f: F) where
enc_predicate			pub fn enc_predicate<'a, 'tcx>(w: &mut Encoder,
enc_projection_predicate			fn enc_projection_predicate<'a, 'tcx>(w: &mut Encoder,
enc_region			pub fn enc_region(w: &mut Encoder, cx: &ctxt, r: ty::Region) 
enc_region_bounds			pub fn enc_region_bounds<'a, 'tcx>(w: &mut Encoder,
enc_region_substs			fn enc_region_substs(w: &mut Encoder, cx: &ctxt, substs: &subst::RegionSubsts) 
enc_scope			fn enc_scope(w: &mut Encoder, _cx: &ctxt, scope: region::CodeExtent) 
enc_substs			pub fn enc_substs<'a, 'tcx>(w: &mut Encoder, cx: &ctxt<'a, 'tcx>,
enc_trait_ref			pub fn enc_trait_ref<'a, 'tcx>(w: &mut Encoder, cx: &ctxt<'a, 'tcx>,
enc_ty			pub fn enc_ty<'a, 'tcx>(w: &mut Encoder, cx: &ctxt<'a, 'tcx>, t: Ty<'tcx>) 
enc_type_param_def			pub fn enc_type_param_def<'a, 'tcx>(w: &mut Encoder, cx: &ctxt<'a, 'tcx>,
enc_unsafety			fn enc_unsafety(w: &mut Encoder, p: ast::Unsafety) 
enc_vec_per_param_space			fn enc_vec_per_param_space<'a, 'tcx, T, F>(w: &mut Encoder,
encl_scope			    pub fn encl_scope(&self, id: CodeExtent) -> CodeExtent 
encode_associated_type_names			fn encode_associated_type_names(rbml_w: &mut Encoder, names: &[ast::Name]) 
encode_ast			fn encode_ast(rbml_w: &mut Encoder, item: &ast::InlinedItem) 
encode_attributes			fn encode_attributes(rbml_w: &mut Encoder, attrs: &[ast::Attribute]) 
encode_bounds_and_type			fn encode_bounds_and_type<'a, 'tcx>(rbml_w: &mut Encoder,
encode_bounds_and_type_for_item			fn encode_bounds_and_type_for_item<'a, 'tcx>(rbml_w: &mut Encoder,
encode_cast_kind			pub fn encode_cast_kind(ebml_w: &mut Encoder, kind: cast::CastKind) 
encode_closure_kind			pub fn encode_closure_kind(ebml_w: &mut Encoder, kind: ty::ClosureKind) 
encode_codemap			fn encode_codemap(ecx: &EncodeContext, rbml_w: &mut Encoder) 
encode_constness			fn encode_constness(rbml_w: &mut Encoder, constness: ast::Constness) 
encode_crate_dep			fn encode_crate_dep(rbml_w: &mut Encoder,
encode_crate_deps			fn encode_crate_deps(rbml_w: &mut Encoder, cstore: &cstore::CStore) 
encode_crate_name			fn encode_crate_name(rbml_w: &mut Encoder, crate_name: &str) 
encode_crate_triple			fn encode_crate_triple(rbml_w: &mut Encoder, triple: &str) 
encode_def_id			fn encode_def_id(rbml_w: &mut Encoder, id: DefId) 
encode_defaulted			fn encode_defaulted(rbml_w: &mut Encoder, is_defaulted: bool) 
encode_disr_val			fn encode_disr_val(_: &EncodeContext,
encode_dylib_dependency_formats			fn encode_dylib_dependency_formats(rbml_w: &mut Encoder, ecx: &EncodeContext) 
encode_enum_variant_info			fn encode_enum_variant_info(ecx: &EncodeContext,
encode_explicit_self			fn encode_explicit_self(rbml_w: &mut Encoder,
encode_extension_implementations			fn encode_extension_implementations(ecx: &EncodeContext,
encode_family			fn encode_family(rbml_w: &mut Encoder, c: char) 
encode_freevar_entry			fn encode_freevar_entry(rbml_w: &mut Encoder, fv: &ty::Freevar) 
encode_generics			fn encode_generics<'a, 'tcx>(rbml_w: &mut Encoder,
encode_hash			fn encode_hash(rbml_w: &mut Encoder, hash: &Svh) 
encode_impl_type_basename			fn encode_impl_type_basename(rbml_w: &mut Encoder, name: ast::Name) 
encode_impls			fn encode_impls<'a>(ecx: &'a EncodeContext,
encode_index			fn encode_index<T, F>(rbml_w: &mut Encoder, index: Vec<entry<T>>, mut write_fn: F) where
encode_info_for_associated_const			fn encode_info_for_associated_const(ecx: &EncodeContext,
encode_info_for_associated_type			fn encode_info_for_associated_type<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,
encode_info_for_foreign_item			fn encode_info_for_foreign_item(ecx: &EncodeContext,
encode_info_for_item			fn encode_info_for_item(ecx: &EncodeContext,
encode_info_for_items			fn encode_info_for_items(ecx: &EncodeContext,
encode_info_for_method			fn encode_info_for_method<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,
encode_info_for_mod			fn encode_info_for_mod(ecx: &EncodeContext,
encode_info_for_struct			fn encode_info_for_struct(ecx: &EncodeContext,
encode_info_for_struct_ctor			fn encode_info_for_struct_ctor(ecx: &EncodeContext,
encode_inherent_implementations			fn encode_inherent_implementations(ecx: &EncodeContext,
encode_inlined_item			fn encode_inlined_item(ecx: &EncodeContext,
encode_inlined_item			pub fn encode_inlined_item(ecx: &e::EncodeContext,
encode_item_ast			fn encode_item_ast(rbml_w: &mut Encoder, item: &ast::Item) 
encode_item_sort			fn encode_item_sort(rbml_w: &mut Encoder, sort: char) 
encode_item_variances			fn encode_item_variances(rbml_w: &mut Encoder,
encode_lang_items			fn encode_lang_items(ecx: &EncodeContext, rbml_w: &mut Encoder) 
encode_macro_defs			fn encode_macro_defs(rbml_w: &mut Encoder,
encode_meta_item			fn encode_meta_item(rbml_w: &mut Encoder, mi: &ast::MetaItem) 
encode_metadata			pub fn encode_metadata(parms: EncodeParams, krate: &ast::Crate) -> Vec<u8> 
encode_metadata_inner			fn encode_metadata_inner(wr: &mut Cursor<Vec<u8>>,
encode_method_argument_names			fn encode_method_argument_names(rbml_w: &mut Encoder,
encode_method_callee			fn encode_method_callee<'a, 'tcx>(ecx: &e::EncodeContext<'a, 'tcx>,
encode_method_fty			fn encode_method_fty<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,
encode_method_ty_fields			fn encode_method_ty_fields<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,
encode_misc_info			fn encode_misc_info(ecx: &EncodeContext,
encode_mutability			    fn encode_mutability(m: ast::Mutability) -> u8 
encode_name			fn encode_name(rbml_w: &mut Encoder, name: ast::Name) 
encode_native_libraries			fn encode_native_libraries(ecx: &EncodeContext, rbml_w: &mut Encoder) 
encode_paren_sugar			fn encode_paren_sugar(rbml_w: &mut Encoder, paren_sugar: bool) 
encode_parent_item			fn encode_parent_item(rbml_w: &mut Encoder, id: DefId) 
encode_parent_sort			fn encode_parent_sort(rbml_w: &mut Encoder, sort: char) 
encode_path			fn encode_path<PI: Iterator<Item=PathElem>>(rbml_w: &mut Encoder, path: PI) 
encode_plugin_registrar_fn			fn encode_plugin_registrar_fn(ecx: &EncodeContext, rbml_w: &mut Encoder) 
encode_polarity			fn encode_polarity(rbml_w: &mut Encoder, polarity: ast::ImplPolarity) 
encode_predicates			fn encode_predicates<'a,'tcx>(rbml_w: &mut Encoder,
encode_predicates_in_current_doc			fn encode_predicates_in_current_doc<'a,'tcx>(rbml_w: &mut Encoder,
encode_provided_source			fn encode_provided_source(rbml_w: &mut Encoder,
encode_reachable_extern_fns			fn encode_reachable_extern_fns(ecx: &EncodeContext, rbml_w: &mut Encoder) 
encode_reexported_static_base_methods			fn encode_reexported_static_base_methods(ecx: &EncodeContext,
encode_reexported_static_method			fn encode_reexported_static_method(rbml_w: &mut Encoder,
encode_reexported_static_methods			fn encode_reexported_static_methods(ecx: &EncodeContext,
encode_reexported_static_trait_methods			fn encode_reexported_static_trait_methods(ecx: &EncodeContext,
encode_reexports			fn encode_reexports(ecx: &EncodeContext,
encode_region			fn encode_region(ecx: &EncodeContext,
encode_repr_attrs			fn encode_repr_attrs(rbml_w: &mut Encoder,
encode_side_tables_for_id			fn encode_side_tables_for_id(ecx: &e::EncodeContext,
encode_side_tables_for_ii			fn encode_side_tables_for_ii(ecx: &e::EncodeContext,
encode_stability			fn encode_stability(rbml_w: &mut Encoder, stab_opt: Option<&attr::Stability>) 
encode_struct_field_attrs			fn encode_struct_field_attrs(rbml_w: &mut Encoder, krate: &ast::Crate) 
encode_struct_field_family			fn encode_struct_field_family(rbml_w: &mut Encoder,
encode_struct_fields			fn encode_struct_fields(rbml_w: &mut Encoder,
encode_symbol			fn encode_symbol(ecx: &EncodeContext,
encode_trait_ref			fn encode_trait_ref<'a, 'tcx>(rbml_w: &mut Encoder,
encode_type			fn encode_type<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,
encode_unsafety			fn encode_unsafety(rbml_w: &mut Encoder, unsafety: ast::Unsafety) 
encode_variant_id			fn encode_variant_id(rbml_w: &mut Encoder, vid: DefId) 
encode_vec_per_param_space			fn encode_vec_per_param_space<T, F>(rbml_w: &mut Encoder,
encode_visibility			fn encode_visibility(rbml_w: &mut Encoder, visibility: ast::Visibility) 
encoded_ty			pub fn encoded_ty<'tcx>(tcx: &ty::ctxt<'tcx>, t: Ty<'tcx>) -> String 
encoder			pub mod encoder;
enter			    pub fn enter<'tcx, F: FnOnce(&ty::ctxt<'tcx>) -> R, R>(tcx: ty::ctxt<'tcx>, f: F)
enter_lint_attrs			    fn enter_lint_attrs(&mut self, _: &Context, _: &[ast::Attribute]) { }
enter_region_binder			    fn enter_region_binder(&mut self) 
enter_region_binder			    fn enter_region_binder(&mut self) { }
enter_region_binder			    fn enter_region_binder(&mut self) 
entry			    pub mod entry;
entry			struct entry<T> 
entry_count			    fn entry_count(&self) -> usize 
enum_is_univariant			pub fn enum_is_univariant(cx: &ctxt, id: ast::DefId) -> bool 
enum_repr_type			pub fn enum_repr_type<'tcx>(cx: &ctxt<'tcx>,
enum_variant_with_id			pub fn enum_variant_with_id<'tcx>(cx: &ctxt<'tcx>,
enum_variants			pub fn enum_variants<'tcx>(cx: &ctxt<'tcx>, id: ast::DefId)
env_deref			    fn env_deref(&self,
eq			    fn eq(&self, other: &LintId) -> bool 
eq			    fn eq(&self, other: &InferRegion) -> bool 
eq			    fn eq(&self, other: &InternedTy<'tcx>) -> bool 
eq			    fn eq(&self, other: &TyS<'tcx>) -> bool 
eq_int			            fn eq_int(a: isize, b: isize) -> bool { a == b }
eq_item			    fn eq_item(bytes: &[u8], item_id: ast::NodeId) -> bool 
eq_types			    pub fn eq_types(&self,
equality_predicate			    pub fn equality_predicate(&self,
equate			    pub fn equate(&self) -> Equate<'a, 'tcx> 
equate			    pub fn equate(&'a self, a_is_expected: bool, trace: TypeTrace<'tcx>)
equate			pub mod equate;
erase_late_bound_regions			pub fn erase_late_bound_regions<'tcx, T>(
erase_regions			    pub fn erase_regions(self) -> Substs<'tcx> 
erase_regions			pub fn erase_regions<'tcx, T: TypeFoldable<'tcx>>(tcx: &ty::ctxt<'tcx>, t: T) -> T 
erased			    pub fn erased(t: VecPerParamSpace<Ty<'tcx>>) -> Substs<'tcx>
err			    pub fn err(&self, msg: &str) 
err_count			    pub fn err_count(&self) -> usize 
error_reporting			pub mod error_reporting;
error_reporting			mod error_reporting;
escapes_depth			    pub fn escapes_depth(&self, depth: u32) -> bool 
estimate_sz			    fn estimate_sz(u: u64) -> u64 
euv::Delegate for CheckCrateVisitor			impl<'a, 'tcx> euv::Delegate<'tcx> for CheckCrateVisitor<'a, 'tcx> 
euv::Delegate for RvalueContextDelegate			impl<'a, 'tcx> euv::Delegate<'tcx> for RvalueContextDelegate<'a, 'tcx> 
eval_const_expr			pub fn eval_const_expr(tcx: &ty::ctxt, e: &Expr) -> ConstVal 
eval_const_expr_partial			pub fn eval_const_expr_partial<'tcx>(tcx: &ty::ctxt<'tcx>,
eval_const_expr_with_substs			pub fn eval_const_expr_with_substs<'tcx, S>(tcx: &ty::ctxt<'tcx>,
eval_repeat_count			pub fn eval_repeat_count(tcx: &ctxt, count_expr: &ast::Expr) -> usize 
evaluate_builtin_bound_recursively			    fn evaluate_builtin_bound_recursively<'o>(&mut self,
evaluate_impl			    pub fn evaluate_impl(&mut self,
evaluate_obligation			    pub fn evaluate_obligation(&mut self,
evaluate_obligation_recursively			    fn evaluate_obligation_recursively<'o>(&mut self,
evaluate_predicate_recursively			    fn evaluate_predicate_recursively<'o>(&mut self,
evaluate_predicates_recursively			    fn evaluate_predicates_recursively<'a,'o,I>(&mut self,
evaluate_stack			    fn evaluate_stack<'o>(&mut self,
evaluate_where_clause			    fn evaluate_where_clause<'o>(&mut self,
existing_match			    fn existing_match(&self, name: &str, hash: Option<&Svh>, kind: PathKind)
exit_lint_attrs			    fn exit_lint_attrs(&mut self, _: &Context, _: &[ast::Attribute]) { }
exit_region_binder			    fn exit_region_binder(&mut self) 
exit_region_binder			    fn exit_region_binder(&mut self) { }
exit_region_binder			    fn exit_region_binder(&mut self) 
expand_givens			    fn expand_givens(&self, graph: &RegionGraph) 
expand_node			    fn expand_node(&self,
expansion			    fn expansion(&self, free_regions: &FreeRegionMap, var_data: &mut [VarData]) 
expect			pub fn expect<T, M>(sess: &Session, opt: Option<T>, msg: M) -> T where
expect_expr			    pub fn expect_expr(&self, id: NodeId) -> &'ast Expr 
expect_foreign_item			    pub fn expect_foreign_item(&self, id: NodeId) -> &'ast ForeignItem 
expect_item			    pub fn expect_item(&self, id: NodeId) -> &'ast Item 
expect_struct			    pub fn expect_struct(&self, id: NodeId) -> &'ast StructDef 
expect_variant			    pub fn expect_variant(&self, id: NodeId) -> &'ast Variant 
expected_found			fn expected_found<T>(a_is_expected: bool,
expected_found			pub struct expected_found<T> 
expected_found			pub fn expected_found<'a,'tcx:'a,R,T>(relation: &mut R,
expected_found_bool			pub fn expected_found_bool<T>(a_is_expected: bool,
expected_found_str			    fn expected_found_str<T: fmt::Display + Resolvable<'tcx>>(
explain_span			    fn explain_span(tcx: &ty::ctxt, heading: &str, span: Span)
expr			    fn expr(&mut self, expr: &ast::Expr, pred: CFGIndex) -> CFGIndex 
expr			    pub fn expr(id: ast::NodeId) -> MethodCall 
expr_is_lval			pub fn expr_is_lval(tcx: &ctxt, expr: &ast::Expr) -> bool 
expr_span			pub fn expr_span(cx: &ctxt, id: NodeId) -> Span 
expr_ty			    fn expr_ty(&self, expr: &ast::Expr) -> McResult<Ty<'tcx>> 
expr_ty			pub fn expr_ty<'tcx>(cx: &ctxt<'tcx>, expr: &ast::Expr) -> Ty<'tcx> 
expr_ty_adjusted			    fn expr_ty_adjusted(&self, expr: &ast::Expr) -> McResult<Ty<'tcx>> 
expr_ty_adjusted			    fn expr_ty_adjusted(&self, expr: &ast::Expr) -> McResult<Ty<'tcx>>;
expr_ty_adjusted			    fn expr_ty_adjusted(&self, expr: &ast::Expr) -> mc::McResult<Ty<'tcx>> 
expr_ty_adjusted			pub fn expr_ty_adjusted<'tcx>(cx: &ctxt<'tcx>, expr: &ast::Expr) -> Ty<'tcx> 
expr_ty_opt			pub fn expr_ty_opt<'tcx>(cx: &ctxt<'tcx>, expr: &ast::Expr) -> Option<Ty<'tcx>> 
expr_use_visitor			    pub mod expr_use_visitor;
expression_label			    fn expression_label(ex: &ast::Expr) -> Option<ast::Ident> 
exprs			    fn exprs<'b, I: Iterator<Item=&'b ast::Expr>>(&mut self,
extend			    pub fn extend<I:Iterator<Item=T>>(&mut self, space: ParamSpace, values: I) 
extends			    pub fn extends(self, other: ty::ClosureKind) -> bool 
extract			pub fn extract(attrs: &[ast::Attribute]) -> Option<InternedString> 
extract_all_region_names			    fn extract_all_region_names(&self) -> HashSet<ast::Name> 
extract_anon_nums_and_names			    fn extract_anon_nums_and_names(&self, same_regions: &SameRegions)
extract_crate_info			    fn extract_crate_info(&self, i: &ast::Item) -> Option<CrateInfo> 
extract_labels			fn extract_labels<'v, 'a>(ctxt: &mut LifetimeContext<'a>, b: &'v ast::Block) 
extract_one			    fn extract_one(&mut self, m: HashMap<PathBuf, PathKind>, flavor: &str,
extract_values_and_collect_conflicts			    fn extract_values_and_collect_conflicts(
f			unsafe fn f() { return; }
fast_reject			    pub mod fast_reject;
fast_reject_trait_refs			    fn fast_reject_trait_refs(&mut self,
fatal			    pub fn fatal(&self, msg: &str) -> ! 
field			pub struct field<'tcx> 
field_idx_strict			pub fn field_idx_strict(tcx: &ctxt, name: ast::Name, fields: &[field])
field_ty			pub struct field_ty 
fileline_help			    pub fn fileline_help(&self, sp: Span, msg: &str) 
fileline_note			    pub fn fileline_note(&self, sp: Span, msg: &str) 
filesearch			pub mod filesearch;
filestem			    pub fn filestem(&self) -> String 
filter_to_traits			    pub fn filter_to_traits(self) -> FilterToTraits<Elaborator<'cx, 'tcx>> 
find			    pub fn find(&self, id: NodeId) -> Option<Node<'ast>> 
find_commandline_library			    fn find_commandline_library(&mut self, locs: &[String]) -> Option<Library> 
find_entry			    fn find_entry(&self, id: NodeId) -> Option<MapEntry<'ast>> 
find_entry_point			pub fn find_entry_point(session: &Session, ast_map: &ast_map::Map) 
find_extern_mod_stmt_cnum			    pub fn find_extern_mod_stmt_cnum(&self, emod_id: ast::NodeId)
find_first_mod_parent			        fn find_first_mod_parent<'a>(map: &'a Map, mut id: NodeId) -> Option<(NodeId, Name)> 
find_item			fn find_item<'a>(item_id: ast::NodeId, items: rbml::Doc<'a>) -> rbml::Doc<'a> 
find_item			fn find_item(item: &Item, ctxt: &mut EntryContext) 
find_libdir			fn find_libdir(_sysroot: &Path) -> String 
find_libdir			fn find_libdir(sysroot: &Path) -> String 
find_library_crate			    fn find_library_crate(&mut self) -> Option<Library> 
find_lint			    fn find_lint(&self, lint_name: &str, sess: &Session, span: Option<Span>)
find_live			fn find_live(tcx: &ty::ctxt,
find_loop_scope			    fn find_loop_scope(&self,
find_nonrepresentable			    fn find_nonrepresentable<'tcx, It: Iterator<Item=Ty<'tcx>>>(cx: &ctxt<'tcx>, sp: Span,
find_plugin_registrar			    pub fn find_plugin_registrar(&mut self, span: Span, name: &str)
find_plugin_registrar			pub fn find_plugin_registrar(diagnostic: &diagnostic::SpanHandler,
find_reachable			pub fn find_reachable(tcx: &ty::ctxt,
find_scope			    fn find_scope(&self,
finish			    fn finish(&self) -> u64 { self.0 }
fix_windows_verbatim_for_gcc			pub fn fix_windows_verbatim_for_gcc(p: &Path) -> PathBuf 
fixup_err			pub enum fixup_err 
fixup_err_to_string			pub fn fixup_err_to_string(f: fixup_err) -> String 
flag			    pub fn    flag(a: S, b: S, c: S)       -> R { stable(getopts::optflag(a, b, c)) }
flag_u			    pub fn    flag_u(a: S, b: S, c: S)       -> R { unstable(getopts::optflag(a, b, c)) }
flagmulti			    pub fn flagmulti(a: S, b: S, c: S)     -> R { stable(getopts::optflagmulti(a, b, c)) }
flagmulti_u			    pub fn flagmulti_u(a: S, b: S, c: S)     -> R { unstable(getopts::optflagmulti(a, b, c)) }
flagopt			    pub fn flagopt(a: S, b: S, c: S, d: S) -> R { stable(getopts::optflagopt(a, b, c, d)) }
flagopt_u			    pub fn flagopt_u(a: S, b: S, c: S, d: S) -> R { unstable(getopts::optflagopt(a, b, c, d)) }
flatten_late_bound_regions			pub fn flatten_late_bound_regions<'tcx, T>(
float_unification_error			fn float_unification_error<'tcx>(a_is_expected: bool,
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> Result<(),fmt::Error> 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt::Debug for AutoAdjustment			impl<'tcx> fmt::Debug for AutoAdjustment<'tcx> 
fmt::Debug for AutoDerefRef			impl<'tcx> fmt::Debug for AutoDerefRef<'tcx> 
fmt::Debug for ClosureTy			impl<'tcx> fmt::Debug for ClosureTy<'tcx> 
fmt::Debug for ClosureUpvar			impl<'tcx> fmt::Debug for ClosureUpvar<'tcx> 
fmt::Debug for FloatVid			impl fmt::Debug for FloatVid 
fmt::Debug for FnSig			impl<'tcx> fmt::Debug for FnSig<'tcx> 
fmt::Debug for GenericKind			impl<'tcx> fmt::Debug for GenericKind<'tcx> 
fmt::Debug for InferTy			impl fmt::Debug for InferTy 
fmt::Debug for IntVarValue			impl fmt::Debug for IntVarValue 
fmt::Debug for IntVid			impl fmt::Debug for IntVid 
fmt::Debug for InteriorKind			impl fmt::Debug for InteriorKind 
fmt::Debug for LiveNode			impl fmt::Debug for LiveNode 
fmt::Debug for Matrix			impl<'a> fmt::Debug for Matrix<'a> 
fmt::Debug for Normalized			impl<'tcx, T:fmt::Debug> fmt::Debug for Normalized<'tcx, T> 
fmt::Debug for ObjectLifetimeDefault			impl<'tcx> fmt::Debug for ObjectLifetimeDefault 
fmt::Debug for ParameterEnvironment			impl<'a, 'tcx> fmt::Debug for ParameterEnvironment<'a, 'tcx> 
fmt::Debug for PointerKind			impl fmt::Debug for PointerKind 
fmt::Debug for RegionAndOrigin			impl<'tcx> fmt::Debug for RegionAndOrigin<'tcx> 
fmt::Debug for RegionObligation			impl<'tcx> fmt::Debug for RegionObligation<'tcx> 
fmt::Debug for RegionVid			impl fmt::Debug for RegionVid 
fmt::Debug for ScopeChain			impl<'a> fmt::Debug for ScopeChain<'a> 
fmt::Debug for TraitObligationStack			impl<'o,'tcx> fmt::Debug for TraitObligationStack<'o,'tcx> 
fmt::Debug for TraitTy			impl<'tcx> fmt::Debug for TraitTy<'tcx> 
fmt::Debug for TransmuteRestriction			impl<'tcx> fmt::Debug for TransmuteRestriction<'tcx> 
fmt::Debug for TyVid			impl fmt::Debug for TyVid 
fmt::Debug for TypeContents			impl fmt::Debug for TypeContents 
fmt::Debug for TypeFlags			impl fmt::Debug for TypeFlags 
fmt::Debug for TypeTrace			impl<'tcx> fmt::Debug for TypeTrace<'tcx> 
fmt::Debug for Upvar			impl fmt::Debug for Upvar 
fmt::Debug for Variable			impl fmt::Debug for Variable 
fmt::Debug for Variance			impl fmt::Debug for Variance 
fmt::Debug for VecPerParamSpace			impl<T: fmt::Debug> fmt::Debug for VecPerParamSpace<T> 
fmt::Debug for Verify			impl<'tcx> fmt::Debug for Verify<'tcx> 
fmt::Debug for categorization			impl<'tcx> fmt::Debug for categorization<'tcx> 
fmt::Debug for cmt_			impl<'tcx> fmt::Debug for cmt_<'tcx> 
fmt::Debug for field			impl<'tcx> fmt::Debug for field<'tcx> 
fmt::Debug for subst			impl fmt::Debug for subst::RegionSubsts 
fmt::Debug for subst			impl<'tcx> fmt::Debug for subst::Substs<'tcx> 
fmt::Debug for super			impl<'tcx, N:fmt::Debug> fmt::Debug for super::Vtable<'tcx, N> 
fmt::Debug for super			impl<'tcx, N:fmt::Debug> fmt::Debug for super::VtableBuiltinData<N> 
fmt::Debug for super			impl<'tcx, N:fmt::Debug> fmt::Debug for super::VtableClosureData<'tcx, N> 
fmt::Debug for super			impl<'tcx, N:fmt::Debug> fmt::Debug for super::VtableDefaultImplData<N> 
fmt::Debug for super			impl<'tcx, N:fmt::Debug> fmt::Debug for super::VtableImplData<'tcx, N> 
fmt::Debug for super			impl<'tcx,O:fmt::Debug> fmt::Debug for super::Obligation<'tcx, O> 
fmt::Debug for super			impl<'tcx> fmt::Debug for super::FulfillmentError<'tcx> 
fmt::Debug for super			impl<'tcx> fmt::Debug for super::FulfillmentErrorCode<'tcx> 
fmt::Debug for super			impl<'tcx> fmt::Debug for super::MismatchedProjectionTypes<'tcx> 
fmt::Debug for super			impl<'tcx> fmt::Debug for super::VtableObjectData<'tcx> 
fmt::Debug for ty			impl<'tcx> fmt::Debug for ty::Predicate<'tcx> 
fmt::Debug for ty			impl fmt::Debug for ty::FreeRegion 
fmt::Debug for ty			impl fmt::Debug for ty::ItemVariances 
fmt::Debug for ty			impl fmt::Debug for ty::ParamTy 
fmt::Debug for ty			impl fmt::Debug for ty::Region 
fmt::Debug for ty			impl fmt::Debug for ty::UpvarBorrow 
fmt::Debug for ty			impl fmt::Debug for ty::UpvarId 
fmt::Debug for ty			impl<'tcx> fmt::Debug for ty::ExistentialBounds<'tcx> 
fmt::Debug for ty			impl<'tcx> fmt::Debug for ty::GenericPredicates<'tcx> 
fmt::Debug for ty			impl<'tcx> fmt::Debug for ty::ImplOrTraitItem<'tcx> 
fmt::Debug for ty			impl<'tcx> fmt::Debug for ty::InstantiatedPredicates<'tcx> 
fmt::Debug for ty			impl<'tcx> fmt::Debug for ty::ItemSubsts<'tcx> 
fmt::Debug for ty			impl<'tcx> fmt::Debug for ty::MethodObject<'tcx> 
fmt::Debug for ty			impl<'tcx> fmt::Debug for ty::MethodOrigin<'tcx> 
fmt::Debug for ty			impl<'tcx> fmt::Debug for ty::MethodParam<'tcx> 
fmt::Debug for ty			impl<'tcx> fmt::Debug for ty::ProjectionPredicate<'tcx> 
fmt::Debug for ty			impl<'tcx> fmt::Debug for ty::TraitDef<'tcx> 
fmt::Debug for ty			impl<'tcx> fmt::Debug for ty::TraitPredicate<'tcx> 
fmt::Debug for ty			impl<'tcx> fmt::Debug for ty::TraitRef<'tcx> 
fmt::Debug for ty			impl<'tcx> fmt::Debug for ty::TyS<'tcx> 
fmt::Debug for ty			impl<'tcx> fmt::Debug for ty::TypeParameterDef<'tcx> 
fmt::Display for CrateType			impl fmt::Display for CrateType 
fmt::Display for GenericKind			impl<'tcx> fmt::Display for GenericKind<'tcx> 
fmt::Display for PathElem			impl fmt::Display for PathElem 
fmt::Display for TraitAndProjections			impl<'tcx> fmt::Display for TraitAndProjections<'tcx> 
fmt::Display for TypeOrigin			impl fmt::Display for TypeOrigin 
fmt::Display for Upvar			impl fmt::Display for Upvar 
fmt::Display for ty			impl fmt::Display for ty::Binder<ty::OutlivesPredicate<ty::Region, ty::Region>> 
fmt::Display for ty			impl fmt::Display for ty::BoundRegion 
fmt::Display for ty			impl fmt::Display for ty::BuiltinBounds 
fmt::Display for ty			impl fmt::Display for ty::ExplicitSelfCategory 
fmt::Display for ty			impl fmt::Display for ty::InferTy 
fmt::Display for ty			impl fmt::Display for ty::ParamTy 
fmt::Display for ty			impl fmt::Display for ty::Region 
fmt::Display for ty			impl<'tcx, T, U> fmt::Display for ty::OutlivesPredicate<T,U>
fmt::Display for ty			impl<'tcx> fmt::Display for ty::Binder<ty::EquatePredicate<'tcx>> 
fmt::Display for ty			impl<'tcx> fmt::Display for ty::Binder<ty::OutlivesPredicate<Ty<'tcx>, ty::Region>> 
fmt::Display for ty			impl<'tcx> fmt::Display for ty::Binder<ty::ProjectionPredicate<'tcx>> 
fmt::Display for ty			impl<'tcx> fmt::Display for ty::Binder<ty::TraitPredicate<'tcx>> 
fmt::Display for ty			impl<'tcx> fmt::Display for ty::Binder<ty::TraitRef<'tcx>> 
fmt::Display for ty			impl<'tcx> fmt::Display for ty::EquatePredicate<'tcx> 
fmt::Display for ty			impl<'tcx> fmt::Display for ty::FnSig<'tcx> 
fmt::Display for ty			impl<'tcx> fmt::Display for ty::Predicate<'tcx> 
fmt::Display for ty			impl<'tcx> fmt::Display for ty::ProjectionPredicate<'tcx> 
fmt::Display for ty			impl<'tcx> fmt::Display for ty::ProjectionTy<'tcx> 
fmt::Display for ty			impl<'tcx> fmt::Display for ty::TraitPredicate<'tcx> 
fmt::Display for ty			impl<'tcx> fmt::Display for ty::TraitRef<'tcx> 
fmt::Display for ty			impl<'tcx> fmt::Display for ty::TraitTy<'tcx> 
fmt::Display for ty			impl<'tcx> fmt::Display for ty::TyS<'tcx> 
fmt::Display for ty			impl<'tcx> fmt::Display for ty::TypeVariants<'tcx> 
fmt::Display for ty			impl<'tcx> fmt::Display for ty::mt<'tcx> 
fmt::Display for type_err			impl<'tcx> fmt::Display for type_err<'tcx> 
fn_constness			fn fn_constness(item: rbml::Doc) -> ast::Constness 
fn_is_enclosed_by			    fn fn_is_enclosed_by(&self, mut sub_fn: ast::NodeId, sup_fn: ast::NodeId) -> bool 
fn_is_variadic			pub fn fn_is_variadic(fty: Ty) -> bool 
fn_like			    fn fn_like(&mut self,
fn_ret			    fn fn_ret(&self, id: NodeId) -> ty::PolyFnOutput<'tcx> 
fn_sig			fn fn_sig(f: &mut fmt::Formatter,
fn_trait_kind			    pub fn fn_trait_kind(&self, id: ast::DefId) -> Option<ty::ClosureKind> 
fold			    fn fold<T:TypeFoldable<'tcx> + HasProjectionTypes>(&mut self, value: &T) -> T 
fold_autoref			    fn fold_autoref(&mut self, ar: &ty::AutoRef<'tcx>) -> ty::AutoRef<'tcx> 
fold_bare_fn_ty			    fn fold_bare_fn_ty(&mut self,
fold_binder			    fn fold_binder<T>(&mut self, t: &ty::Binder<T>) -> ty::Binder<T>
fold_block			    fn fold_block(&mut self, blk: P<ast::Block>) -> P<ast::Block> 
fold_closure_ty			    fn fold_closure_ty(&mut self,
fold_existential_bounds			    fn fold_existential_bounds(&mut self, s: &ty::ExistentialBounds<'tcx>)
fold_fn_sig			    fn fold_fn_sig(&mut self,
fold_item_substs			    fn fold_item_substs(&mut self, i: ty::ItemSubsts<'tcx>) -> ty::ItemSubsts<'tcx> 
fold_mt			    fn fold_mt(&mut self, t: &ty::mt<'tcx>) -> ty::mt<'tcx> 
fold_output			    fn fold_output(&mut self,
fold_pat			    fn fold_pat(&mut self, pat: P<Pat>) -> P<Pat> 
fold_region			    fn fold_region(&mut self, r: ty::Region) -> ty::Region 
fold_region			    fn fold_region(&mut self, r: ty::Region) -> ty::Region 
fold_region			    fn fold_region(&mut self, r: ty::Region) -> ty::Region 
fold_region			    fn fold_region(&mut self, r: ty::Region) -> ty::Region 
fold_region			    fn fold_region(&mut self, r: ty::Region) -> ty::Region 
fold_regions			pub fn fold_regions<'tcx,T,F>(tcx: &ty::ctxt<'tcx>,
fold_regions_in			fn fold_regions_in<'tcx, T, F>(tcx: &ty::ctxt<'tcx>,
fold_substs			    fn fold_substs(&mut self,
fold_trait_ref			    fn fold_trait_ref(&mut self, t: &ty::TraitRef<'tcx>) -> ty::TraitRef<'tcx> 
fold_ty			    fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> 
fold_ty			    fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> 
fold_ty			    fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> 
fold_ty			    fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> 
fold_ty			    fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> 
fold_ty			pub fn fold_ty<'tcx, F>(cx: &ctxt<'tcx>, t0: Ty<'tcx>,
fold_ty			    fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> 
fold_ty			    fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> 
fold_with			    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Normalized<'tcx, T> 
fold_with			                fn fold_with<F:TypeFolder<'tcx>>(&self, _: &mut F) -> 
fold_with			    fn fold_with<F: TypeFolder<'tcx>>(&self, _folder: &mut F) -> ty::BuiltinBounds 
fold_with			    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Box<T> 
fold_with			    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Option<T> 
fold_with			    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> OwnedSlice<T> 
fold_with			    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Rc<T> 
fold_with			    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self;
fold_with			    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Ty<'tcx> 
fold_with			    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Vec<T> 
fold_with			    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> VecPerParamSpace<T> 
fold_with			    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> subst::Substs<'tcx> 
fold_with			    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::AutoRef<'tcx> 
fold_with			    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::BareFnTy<'tcx> 
fold_with			    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::Binder<T> 
fold_with			    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::ClosureTy<'tcx> 
fold_with			    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::ExistentialBounds<'tcx> 
fold_with			    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::FnOutput<'tcx> 
fold_with			    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::FnSig<'tcx> 
fold_with			    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::GenericPredicates<'tcx> 
fold_with			    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::Generics<'tcx> 
fold_with			    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::InstantiatedPredicates<'tcx> 
fold_with			    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::ItemSubsts<'tcx> 
fold_with			    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::MethodOrigin<'tcx> 
fold_with			    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::ObjectLifetimeDefault 
fold_with			    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::Predicate<'tcx> 
fold_with			    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::ProjectionPredicate<'tcx> 
fold_with			    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::ProjectionTy<'tcx> 
fold_with			    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::Region 
fold_with			    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::RegionParameterDef 
fold_with			    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::TraitRef<'tcx> 
fold_with			    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::TypeParameterDef<'tcx> 
fold_with			    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::field<'tcx> 
fold_with			    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::mt<'tcx> 
fold_with			    fn fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> (T, U) 
fold_with			    fn fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> traits::Obligation<'tcx, O> 
fold_with			    fn fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> traits::Vtable<'tcx, N> 
fold_with			    fn fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> traits::VtableBuiltinData<N> 
fold_with			    fn fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> traits::VtableClosureData<'tcx, N> 
fold_with			    fn fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> traits::VtableDefaultImplData<N> 
fold_with			    fn fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> traits::VtableImplData<'tcx, N> 
fold_with			    fn fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> traits::VtableObjectData<'tcx> 
fold_with			    fn fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::ClosureUpvar<'tcx> 
fold_with			    fn fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::EquatePredicate<'tcx> 
fold_with			    fn fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::OutlivesPredicate<T,U> 
fold_with			    fn fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::ParameterEnvironment<'a, 'tcx> 
fold_with			    fn fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::TraitPredicate<'tcx> 
fold_with			    fn fold_with<F:ty_fold::TypeFolder<'tcx>>(&self, folder: &mut F)
foo			fn foo(arg: &Box<SomeTrait>) { ... }
foo			fn foo(x: &'a str) { }
foo			fn foo<'a, 'b, 'a>(x: &'a str, y: &'b str) { }
foo			fn foo<'a>(arg: &Box<SomeTrait+'a>) { ... }
foo			fn foo<'a>(x: &'a str) { }
foo			fn foo<'static>(x: &'static str) { }
foo			fn foo<T>(t: T) where T: Trait<AssociatedType = &'static str> 
foo			fn foo<T>(t: T) where T: Trait<AssociatedType=u32> 
foo			        fn foo() -> isize { 3 + 4 } \/\/ first smalltalk program ever executed.
foo			        fn foo() {}
foo			        fn foo(x: usize, y: usize) -> usize 
foo			        fn foo(_: LangItem) -> Option<ast::DefId> { None }
for_def			    pub fn for_def(def: &TypeParameterDef) -> ParamTy 
for_each_impl			    pub fn for_each_impl<F: FnMut(DefId)>(&self, tcx: &ctxt<'tcx>, mut f: F)  
for_each_lib_search_path			    pub fn for_each_lib_search_path<F>(&self, mut f: F) where
for_each_relevant_impl			    pub fn for_each_relevant_impl<F: FnMut(DefId)>(&self,
for_item			    pub fn for_item(cx: &'a ctxt<'tcx>, id: NodeId) -> ParameterEnvironment<'a, 'tcx> 
for_self			    pub fn for_self() -> ParamTy 
for_sty			    fn for_sty(st: &TypeVariants) -> FlagComputation 
free_region			    pub mod free_region;
free_region_from_def			pub fn free_region_from_def(outlives_extent: region::DestructionScopeData,
free_region_map			    pub fn free_region_map(&self, id: NodeId) -> FreeRegionMap 
free_regions_first			        fn free_regions_first(a: &RegionAndOrigin,
free_regions_from_same_fn			        fn free_regions_from_same_fn(tcx: &ty::ctxt,
freely_aliasable			    pub fn freely_aliasable(&self, ctxt: &ty::ctxt<'tcx>)
fresh_bound_region			    pub fn fresh_bound_region(&self, debruijn: ty::DebruijnIndex) -> ty::Region 
fresh_bound_variable			        fn fresh_bound_variable(infcx: &InferCtxt, debruijn: ty::DebruijnIndex) -> ty::Region 
fresh_substs_for_generics			    pub fn fresh_substs_for_generics(&self,
fresh_substs_for_trait			    pub fn fresh_substs_for_trait(&self,
fresh_type_vars_for_impl			pub fn fresh_type_vars_for_impl<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,
freshen			    fn freshen<F>(&mut self,
freshen			    pub fn freshen<T:TypeFoldable<'tcx>>(&self, t: T) -> T 
freshen			mod freshen;
freshener			    pub fn freshener<'b>(&'b self) -> TypeFreshener<'b, 'tcx> 
from			    pub fn from(node: &'a LinkedPathNode) -> LinkedPath<'a> 
from			    pub fn from(tcx: &ty::ctxt, t: ast::IntTy) -> IntTy 
from			    pub fn from(tcx: &ty::ctxt, t: ast::UintTy) -> UintTy 
from_ast_variant			    pub fn from_ast_variant(cx: &ctxt<'tcx>,
from_borrow_kind			    pub fn from_borrow_kind(borrow_kind: ty::BorrowKind) -> MutabilityCategory 
from_builtin_kind			    pub fn from_builtin_kind(&self, bound: ty::BuiltinBound)
from_closure			    fn from_closure(tcx: &ty::ctxt, closure_did: ast::DefId)
from_index			    fn from_index(i: u32) -> ty::FloatVid { ty::FloatVid { index: i } }
from_index			    fn from_index(i: u32) -> ty::IntVid { ty::IntVid { index: i } }
from_iter			    fn from_iter<T: IntoIterator<Item=Vec<&'a Pat>>>(iter: T) -> Matrix<'a> 
from_local			    fn from_local(tcx: &ty::ctxt, id: ast::NodeId) -> MutabilityCategory 
from_method_id			    fn from_method_id(tcx: &ty::ctxt, method_id: ast::DefId)
from_method_origin			    fn from_method_origin(tcx: &ty::ctxt, origin: &MethodOrigin)
from_mutbl			    pub fn from_mutbl(m: ast::Mutability) -> MutabilityCategory 
from_mutbl			    pub fn from_mutbl(m: ast::Mutability) -> BorrowKind 
from_node			    pub fn from_node(node: Node) -> Option<Code> 
from_node			    pub fn from_node(node: Node) -> Option<FnLikeNode> 
from_node			    fn from_node(p: NodeId, node: Node<'ast>) -> MapEntry<'ast> 
from_node_id			    pub fn from_node_id(node_id: ast::NodeId) -> CodeExtent 
from_pointer_kind			    fn from_pointer_kind(base_mutbl: MutabilityCategory,
from_str			    pub fn from_str(x: &str) -> Option<Level> 
from_trait_id			    fn from_trait_id(tcx: &ty::ctxt, trait_id: ast::DefId)
from_ty			    pub fn from_ty(tcx: &ty::ctxt<'tcx>, t: Ty<'tcx>)
from_u32			            pub fn from_u32(u: u32) -> Option<
from_uint			    pub fn from_uint(u: usize) -> ParamSpace 
from_usize			    fn from_usize(v: usize) -> BuiltinBound 
fromb			    fn fromb(b: bool) -> ConstVal { Int(b as i64) }
fs			    pub mod fs;
fulfill			mod fulfill;
full_def			    pub fn full_def(&self) -> Def 
fully_normalize			    fn fully_normalize<T>(&self, value: &T) -> Result<T,ErrorReported>
fully_normalize			pub fn fully_normalize<'a,'tcx,T>(infcx: &InferCtxt<'a,'tcx>,
fully_resolve			    pub fn fully_resolve<T:TypeFoldable<'tcx>>(&self, value: &T) -> fres<T> 
fully_resolve			pub fn fully_resolve<'a, 'tcx, T>(infcx: &InferCtxt<'a,'tcx>, value: &T) -> fres<T>
fundamental_ty			fn fundamental_ty<'tcx>(tcx: &ty::ctxt<'tcx>, ty: Ty<'tcx>) -> bool
gather_attrs			pub fn gather_attrs(attrs: &[ast::Attribute])
generalize			    fn generalize(&self,
generalize_region			        fn generalize_region(infcx: &InferCtxt,
generics_require_inlining			fn generics_require_inlining(generics: &ast::Generics) -> bool 
generics_require_sized_self			fn generics_require_sized_self<'tcx>(tcx: &ty::ctxt<'tcx>,
get			    pub fn get(&self, id: NodeId) -> Node<'ast> 
get			    fn get(&self) -> usize { let LiveNode(v) = *self; v }
get			    fn get(&self) -> usize { let Variable(v) = *self; v }
get			    pub fn get<'a>(&'a self, space: ParamSpace, index: usize) -> &'a T 
get_associated_consts			pub fn get_associated_consts<'tcx>(tcx: &ty::ctxt<'tcx>, def: ast::DefId)
get_associated_consts			pub fn get_associated_consts<'tcx>(intr: Rc<IdentInterner>,
get_attributes			fn get_attributes(md: rbml::Doc) -> Vec<ast::Attribute> 
get_attrs			pub fn get_attrs<'tcx>(tcx: &'tcx ctxt, did: DefId)
get_cfg_indices			fn get_cfg_indices<'a>(id: ast::NodeId, index: &'a NodeMap<Vec<CFGIndex>>) -> &'a [CFGIndex] 
get_crate_attributes			pub fn get_crate_attributes(data: &[u8]) -> Vec<ast::Attribute> 
get_crate_data			    pub fn get_crate_data(&self, cnum: ast::CrateNum) -> Rc<crate_metadata> 
get_crate_deps			pub fn get_crate_deps(data: &[u8]) -> Vec<CrateDep> 
get_crate_hash			    pub fn get_crate_hash(&self, cnum: ast::CrateNum) -> Svh 
get_crate_hash			pub fn get_crate_hash(data: &[u8]) -> Svh 
get_crate_name			pub fn get_crate_name(data: &[u8]) -> String 
get_crate_triple			pub fn get_crate_triple(data: &[u8]) -> Option<String> 
get_custom_coerce_unsized_kind			pub fn get_custom_coerce_unsized_kind<'tcx>(tcx: &ty::ctxt<'tcx>,
get_custom_coerce_unsized_kind			pub fn get_custom_coerce_unsized_kind<'tcx>(cdata: Cmd,
get_dylib_dependency_formats			pub fn get_dylib_dependency_formats(cstore: &cstore::CStore,
get_dylib_dependency_formats			pub fn get_dylib_dependency_formats(cdata: Cmd)
get_dylib_search_paths			    pub fn get_dylib_search_paths(&self) -> Vec<PathBuf> 
get_enum_variants			pub fn get_enum_variants<'tcx>(tcx: &ty::ctxt<'tcx>, def: ast::DefId)
get_enum_variants			pub fn get_enum_variants<'tcx>(intr: Rc<IdentInterner>, cdata: Cmd, id: ast::NodeId,
get_explicit_self			fn get_explicit_self(item: rbml::Doc) -> ty::ExplicitSelfCategory 
get_field_type			pub fn get_field_type<'tcx>(tcx: &ty::ctxt<'tcx>, class_id: ast::DefId,
get_foreign_abi			    pub fn get_foreign_abi(&self, id: NodeId) -> abi::Abi 
get_foreign_vis			    pub fn get_foreign_vis(&self, id: NodeId) -> Visibility 
get_generated_lifetimes			    fn get_generated_lifetimes(&self) -> Vec<ast::Lifetime> 
get_impl_items			pub fn get_impl_items(cstore: &cstore::CStore, impl_def_id: ast::DefId)
get_impl_items			pub fn get_impl_items(cdata: Cmd, impl_id: ast::NodeId)
get_impl_or_trait_item			pub fn get_impl_or_trait_item<'tcx>(tcx: &ty::ctxt<'tcx>, def: ast::DefId)
get_impl_or_trait_item			pub fn get_impl_or_trait_item<'tcx>(intr: Rc<IdentInterner>,
get_impl_polarity			pub fn get_impl_polarity<'tcx>(tcx: &ty::ctxt<'tcx>,
get_impl_polarity			pub fn get_impl_polarity<'tcx>(cdata: Cmd,
get_impl_trait			pub fn get_impl_trait<'tcx>(tcx: &ty::ctxt<'tcx>,
get_impl_trait			pub fn get_impl_trait<'tcx>(cdata: Cmd,
get_imported_filemaps			pub fn get_imported_filemaps(metadata: &[u8]) -> Vec<codemap::FileMap> 
get_item_attrs			pub fn get_item_attrs(cstore: &cstore::CStore,
get_item_attrs			pub fn get_item_attrs(cdata: Cmd,
get_item_path			pub fn get_item_path(tcx: &ty::ctxt, def: ast::DefId) -> Vec<ast_map::PathElem> 
get_item_path			pub fn get_item_path(cdata: Cmd, id: ast::NodeId) -> Vec<ast_map::PathElem> 
get_item_variances			pub fn get_item_variances(cstore: &cstore::CStore,
get_item_variances			pub fn get_item_variances(cdata: Cmd, id: ast::NodeId) -> ty::ItemVariances 
get_level_source			    fn get_level_source(&self, lint: LintId) -> LevelSource 
get_lib_path			    pub fn get_lib_path(&self) -> PathBuf 
get_lint_groups			    pub fn get_lint_groups<'t>(&'t self) -> Vec<(&'static str, Vec<LintId>, bool)> 
get_lints			    fn get_lints(&self) -> LintArray 
get_lints			    fn get_lints(&self) -> LintArray 
get_lints			    pub fn get_lints<'t>(&'t self) -> &'t [(&'static Lint, bool)] 
get_lints			    fn get_lints(&self) -> LintArray;
get_meta_items			fn get_meta_items(md: rbml::Doc) -> Vec<P<ast::MetaItem>> 
get_metadata_section			fn get_metadata_section(target: &Target, filename: &Path)
get_metadata_section_imp			fn get_metadata_section_imp(target: &Target, filename: &Path)
get_method_arg_names			pub fn get_method_arg_names(cstore: &cstore::CStore, did: ast::DefId)
get_method_arg_names			pub fn get_method_arg_names(cdata: Cmd, id: ast::NodeId) -> Vec<String> 
get_methods_if_impl			pub fn get_methods_if_impl(cstore: &cstore::CStore,
get_methods_if_impl			pub fn get_methods_if_impl(intr: Rc<IdentInterner>,
get_missing_lang_items			pub fn get_missing_lang_items(cstore: &cstore::CStore, cnum: ast::CrateNum)
get_missing_lang_items			pub fn get_missing_lang_items(cdata: Cmd)
get_mut_slice			    pub fn get_mut_slice<'a>(&'a mut self, space: ParamSpace) -> &'a mut [T] 
get_mutability			    fn get_mutability(ch: u8) -> ast::Mutability 
get_native_libraries			pub fn get_native_libraries(cstore: &cstore::CStore, crate_num: ast::CrateNum)
get_native_libraries			pub fn get_native_libraries(cdata: Cmd)
get_or_default_sysroot			pub fn get_or_default_sysroot() -> PathBuf 
get_ordered_deps			    fn get_ordered_deps(cstore: &cstore::CStore) -> Vec<decoder::CrateDep> 
get_parent			    pub fn get_parent(&self, id: NodeId) -> NodeId 
get_parent_did			    pub fn get_parent_did(&self, id: NodeId) -> DefId 
get_path_elem			    pub fn get_path_elem(&self, id: NodeId) -> PathElem 
get_plugin_registrar_fn			pub fn get_plugin_registrar_fn(data: &[u8]) -> Option<ast::NodeId> 
get_predicates			pub fn get_predicates<'tcx>(tcx: &ty::ctxt<'tcx>, def: ast::DefId)
get_predicates			pub fn get_predicates<'tcx>(cdata: Cmd,
get_provided_source			fn get_provided_source(d: rbml::Doc, cdata: Cmd) -> Option<ast::DefId> 
get_provided_trait_methods			pub fn get_provided_trait_methods<'tcx>(tcx: &ty::ctxt<'tcx>,
get_provided_trait_methods			pub fn get_provided_trait_methods<'tcx>(intr: Rc<IdentInterner>,
get_reachable_extern_fns			pub fn get_reachable_extern_fns(cstore: &cstore::CStore, cnum: ast::CrateNum)
get_reachable_extern_fns			pub fn get_reachable_extern_fns(cdata: Cmd) -> Vec<ast::DefId> 
get_repr_attrs			pub fn get_repr_attrs(cstore: &cstore::CStore, def: ast::DefId)
get_repr_attrs			pub fn get_repr_attrs(cdata: Cmd, id: ast::NodeId) -> Vec<attr::ReprAttr> 
get_rust_path			pub fn get_rust_path() -> Option<String> 
get_self			    pub fn get_self<'a>(&'a self) -> Option<&'a T> 
get_slice			    pub fn get_slice<'a>(&'a self, space: ParamSpace) -> &'a [T] 
get_stability			pub fn get_stability(cstore: &cstore::CStore,
get_stability			pub fn get_stability(cdata: Cmd, id: ast::NodeId) -> Option<attr::Stability> 
get_struct_ctor_id			fn get_struct_ctor_id(item: &ast::Item) -> Option<ast::NodeId> 
get_struct_field_attrs			pub fn get_struct_field_attrs(cstore: &cstore::CStore, def: ast::DefId) -> HashMap<ast::NodeId,
get_struct_field_attrs			pub fn get_struct_field_attrs(cdata: Cmd) -> HashMap<ast::NodeId, Vec<ast::Attribute>> 
get_struct_fields			pub fn get_struct_fields(cstore: &cstore::CStore,
get_struct_fields			pub fn get_struct_fields(intr: Rc<IdentInterner>, cdata: Cmd, id: ast::NodeId)
get_super_predicates			pub fn get_super_predicates<'tcx>(tcx: &ty::ctxt<'tcx>, def: ast::DefId)
get_super_predicates			pub fn get_super_predicates<'tcx>(cdata: Cmd,
get_symbol			pub fn get_symbol(cstore: &cstore::CStore, def: ast::DefId) -> String 
get_symbol			pub fn get_symbol(data: &[u8], id: ast::NodeId) -> String 
get_tools_search_paths			    pub fn get_tools_search_paths(&self) -> Vec<PathBuf> 
get_trait_def			pub fn get_trait_def<'tcx>(tcx: &ty::ctxt<'tcx>, def: ast::DefId) -> ty::TraitDef<'tcx> 
get_trait_def			pub fn get_trait_def<'tcx>(cdata: Cmd,
get_trait_item_def_ids			pub fn get_trait_item_def_ids(cstore: &cstore::CStore, def: ast::DefId)
get_trait_item_def_ids			pub fn get_trait_item_def_ids(cdata: Cmd, id: ast::NodeId)
get_trait_name			pub fn get_trait_name(cstore: &cstore::CStore, def: ast::DefId) -> ast::Name 
get_trait_name			pub fn get_trait_name(intr: Rc<IdentInterner>,
get_trait_of_item			pub fn get_trait_of_item(cstore: &cstore::CStore,
get_trait_of_item			pub fn get_trait_of_item(cdata: Cmd, id: ast::NodeId, tcx: &ty::ctxt)
get_tuple_struct_definition_if_ctor			pub fn get_tuple_struct_definition_if_ctor(cstore: &cstore::CStore,
get_tuple_struct_definition_if_ctor			pub fn get_tuple_struct_definition_if_ctor(cdata: Cmd,
get_ty_str_ctxt			trait get_ty_str_ctxt<'tcx> 
get_ty_str_ctxt for e			impl<'a, 'tcx> get_ty_str_ctxt<'tcx> for e::EncodeContext<'a, 'tcx> 
get_type			pub fn get_type<'tcx>(tcx: &ty::ctxt<'tcx>,
get_type			pub fn get_type<'tcx>(cdata: Cmd, id: ast::NodeId, tcx: &ty::ctxt<'tcx>)
get_type_name_if_impl			pub fn get_type_name_if_impl(cstore: &cstore::CStore, def: ast::DefId)
get_type_name_if_impl			pub fn get_type_name_if_impl(cdata: Cmd,
get_unstable_features_setting			pub fn get_unstable_features_setting() -> UnstableFeatures 
get_used_crate_source			    pub fn get_used_crate_source(&self, cnum: ast::CrateNum)
get_used_crates			    pub fn get_used_crates(&self, prefer: LinkagePreference)
get_used_libraries			    pub fn get_used_libraries<'a>(&'a self)
get_used_link_args			    pub fn get_used_link_args<'a>(&'a self) -> &'a RefCell<Vec<String> > 
get_vtable_index_of_object_method			pub fn get_vtable_index_of_object_method<'tcx>(tcx: &ty::ctxt<'tcx>,
give_expl_lifetime_param			    fn give_expl_lifetime_param(&self,
give_lifetime			    fn give_lifetime(&self) -> ast::Lifetime 
give_suggestion			    fn give_suggestion(&self, same_regions: &[SameRegions]) 
give_suggestion			    fn give_suggestion(&self, same_regions: &[SameRegions]);
glb			    pub fn glb(&self) -> Glb<'a, 'tcx> 
glb			    pub fn glb(&'a self, a_is_expected: bool, trace: TypeTrace<'tcx>)
glb			pub mod glb;
glb_concrete_regions			    fn glb_concrete_regions(&self,
glb_free_regions			    fn glb_free_regions(&self,
glb_regions			    pub fn glb_regions(&self,
global_expr			    fn global_expr(&mut self, mode: Mode, expr: &ast::Expr) -> ConstQualif 
go			            pub fn go(tcx: &ty::ctxt) 
graph_id			    fn graph_id(&'a self) -> dot::Id<'a> { dot::Id::new(&self.name[..]).unwrap() }
graph_id			    fn graph_id(&self) -> dot::Id 
graphviz			pub mod graphviz;
graphviz			mod graphviz;
guarantor			    pub fn guarantor(&self) -> cmt<'tcx> 
handle			    fn handle<A, I, M, C>(self, item_fn: I, method: M, closure: C) -> A where
handle_const_fn_call			    fn handle_const_fn_call(&mut self,
handle_field_access			    fn handle_field_access(&mut self, lhs: &ast::Expr, name: ast::Name) 
handle_field_pattern_match			    fn handle_field_pattern_match(&mut self, lhs: &ast::Pat,
handle_tup_field_access			    fn handle_tup_field_access(&mut self, lhs: &ast::Expr, idx: usize) 
has_allow_dead_code_or_lang_attr			fn has_allow_dead_code_or_lang_attr(attrs: &[ast::Attribute]) -> bool 
has_attr			pub fn has_attr(tcx: &ctxt, did: DefId, attr: &str) -> bool 
has_bitset_for_nodeid			    fn has_bitset_for_nodeid(&self, n: ast::NodeId) -> bool 
has_drop_flag			    pub fn has_drop_flag(&self) -> bool 
has_dtor			    pub fn has_dtor(&self) -> bool 
has_dtor			pub fn has_dtor(cx: &ctxt, struct_id: DefId) -> bool 
has_errors			    pub fn has_errors(&self) -> bool 
has_escaping_regions			    fn has_escaping_regions(&self) -> bool 
has_escaping_regions			    pub fn has_escaping_regions(&self) -> bool 
has_projection_types			    fn has_projection_types(&self) -> bool 
has_projection_types			    fn has_projection_types(&self) -> bool;
has_region_params			    pub fn has_region_params(&self, space: subst::ParamSpace) -> bool 
has_regions_escaping_depth			    pub fn has_regions_escaping_depth(&self, depth: u32) -> bool 
has_regions_escaping_depth			    fn has_regions_escaping_depth(&self, depth: u32) -> bool 
has_regions_escaping_depth			    fn has_regions_escaping_depth(&self, depth: u32) -> bool;
has_type_params			    pub fn has_type_params(&self, space: subst::ParamSpace) -> bool 
hash			    fn hash<H: hash::Hasher>(&self, state: &mut H) 
hash			    pub fn hash(&self) -> Svh { decoder::get_crate_hash(self.data()) }
hash			    fn hash<H: Hasher>(&self, s: &mut H) 
hash::Hash for LintId			impl hash::Hash for LintId 
hash_crate_independent			pub fn hash_crate_independent<'tcx>(tcx: &ctxt<'tcx>, ty: Ty<'tcx>, svh: &Svh) -> u64 
help			    pub fn help(&self, msg: &str) 
helper			        fn helper(_this: &RegionVarBindings,
helper			        fn helper<'a, 'tcx>(this: &RegionVarBindings<'a, 'tcx>,
helper			    fn helper<'tcx>(tcx: &ctxt<'tcx>, ty: Ty<'tcx>, svh: &Svh,
higher_ranked			mod higher_ranked;
higher_ranked_glb			    fn higher_ranked_glb<T>(&self, a: &Binder<T>, b: &Binder<T>) -> RelateResult<'tcx, Binder<T>>
higher_ranked_lub			    fn higher_ranked_lub<T>(&self, a: &Binder<T>, b: &Binder<T>) -> RelateResult<'tcx, Binder<T>>
higher_ranked_sub			    fn higher_ranked_sub<T>(&self, a: &Binder<T>, b: &Binder<T>) -> RelateResult<'tcx, Binder<T>>
higher_ranked_sub			    fn higher_ranked_sub<T>(&self, a: &Binder<T>, b: &Binder<T>)
host_filesearch			    pub fn host_filesearch(&self, kind: PathKind) -> filesearch::FileSearch 
host_triple			pub fn host_triple() -> &'static str 
i64_to_disr			    fn i64_to_disr(&self, val: i64) -> Option<Disr> 
i64_to_disr			    fn i64_to_disr(&self, val: i64) -> Option<Disr>;
id			    pub fn id(&self) -> ast::NodeId 
id			    pub fn id(self) -> NodeId 
id			    fn id(&mut self, id: ast::NodeId) 
id			    fn id(&mut self, id: ast::NodeId);
id			    pub fn id(&self) -> ast::NodeId 
id			    fn id(&self) -> ast::NodeId { self.id }
id			    fn id(&self) -> ast::NodeId;
id			    fn id(&self) -> ImplOrTraitItemId 
id			    pub fn id(&self) -> ast::DefId 
ident_of			    fn ident_of(&self, st: &str) -> ast::Ident 
ident_of			    fn ident_of(&self, st: &str) -> ast::Ident;
idx			    fn idx(&self, ln: LiveNode, var: Variable) -> usize 
impl_of_method			pub fn impl_of_method(tcx: &ctxt, def_id: ast::DefId)
impl_or_trait_item			pub fn impl_or_trait_item<'tcx>(cx: &ctxt<'tcx>, id: ast::DefId)
impl_or_trait_item_idx			pub fn impl_or_trait_item_idx(id: ast::Name, trait_items: &[ImplOrTraitItem])
impl_or_trait_obligations			    fn impl_or_trait_obligations(&mut self,
impl_trait_ref			pub fn impl_trait_ref<'tcx>(cx: &ctxt<'tcx>, id: ast::DefId)
impl_trait_ref_and_oblig			fn impl_trait_ref_and_oblig<'a,'tcx>(selcx: &mut SelectionContext<'a,'tcx>,
implications			pub fn implications<'a,'tcx>(
implicator			    pub mod implicator;
import_codemap			pub fn import_codemap(local_codemap: &codemap::CodeMap,
imported_filemaps			    pub fn imported_filemaps<'a>(&'a self, codemap: &codemap::CodeMap)
impossible_case			    pub fn impossible_case(&self, sp: Span, msg: &str) -> ! 
in_binder			fn in_binder<'tcx, T, U>(f: &mut fmt::Formatter,
in_snapshot			    fn in_snapshot(&self) -> bool 
inc_and_offset_cur_anon			    fn inc_and_offset_cur_anon(&self, n: u32) 
inc_counter			    fn inc_counter(&self) 
inc_cur_anon			    fn inc_cur_anon(&self, n: u32) 
indent			pub fn indent<R, F>(op: F) -> R where
indenter			pub fn indenter() -> Indenter 
index			    fn index<'a>(&'a self, idx: u8) -> &'a u8 { &self.a }
index			    fn index(&self) -> u32 { self.index }
index			pub fn index<'tcx>(ty: Ty<'tcx>) -> Option<Ty<'tcx>> 
indices2			    fn indices2<F>(&mut self, ln: LiveNode, succ_ln: LiveNode, mut op: F) where
infcx			    fn infcx(&self) -> &'a InferCtxt<'a,'tcx> 
infcx			    fn infcx(&self) -> &'f InferCtxt<'f, 'tcx>;
infcx			    fn infcx(&self) -> &'a InferCtxt<'a,'tcx> 
infcx			    pub fn infcx(&self) -> &'cx InferCtxt<'cx, 'tcx> 
infer			    pub mod infer;
infer_variable_values			    fn infer_variable_values(&self,
inherit			    pub fn inherit(&self) -> MutabilityCategory 
init_empty			    fn init_empty(&mut self, ln: LiveNode, succ_ln: LiveNode) 
init_from_succ			    fn init_from_succ(&mut self, ln: LiveNode, succ_ln: LiveNode) 
initial_value			    fn initial_value(&self) -> bool;
inline_const_fn_from_external_crate			fn inline_const_fn_from_external_crate(tcx: &ty::ctxt, def_id: ast::DefId)
inner			        mod inner 
input			    pub fn input(&self, index: usize) -> ty::Binder<Ty<'tcx>> 
input_types			    pub fn input_types(&self) -> &[Ty<'tcx>] 
inputs			    pub fn inputs(&self) -> ty::Binder<Vec<Ty<'tcx>>> 
insert			    fn insert(&mut self, id: NodeId, node: Node<'ast>) 
insert			    fn insert(&mut self, pred: &ty::Predicate<'tcx>) -> bool 
insert_candidate_cache			    fn insert_candidate_cache(&mut self,
insert_entry			    fn insert_entry(&mut self, id: NodeId, entry: MapEntry<'ast>) 
insert_lifetime			    fn insert_lifetime(&mut self,
instantiate			    pub fn instantiate(&self,
instantiate			    pub fn instantiate(&self, tcx: &ty::ctxt<'tcx>, substs: &Substs<'tcx>)
instantiate_and_push			    pub fn instantiate_and_push(
instantiate_supertrait			    pub fn instantiate_supertrait(&self,
int_unification_error			fn int_unification_error<'tcx>(a_is_expected: bool, v: (ty::IntVarValue, ty::IntVarValue))
intercrate			    pub fn intercrate(infcx: &'cx InferCtxt<'cx, 'tcx>,
interior			        fn interior<'tcx, N: ast_node>(elt: &N,
interior_param			    pub fn interior_param(&self) -> bool 
interior_unsafe			    pub fn interior_unsafe(&self) -> bool 
interior_unsized			    pub fn interior_unsized(&self) -> bool 
intern_stability			    pub fn intern_stability(&self, stab: attr::Stability) -> &'tcx attr::Stability 
intern_trait_def			    pub fn intern_trait_def(&self, def: TraitDef<'tcx>) -> &'tcx TraitDef<'tcx> 
intern_ty			fn intern_ty<'tcx>(type_arena: &'tcx TypedArena<TyS<'tcx>>,
intersect_scopes			    fn intersect_scopes(&self,
intersects			    pub fn intersects(&self, tc: TypeContents) -> bool 
into_iter			    fn into_iter(self) -> IntoIter<T> 
into_iter			    fn into_iter(self) -> Iter<'a, T> 
into_iter			    pub fn into_iter(self) -> IntoIter<T> 
into_iter			    fn into_iter(self) -> Self::IntoIter 
into_vec			    pub fn into_vec(self) -> Vec<T> 
intrinsicck			    pub mod intrinsicck;
invalid_node			fn invalid_node() -> LiveNode { LiveNode(usize::MAX) }
invalid_users			fn invalid_users() -> Users 
is_binding_pat			    fn is_binding_pat(pat: &ast::Pat) -> bool 
is_borrowed_ty			    fn is_borrowed_ty(ty: &ast::Ty) -> bool 
is_bound			    pub fn is_bound(&self) -> bool 
is_const_fn			pub fn is_const_fn(cstore: &cstore::CStore, did: ast::DefId) -> bool 
is_const_fn			pub fn is_const_fn(cdata: Cmd, id: ast::NodeId) -> bool 
is_default_impl			pub fn is_default_impl(cstore: &cstore::CStore, impl_did: ast::DefId) -> bool 
is_default_impl			pub fn is_default_impl(cdata: Cmd, impl_id: ast::NodeId) -> bool 
is_defaulted_trait			pub fn is_defaulted_trait(cstore: &cstore::CStore, trait_def_id: ast::DefId) -> bool 
is_defaulted_trait			pub fn is_defaulted_trait(cdata: Cmd, trait_id: ast::NodeId) -> bool 
is_duplicate			    pub fn is_duplicate(&self, p: &ty::Predicate<'tcx>) -> bool 
is_duplicate_or_add			    fn is_duplicate_or_add(&mut self, p: &ty::Predicate<'tcx>) -> bool 
is_duplicate_or_add			    fn is_duplicate_or_add(&mut self, tcx: &ty::ctxt<'tcx>,
is_empty			    pub fn is_empty(&self) -> bool 
is_empty			    pub fn is_empty(&self) -> bool 
is_empty			    pub fn is_empty(&self) -> bool 
is_empty_in			    pub fn is_empty_in(&self, space: ParamSpace) -> bool 
is_erased			    pub fn is_erased(&self) -> bool 
is_ffi_safe			pub fn is_ffi_safe<'tcx>(cx: &ctxt<'tcx>, ty: Ty<'tcx>) -> bool 
is_fn_like			    fn is_fn_like(&self) -> bool 
is_fn_ty			pub fn is_fn_ty(fty: Ty) -> bool 
is_global			    pub fn is_global(&self) -> bool 
is_identity			    pub fn is_identity(&self) -> bool 
is_immutable			    pub fn is_immutable(&self) -> bool 
is_impl			pub fn is_impl(cstore: &cstore::CStore, did: ast::DefId) -> bool 
is_impl			pub fn is_impl(cdata: Cmd, id: ast::NodeId) -> bool 
is_impl			pub fn is_impl<'tcx>(cx: &ctxt<'tcx>, id: ast::DefId) -> bool 
is_instantiable			pub fn is_instantiable<'tcx>(cx: &ctxt<'tcx>, r_ty: Ty<'tcx>) -> bool 
is_internal			fn is_internal(tcx: &ty::ctxt, span: Span) -> bool 
is_knowable			    fn is_knowable<'o>(&mut self,
is_last			    fn is_last(b: char, c: char) -> bool { return c == b; }
is_method_call			    fn is_method_call(&self, expr: &ast::Expr) -> bool 
is_method_call			    fn is_method_call(&self, id: ast::NodeId) -> bool;
is_method_call			    fn is_method_call(&self, id: ast::NodeId) -> bool 
is_method_call			    pub fn is_method_call(&self, expr_id: ast::NodeId) -> bool 
is_mutable			    pub fn is_mutable(&self) -> bool 
is_noop			    pub fn is_noop(&self) -> bool 
is_noop			    pub fn is_noop(&self) -> bool 
is_object_safe			pub fn is_object_safe<'tcx>(tcx: &ty::ctxt<'tcx>,
is_param			    pub fn is_param(&self, space: ParamSpace, index: u32) -> bool 
is_present			    pub fn is_present(&self) -> bool 
is_refutable			fn is_refutable<A, F>(cx: &MatchCheckCtxt, pat: &Pat, refutable: F) -> Option<A> where
is_rlib			                    fn is_rlib(p: &Path) -> bool 
is_self			fn is_self<'tcx>(ty: Ty<'tcx>) -> bool 
is_self			    pub fn is_self(&self) -> bool 
is_sized			    pub fn is_sized(&self, _: &ctxt) -> bool 
is_stable			    pub fn is_stable(&self) -> bool 
is_staged_api			pub fn is_staged_api(cstore: &cstore::CStore, krate: ast::CrateNum) -> bool 
is_staged_api			fn is_staged_api(tcx: &ty::ctxt, id: DefId) -> bool 
is_static_method			pub fn is_static_method(cstore: &cstore::CStore, def: ast::DefId) -> bool 
is_static_method			pub fn is_static_method(cdata: Cmd, id: ast::NodeId) -> bool 
is_subregion_of			    pub fn is_subregion_of(&self,
is_subscope_of			    pub fn is_subscope_of(&self,
is_tuple_struct			pub fn is_tuple_struct(cx: &ctxt, did: ast::DefId) -> bool 
is_type_parameter			fn is_type_parameter<'tcx>(ty: Ty<'tcx>) -> bool 
is_type_representable			pub fn is_type_representable<'tcx>(cx: &ctxt<'tcx>, sp: Span, ty: Ty<'tcx>)
is_type_structurally_recursive			    fn is_type_structurally_recursive<'tcx>(cx: &ctxt<'tcx>, sp: Span,
is_typedef			pub fn is_typedef(cstore: &cstore::CStore, did: ast::DefId) -> bool 
is_typedef			pub fn is_typedef(cdata: Cmd, id: ast::NodeId) -> bool 
is_useful			fn is_useful(cx: &MatchCheckCtxt,
is_useful_specialized			fn is_useful_specialized(cx: &MatchCheckCtxt, &Matrix(ref m): &Matrix,
is_valid			    fn is_valid(&self) -> bool 
is_var_in_set			fn is_var_in_set(new_vars: &[ty::RegionVid], r: ty::Region) -> bool 
is_vtable_safe_method			pub fn is_vtable_safe_method<'tcx>(tcx: &ty::ctxt<'tcx>,
item_def_id			fn item_def_id(d: rbml::Doc, cdata: Cmd) -> ast::DefId 
item_family			fn item_family(item: rbml::Doc) -> Family 
item_is_mod			            fn item_is_mod(item: &Item) -> bool 
item_might_be_inlined			fn item_might_be_inlined(item: &ast::Item) -> bool 
item_name			fn item_name(intr: &IdentInterner, item: rbml::Doc) -> ast::Name 
item_name			    pub fn item_name(index: usize) -> &'static str 
item_name			    pub fn item_name(&self) -> ast::Name 
item_parent_item			fn item_parent_item(cdata: Cmd, d: rbml::Doc) -> Option<ast::DefId> 
item_path			fn item_path(item_doc: rbml::Doc) -> Vec<ast_map::PathElem> 
item_path_str			pub fn item_path_str(cx: &ctxt, id: ast::DefId) -> String 
item_require_parent_item			fn item_require_parent_item(cdata: Cmd, d: rbml::Doc) -> ast::DefId 
item_scope_tag			    fn item_scope_tag(item: &ast::Item) -> &'static str 
item_sort			fn item_sort(item: rbml::Doc) -> Option<char> 
item_symbol			fn item_symbol(item: rbml::Doc) -> String 
item_to_def_like			fn item_to_def_like(cdata: Cmd, item: rbml::Doc, did: ast::DefId) -> DefLike 
item_trait_ref			fn item_trait_ref<'tcx>(doc: rbml::Doc, tcx: &ty::ctxt<'tcx>, cdata: Cmd)
item_type			pub fn item_type<'tcx>(_item_id: ast::DefId, item: rbml::Doc,
item_variances			pub fn item_variances(tcx: &ctxt, item_id: ast::DefId) -> Rc<ItemVariances> 
item_visibility			fn item_visibility(item: rbml::Doc) -> ast::Visibility 
items			  impl items contain tag_item_impl_item elements, and classes
items			  trait items contain tag_item_trait_item elements,
items			    pub fn items<'a>(&'a self) -> Enumerate<slice::Iter<'a, Option<ast::DefId>>> 
iter			    pub fn iter<'a>(&'a self) -> Iter<'a,T> 
iter			    fn iter(&'o self) -> TraitObligationStackList<'o,'tcx> 
iter			    pub fn iter(&self) -> enum_set::Iter<BuiltinBound> 
iter			    pub fn iter(&self, kind: PathKind) -> Iter 
iter_crate_data			    pub fn iter_crate_data<I>(&self, mut i: I) where
iter_crate_data_origins			    pub fn iter_crate_data_origins<I>(&self, mut i: I) where
iter_enumerated			    pub fn iter_enumerated<'a>(&'a self) -> EnumeratedItems<'a,T> 
iterate_until_fixed_point			    fn iterate_until_fixed_point<F>(&self, tag: &str, mut body: F) where
join			    fn join(&self, a: usize, b: usize) -> usize { a & !b }
join			    fn join(&self, a: usize, b: usize) -> usize { a | b }
join			    fn join(&self, succ: usize, pred: usize) -> usize;
kind			    pub fn kind(self) -> visit::FnKind<'a> 
krate			    pub fn krate(&self) -> &'ast Crate 
krate			    pub fn krate<'ast>(&'ast self) -> &'ast Crate 
krate			pub fn krate(sess: &Session, krate: &ast::Crate, def_map: &DefMap) -> NamedRegionMap 
lang_items			    pub mod lang_items;
lattice			pub mod lattice;
leak_check			pub fn leak_check<'a,'tcx>(infcx: &InferCtxt<'a,'tcx>,
leak_check			    pub fn leak_check(&self,
len			    pub fn len(&self, space: ParamSpace) -> usize 
lev_distance			    pub mod lev_distance;
lev_distance			pub fn lev_distance(me: &str, t: &str) -> usize 
lib			pub mod lib 
liberate_late_bound_regions			pub fn liberate_late_bound_regions<'tcx, T>(
lifetimes_in_scope			fn lifetimes_in_scope(tcx: &ty::ctxt,
lift			    pub fn lift<T: ?Sized + Lift<'tcx>>(&self, value: &T) -> Option<T::Lifted> 
lift_to_tcx			    fn lift_to_tcx(&self, _: &ctxt<'tcx>) -> Option<Region> 
lift_to_tcx			    fn lift_to_tcx(&self, tcx: &ctxt<'tcx>) -> Option<&'tcx Substs<'tcx>> 
lift_to_tcx			    fn lift_to_tcx(&self, tcx: &ctxt<'tcx>) -> Option<EquatePredicate<'tcx>> 
lift_to_tcx			    fn lift_to_tcx(&self, tcx: &ctxt<'tcx>) -> Option<ProjectionPredicate<'tcx>> 
lift_to_tcx			    fn lift_to_tcx(&self, tcx: &ctxt<'tcx>) -> Option<Self::Lifted> 
lift_to_tcx			    fn lift_to_tcx(&self, tcx: &ctxt<'tcx>) -> Option<Self::Lifted>;
lift_to_tcx			    fn lift_to_tcx(&self, tcx: &ctxt<'tcx>) -> Option<TraitPredicate<'tcx>> 
lift_to_tcx			    fn lift_to_tcx(&self, tcx: &ctxt<'tcx>) -> Option<TraitRef<'tcx>> 
lift_to_tcx			    fn lift_to_tcx(&self, tcx: &ctxt<'tcx>) -> Option<Ty<'tcx>> 
limits			    fn limits(&self, space: ParamSpace) -> (usize, usize) 
link_name			pub fn link_name(attrs: &[ast::Attribute]) -> Option<InternedString> 
lint			pub mod lint;
lint			    pub fn lint(&self, lint: &'static Lint, msg: &str) 
list			    fn list(&'o self) -> TraitObligationStackList<'o,'tcx> 
list_crate_attributes			fn list_crate_attributes(md: rbml::Doc, hash: &Svh,
list_crate_deps			fn list_crate_deps(data: &[u8], out: &mut io::Write) -> io::Result<()> 
list_crate_metadata			pub fn list_crate_metadata(bytes: &[u8], out: &mut io::Write) -> io::Result<()> 
list_file_metadata			pub fn list_file_metadata(target: &Target, path: &Path,
lit_to_const			fn lit_to_const(lit: &ast::Lit, ty_hint: Option<Ty>) -> ConstVal 
live_node			    fn live_node(&self, node_id: NodeId, span: Span) -> LiveNode 
live_node_kind_to_string			fn live_node_kind_to_string(lnk: LiveNodeKind, cx: &ty::ctxt) -> String 
live_on_entry			    fn live_on_entry(&self, ln: LiveNode, var: Variable)
live_on_exit			    fn live_on_exit(&self, ln: LiveNode, var: Variable)
liveness			    pub mod liveness;
ln_str			    fn ln_str(&self, ln: LiveNode) -> String 
lnk			    fn lnk(&self, ln: LiveNode) -> LiveNodeKind 
load			pub mod load;
load_library_crate			    pub fn load_library_crate(&mut self) -> Library 
load_macros			    fn load_macros<'b>(&mut self,
load_plugin			    fn load_plugin(&mut self, span: Span, name: &str, args: Vec<P<ast::MetaItem>>) 
load_plugins			pub fn load_plugins(sess: &Session, krate: &ast::Crate,
loader			pub mod loader;
local_node_id			    pub fn local_node_id(&self) -> ast::NodeId 
local_var_name_str			pub fn local_var_name_str(cx: &ctxt, id: NodeId) -> InternedString 
lookup			fn lookup(values: &Vec<VarValue>, rid: ty::RegionVid) -> ty::Region 
lookup			pub fn lookup<'tcx>(tcx: &ty::ctxt<'tcx>, id: DefId) -> Option<&'tcx Stability> 
lookup_and_emit			    fn lookup_and_emit(&self, lint: &'static Lint, span: Option<Span>, msg: &str) 
lookup_and_handle_definition			    fn lookup_and_handle_definition(&mut self, id: &ast::NodeId) 
lookup_and_handle_method			    fn lookup_and_handle_method(&mut self, id: ast::NodeId,
lookup_const			fn lookup_const<'a>(tcx: &'a ty::ctxt, e: &Expr) -> Option<&'a Expr> 
lookup_const_by_id			pub fn lookup_const_by_id<'a, 'tcx: 'a>(tcx: &'a ty::ctxt<'tcx>,
lookup_const_fn_by_id			pub fn lookup_const_fn_by_id<'tcx>(tcx: &ty::ctxt<'tcx>, def_id: ast::DefId)
lookup_field_type			pub fn lookup_field_type<'tcx>(tcx: &ctxt<'tcx>,
lookup_field_type_unsubstituted			pub fn lookup_field_type_unsubstituted<'tcx>(tcx: &ctxt<'tcx>,
lookup_hash			fn lookup_hash<'a, F>(d: rbml::Doc<'a>, mut eq_fn: F, hash: u64) -> Option<rbml::Doc<'a>> where
lookup_item			fn lookup_item<'a>(item_id: ast::NodeId, data: &'a [u8]) -> rbml::Doc<'a> 
lookup_item_type			pub fn lookup_item_type<'tcx>(cx: &ctxt<'tcx>,
lookup_locally_or_in_crate_store			fn lookup_locally_or_in_crate_store<V, F>(descr: &str,
lookup_packed			pub fn lookup_packed(tcx: &ctxt, did: DefId) -> bool 
lookup_predicates			pub fn lookup_predicates<'tcx>(cx: &ctxt<'tcx>, did: ast::DefId)
lookup_repr_hints			pub fn lookup_repr_hints(tcx: &ctxt, did: DefId) -> Rc<Vec<attr::ReprAttr>> 
lookup_simd			pub fn lookup_simd(tcx: &ctxt, did: DefId) -> bool 
lookup_struct_fields			pub fn lookup_struct_fields(cx: &ctxt, did: ast::DefId) -> Vec<field_ty> 
lookup_super_predicates			pub fn lookup_super_predicates<'tcx>(cx: &ctxt<'tcx>, did: ast::DefId)
lookup_trait_def			pub fn lookup_trait_def<'tcx>(cx: &ctxt<'tcx>, did: ast::DefId)
lookup_uncached			fn lookup_uncached<'tcx>(tcx: &ty::ctxt<'tcx>, id: DefId) -> Option<&'tcx Stability> 
lookup_variant_by_id			fn lookup_variant_by_id<'a>(tcx: &'a ty::ctxt,
loop_query			pub fn loop_query<P>(b: &ast::Block, p: P) -> bool where P: FnMut(&ast::Expr_) -> bool 
lto			    pub fn lto(&self) -> bool 
lub			    fn lub(&mut self, mode: MatchMode) 
lub			    pub fn lub(&self) -> Lub<'a, 'tcx> 
lub			    pub fn lub(&'a self, a_is_expected: bool, trace: TypeTrace<'tcx>)
lub			pub mod lub;
lub_concrete_regions			    fn lub_concrete_regions(&self, free_regions: &FreeRegionMap, a: Region, b: Region) -> Region 
lub_free_regions			    fn lub_free_regions(&self,
lub_regions			    pub fn lub_regions(&self,
macro_import			pub mod macro_import;
macros			mod macros;
main			fn main() 
make_eqregion			    pub fn make_eqregion(&self,
make_rustpkg_lib_path			fn make_rustpkg_lib_path(sysroot: &Path,
make_subregion			    pub fn make_subregion(&self,
make_substs_for_receiver_types			pub fn make_substs_for_receiver_types<'tcx>(tcx: &ty::ctxt<'tcx>,
make_target_lib_path			fn make_target_lib_path(sysroot: &Path,
map			    pub fn map<F>(self, f: F) -> MethodProvenance where
map			    fn map<A, F>(self, a: A, op: F) -> RegionSubsts where
map			    pub fn map<U, P>(&self, pred: P) -> VecPerParamSpace<U> where P: FnMut(&T) -> U 
map			    pub fn map<M, F>(self, f: F) -> Vtable<'tcx, M> where F: FnMut(N) -> M 
map_bound			    pub fn map_bound<F,U>(self, f: F) -> Binder<U>
map_bound_ref			    pub fn map_bound_ref<F,U>(&self, f: F) -> Binder<U>
map_crate			pub fn map_crate<'ast, F: FoldOps>(forest: &'ast mut Forest, fold_ops: F) -> Map<'ast> 
map_decoded_item			pub fn map_decoded_item<'ast, F: FoldOps>(map: &Map<'ast>,
map_enumerated			    pub fn map_enumerated<U, P>(&self, pred: P) -> VecPerParamSpace<U> where
map_id			    pub fn map_id<F>(&self, mut f_id: F) -> CodeExtent where
mark_as_terminating_scope			    fn mark_as_terminating_scope(&self, scope_id: CodeExtent) 
mark_destructors_reachable			    fn mark_destructors_reachable(&mut self) 
mark_live_symbols			    fn mark_live_symbols(&mut self) 
match_			    fn match_(&mut self, id: ast::NodeId, discr: &ast::Expr,
match_fresh_trait_refs			    fn match_fresh_trait_refs(&self,
match_impl			    fn match_impl(&mut self,
match_inherent_impl			    fn match_inherent_impl(&mut self,
match_mode			    fn match_mode(&self) -> MatchMode 
match_poly_trait_ref			    fn match_poly_trait_ref(&mut self,
match_projection			    fn match_projection(&mut self,
match_projection_obligation_against_bounds_from_trait			    fn match_projection_obligation_against_bounds_from_trait(
match_self_types			    fn match_self_types(&mut self,
match_where_clause_trait_ref			    fn match_where_clause_trait_ref(&mut self,
matched_pat			    fn matched_pat(&mut self,
matched_pat			    fn matched_pat(&mut self, _: &Pat, _: cmt, _: euv::MatchMode) {}
matched_pat			    fn matched_pat(&mut self,
matched_pat			    fn matched_pat(&mut self,
matches_names			    fn matches_names(&self, parent_of_n: NodeId, name: Name) -> bool 
may_apply			    fn may_apply(&self) -> bool 
may_apply			    pub fn may_apply(&self) -> bool 
maybe_do_stability_check			fn maybe_do_stability_check(tcx: &ty::ctxt, id: ast::DefId, span: Span,
maybe_doc_type			fn maybe_doc_type<'tcx>(doc: rbml::Doc, tcx: &ty::ctxt<'tcx>, cdata: Cmd) -> Option<Ty<'tcx>> 
maybe_find_item			pub fn maybe_find_item<'a>(item_id: ast::NodeId,
maybe_get_crate_hash			pub fn maybe_get_crate_hash(data: &[u8]) -> Option<Svh> 
maybe_get_crate_name			pub fn maybe_get_crate_name(data: &[u8]) -> Option<String> 
maybe_get_item_ast			pub fn maybe_get_item_ast<'tcx>(tcx: &ty::ctxt<'tcx>, def: ast::DefId,
maybe_get_item_ast			pub fn maybe_get_item_ast<'tcx>(cdata: Cmd, tcx: &ty::ctxt<'tcx>, id: ast::NodeId,
maybe_load_library_crate			    pub fn maybe_load_library_crate(&mut self) -> Option<Library> 
maybe_print_constraints_for			pub fn maybe_print_constraints_for<'a, 'tcx>(region_vars: &RegionVarBindings<'a, 'tcx>,
maybe_report_ambiguity			pub fn maybe_report_ambiguity<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,
maybe_walk_ty			pub fn maybe_walk_ty<'tcx,F>(ty_root: Ty<'tcx>, mut f: F)
mc::Typer for ParameterEnvironment			impl<'a,'tcx> mc::Typer<'tcx> for ParameterEnvironment<'a,'tcx> 
mem_categorization			    pub mod mem_categorization;
memoized			pub fn memoized<T, U, S, F>(cache: &RefCell<HashMap<T, U, S>>, arg: T, f: F) -> U
merge_from_succ			    fn merge_from_succ(&mut self,
meta_section_name			pub fn meta_section_name(target: &Target) -> &'static str 
meta_stats			    pub fn meta_stats(&self) -> bool { self.opts.debugging_opts.meta_stats }
metadata			pub mod metadata;
method_might_be_inlined			fn method_might_be_inlined(tcx: &ty::ctxt, sig: &ast::MethodSig,
middle			pub mod middle 
misc			    pub fn misc(span: Span, body_id: ast::NodeId) -> ObligationCause<'tcx> 
misc			    pub fn misc(span: Span, body_id: ast::NodeId, trait_ref: O) -> Obligation<'tcx, O> 
missing_constructor			fn missing_constructor(cx: &MatchCheckCtxt, &Matrix(ref rows): &Matrix,
mk_bare_fn			    pub fn mk_bare_fn(&self, bare_fn: BareFnTy<'tcx>) -> &'tcx BareFnTy<'tcx> 
mk_bare_fn			pub fn mk_bare_fn<'tcx>(cx: &ctxt<'tcx>,
mk_bool			pub fn mk_bool<'tcx>(cx: &ctxt<'tcx>) -> Ty<'tcx> 
mk_closure			pub fn mk_closure<'tcx>(cx: &ctxt<'tcx>, closure_id: ast::DefId, substs: &'tcx Substs<'tcx>)
mk_ctor_fn			pub fn mk_ctor_fn<'tcx>(cx: &ctxt<'tcx>,
mk_ctxt			fn mk_ctxt() -> parse::ParseSess 
mk_enum			pub fn mk_enum<'tcx>(cx: &ctxt<'tcx>, did: ast::DefId, substs: &'tcx Substs<'tcx>) -> Ty<'tcx> 
mk_eqty			pub fn mk_eqty<'a, 'tcx>(cx: &InferCtxt<'a, 'tcx>,
mk_float_var			pub fn mk_float_var<'tcx>(cx: &ctxt<'tcx>, v: FloatVid) -> Ty<'tcx> 
mk_imm_ptr			pub fn mk_imm_ptr<'tcx>(cx: &ctxt<'tcx>, ty: Ty<'tcx>) -> Ty<'tcx> 
mk_imm_rptr			pub fn mk_imm_rptr<'tcx>(cx: &ctxt<'tcx>, r: &'tcx Region, ty: Ty<'tcx>) -> Ty<'tcx> 
mk_infer			pub fn mk_infer<'tcx>(cx: &ctxt<'tcx>, it: InferTy) -> Ty<'tcx> 
mk_int_var			pub fn mk_int_var<'tcx>(cx: &ctxt<'tcx>, v: IntVid) -> Ty<'tcx> 
mk_mach_float			pub fn mk_mach_float<'tcx>(tcx: &ctxt<'tcx>, tm: ast::FloatTy) -> Ty<'tcx> 
mk_mach_int			pub fn mk_mach_int<'tcx>(tcx: &ctxt<'tcx>, tm: ast::IntTy) -> Ty<'tcx> 
mk_mach_uint			pub fn mk_mach_uint<'tcx>(tcx: &ctxt<'tcx>, tm: ast::UintTy) -> Ty<'tcx> 
mk_mut_ptr			pub fn mk_mut_ptr<'tcx>(cx: &ctxt<'tcx>, ty: Ty<'tcx>) -> Ty<'tcx> 
mk_mut_rptr			pub fn mk_mut_rptr<'tcx>(cx: &ctxt<'tcx>, r: &'tcx Region, ty: Ty<'tcx>) -> Ty<'tcx> 
mk_nil			pub fn mk_nil<'tcx>(cx: &ctxt<'tcx>) -> Ty<'tcx> 
mk_nil_ptr			pub fn mk_nil_ptr<'tcx>(cx: &ctxt<'tcx>) -> Ty<'tcx> 
mk_param			pub fn mk_param<'tcx>(cx: &ctxt<'tcx>,
mk_param_from_def			pub fn mk_param_from_def<'tcx>(cx: &ctxt<'tcx>, def: &TypeParameterDef) -> Ty<'tcx> 
mk_projection			pub fn mk_projection<'tcx>(cx: &ctxt<'tcx>,
mk_ptr			pub fn mk_ptr<'tcx>(cx: &ctxt<'tcx>, tm: mt<'tcx>) -> Ty<'tcx> { mk_t(cx, TyRawPtr(tm)) }
mk_region			    pub fn mk_region(&self, region: Region) -> &'tcx Region 
mk_rptr			pub fn mk_rptr<'tcx>(cx: &ctxt<'tcx>, r: &'tcx Region, tm: mt<'tcx>) -> Ty<'tcx> 
mk_self_type			pub fn mk_self_type<'tcx>(cx: &ctxt<'tcx>) -> Ty<'tcx> 
mk_slice			pub fn mk_slice<'tcx>(cx: &ctxt<'tcx>, r: &'tcx Region, tm: mt<'tcx>) -> Ty<'tcx> 
mk_str			pub fn mk_str<'tcx>(cx: &ctxt<'tcx>) -> Ty<'tcx> 
mk_str_slice			pub fn mk_str_slice<'tcx>(cx: &ctxt<'tcx>, r: &'tcx Region, m: ast::Mutability) -> Ty<'tcx> 
mk_struct			pub fn mk_struct<'tcx>(cx: &ctxt<'tcx>, struct_id: ast::DefId,
mk_sub_poly_trait_refs			pub fn mk_sub_poly_trait_refs<'a, 'tcx>(cx: &InferCtxt<'a, 'tcx>,
mk_subr			pub fn mk_subr<'a, 'tcx>(cx: &InferCtxt<'a, 'tcx>,
mk_substs			    pub fn mk_substs(&self, substs: Substs<'tcx>) -> &'tcx Substs<'tcx> 
mk_subty			pub fn mk_subty<'a, 'tcx>(cx: &InferCtxt<'a, 'tcx>,
mk_t			pub fn mk_t<'tcx>(cx: &ctxt<'tcx>, st: TypeVariants<'tcx>) -> Ty<'tcx> 
mk_trait			pub fn mk_trait<'tcx>(cx: &ctxt<'tcx>,
mk_tup			pub fn mk_tup<'tcx>(cx: &ctxt<'tcx>, ts: Vec<Ty<'tcx>>) -> Ty<'tcx> 
mk_uniq			pub fn mk_uniq<'tcx>(cx: &ctxt<'tcx>, ty: Ty<'tcx>) -> Ty<'tcx> { mk_t(cx, TyBox(ty)) }
mk_var			pub fn mk_var<'tcx>(cx: &ctxt<'tcx>, v: TyVid) -> Ty<'tcx> 
mk_vec			pub fn mk_vec<'tcx>(cx: &ctxt<'tcx>, ty: Ty<'tcx>, sz: Option<usize>) -> Ty<'tcx> 
msg			    fn msg(&self) -> &'static str 
mt			pub struct mt<'tcx> 
multi			    pub fn   multi(a: S, b: S, c: S, d: S) -> R { stable(getopts::optmulti(a, b, c, d)) }
multi_u			    pub fn   multi_u(a: S, b: S, c: S, d: S) -> R { unstable(getopts::optmulti(a, b, c, d)) }
mut_bits_to_string			fn mut_bits_to_string(words: &mut [usize]) -> String 
mut_regions			    pub fn mut_regions<'a>(&'a mut self) -> &'a mut VecPerParamSpace<ty::Region> 
mutate			    fn mutate(&mut self,
mutate			    fn mutate(&mut self, _: NodeId, span: Span, _: cmt, mode: MutateMode) 
mutate			    fn mutate(&mut self,
mutate			    fn mutate(&mut self,
mutate_expr			    fn mutate_expr(&mut self,
my_visit_expr			fn my_visit_expr(_e: &ast::Expr) { }
my_visit_foreign_item			fn my_visit_foreign_item(ni: &ast::ForeignItem,
my_visit_item			fn my_visit_item(i: &ast::Item,
name			    fn name(&self) -> Name;
name			    pub fn name(&self) -> Name 
name			    pub fn name(&self) -> String { decoder::get_crate_name(self.data()) }
name			    pub fn name(&self) -> ast::Name 
name_lower			    pub fn name_lower(&self) -> String 
name_of			    fn name_of(&self, st: &str) -> ast::Name 
name_of			    fn name_of(&self, st: &str) -> ast::Name;
named_element_ty			pub fn named_element_ty<'tcx>(cx: &ctxt<'tcx>,
ne			    fn ne(&self, other: &InferRegion) -> bool 
nearest_common_ancestor			    pub fn nearest_common_ancestor(&self,
necessary_variants			pub fn necessary_variants(dm: &DefMap, pat: &ast::Pat) -> Vec<ast::NodeId> 
needs_drop			    pub fn needs_drop(&self, _: &ctxt) -> bool 
nested_obligations			    pub fn nested_obligations(self) -> Vec<N> 
new			    fn new(d: &'a FnDecl, b: &'a Block, id: NodeId, s: Span) -> ClosureParts<'a> 
new			    pub fn new(krate: Crate) -> Forest 
new			    fn new(tcx: &'a ty::ctxt<'tcx>,
new			    pub fn new() -> LintStore 
new			    pub fn new(sess: &'a Session) -> CrateReader<'a> 
new			    pub fn new(intr: Rc<IdentInterner>) -> CStore 
new			    pub fn new(sysroot: &'a Path,
new			    fn new(ar: ArchiveRO) -> Option<ArchiveMetadata> 
new			    fn new(sess: &'a Session) -> MacroLoader<'a> 
new			    pub fn new(tcx: &ty::ctxt,
new			    pub fn new<'b>(tcx: &'b ty::ctxt<'tcx>,
new			    fn new(v: &CheckCrateVisitor<'a, 'ast>, span: &'a Span)
new			    pub fn new(tcx: &'a ty::ctxt<'tcx>,
new			    fn new(tcx: &'a ty::ctxt<'tcx>,
new			    pub fn new(base_def: Def,
new			    pub fn new(delegate: &'d mut Delegate<'tcx>,
new			    pub fn new() -> FreeRegionMap 
new			    pub fn new(fields: CombineFields<'a, 'tcx>) -> Bivariate<'a, 'tcx> 
new			    pub fn new(fields: CombineFields<'a, 'tcx>) -> Equate<'a, 'tcx> 
new			            fn new(sub_fr: ty::FreeRegion,
new			    fn new(tcx: &'a ty::ctxt<'tcx>,
new			    pub fn new(infcx: &'a InferCtxt<'a, 'tcx>) -> TypeFreshener<'a, 'tcx> 
new			    pub fn new(fields: CombineFields<'a, 'tcx>) -> Glb<'a, 'tcx> 
new			    pub fn new(fields: CombineFields<'a, 'tcx>) -> Lub<'a, 'tcx> 
new			    fn new(tcx: &'a ty::ctxt<'tcx>,
new			    pub fn new(tcx: &'a ty::ctxt<'tcx>) -> RegionVarBindings<'a, 'tcx> 
new			    pub fn new(infcx: &'a InferCtxt<'a, 'tcx>) -> OpportunisticTypeResolver<'a, 'tcx> 
new			    pub fn new(f: CombineFields<'a, 'tcx>) -> Sub<'a, 'tcx> 
new			    pub fn new() -> TypeVariableTable<'tcx> 
new			    pub fn new() -> LanguageItems 
new			    pub fn new(session: &'a Session) -> LanguageItemCollector<'a> 
new			    fn new(ir: &'a mut IrMaps<'a, 'tcx>, specials: Specials) -> Liveness<'a, 'tcx> 
new			    fn new(tcx: &'a ty::ctxt<'tcx>) -> IrMaps<'a, 'tcx> 
new			    pub fn new(typer: &'t TYPER) -> MemCategorizationContext<'t,TYPER> 
new			    fn new(tcx: &'a ty::ctxt<'tcx>) -> ReachableContext<'a, 'tcx> 
new			    pub fn new(node_id: ast::NodeId) -> DestructionScopeData 
new			    pub fn new(krate: &Crate) -> Index 
new			    fn new(v: &'a VecPerParamSpace<T>) -> EnumeratedItems<'a,T> 
new			    pub fn new(t: Vec<T>, s: Vec<T>, f: Vec<T>) -> VecPerParamSpace<T> 
new			    pub fn new(t: VecPerParamSpace<Ty<'tcx>>,
new			    pub fn new() -> FulfilledPredicates<'tcx> 
new			    pub fn new(errors_will_be_reported: bool) -> FulfillmentContext<'tcx> 
new			    fn new(obligation: PredicateObligation<'tcx>,
new			    pub fn new(cause: ObligationCause<'tcx>,
new			    pub fn new(span: Span,
new			    fn new(selcx: &'a mut SelectionContext<'b,'tcx>,
new			    pub fn new() -> SelectionCache<'tcx> 
new			    pub fn new(infcx: &'cx InferCtxt<'cx, 'tcx>,
new			    fn new(base: I) -> FilterToTraits<I> 
new			    fn new(tcx: &'a ty::ctxt<'tcx>) -> PredicateSet<'a,'tcx> 
new			    fn new() -> FlagComputation 
new			    fn new(arena: &'tcx TypedArena<TyS<'tcx>>,
new			    pub fn new() -> CtxtArenas<'tcx> 
new			    pub fn new(def_id: ast::DefId, substs: &'tcx Substs<'tcx>) -> TraitRef<'tcx> 
new			    pub fn new(depth: u32) -> DebruijnIndex 
new			    pub fn new(name: ast::Name,
new			    pub fn new(space: subst::ParamSpace,
new			    fn new<F>(tcx: &'a ty::ctxt<'tcx>, fld_r: &'a mut F) -> RegionReplacer<'a, 'tcx>
new			    pub fn new<F>(tcx: &'a ty::ctxt<'tcx>, fld_r: &'a mut F) -> RegionFolder<'a, 'tcx>
new			    pub fn new(tcx: &'a ty::ctxt<'tcx>) -> Match<'a, 'tcx> 
new			    pub fn new(ty: Ty<'tcx>) -> TypeWalker<'tcx> 
new			    fn new(sess: &'a Session) -> PluginLoader<'a> 
new			    pub fn new(sess: &'a Session, krate: &ast::Crate) -> Registry<'a> 
new			    pub fn new() -> SearchPaths 
new_bound			    pub fn new_bound(&self, debruijn: ty::DebruijnIndex) -> Region 
new_def_id			    fn new_def_id(&self, def_id: DefId) -> DefId 
new_def_id			    fn new_def_id(&self, def_id: ast::DefId) -> ast::DefId 
new_id			    fn new_id(&mut self, id: NodeId) -> NodeId 
new_id			    fn new_id(&self, id: NodeId) -> NodeId 
new_id			    fn new_id(&self, id: ast::NodeId) -> ast::NodeId 
new_infer_ctxt			pub fn new_infer_ctxt<'a, 'tcx>(tcx: &'a ty::ctxt<'tcx>)
new_int_alist			        fn new_int_alist<B>() -> alist<isize, B> 
new_internal			    fn new_internal(content: Vec<T>, type_limit: usize, self_limit: usize)
new_region_var			    pub fn new_region_var(&self, origin: RegionVariableOrigin) -> RegionVid 
new_skolemized			    pub fn new_skolemized(&self, br: ty::BoundRegion, snapshot: &RegionSnapshot) -> Region 
new_span			    fn new_span(&mut self, span: Span) -> Span 
new_span			    fn new_span(&self, span: Span) -> Span 
new_span			    fn new_span(&self, span: Span) -> Span 
new_trait			    pub fn new_trait(t: Vec<Ty<'tcx>>,
new_type			    pub fn new_type(t: Vec<Ty<'tcx>>,
new_var			    pub fn new_var(&mut self, diverging: bool) -> ty::TyVid 
next			    fn next(&mut self) -> Option<NodeId> 
next			    fn next(&mut self) -> Option<PathElem> 
next			fn next(st: &mut PState) -> char 
next			    fn next(&mut self) -> Option<(ParamSpace, usize, &'a T)> 
next			    fn next(&mut self) -> Option<&'o TraitObligationStack<'o,'tcx>> 
next			    fn next(&mut self) -> Option<ast::DefId> 
next			    fn next(&mut self) -> Option<ty::PolyTraitRef<'tcx>> 
next			    fn next(&mut self) -> Option<ty::Predicate<'tcx>> 
next			    fn next(&mut self) -> Option<Ty<'tcx>> 
next			    fn next(&mut self) -> Option<(&'a Path, PathKind)> 
next_byte			fn next_byte(st: &mut PState) -> u8 
next_crate_num			    pub fn next_crate_num(&self) -> ast::CrateNum 
next_diverging_ty_var			    pub fn next_diverging_ty_var(&self) -> Ty<'tcx> 
next_float_var_id			    pub fn next_float_var_id(&self) -> FloatVid 
next_int_var_id			    pub fn next_int_var_id(&self) -> IntVid 
next_node_id			    pub fn next_node_id(&self) -> ast::NodeId 
next_region_var			    pub fn next_region_var(&self, origin: RegionVariableOrigin) -> ty::Region 
next_ty_var			    pub fn next_ty_var(&self) -> Ty<'tcx> 
next_ty_var_id			    pub fn next_ty_var_id(&self, diverging: bool) -> TyVid 
next_ty_vars			    pub fn next_ty_vars(&self, n: usize) -> Vec<Ty<'tcx>> 
no_landing_pads			    pub fn no_landing_pads(&self) -> bool 
no_late_bound_regions			pub fn no_late_bound_regions<'tcx, T>(
no_verify			    pub fn no_verify(&self) -> bool { self.opts.debugging_opts.no_verify }
node_id			    fn node_id(&'a self, &(i,_): &Node<'a>) -> dot::Id<'a> 
node_id			    fn node_id(&self, n: &Node) -> dot::Id 
node_id			    pub fn node_id(&self) -> ast::NodeId 
node_id_item_substs			pub fn node_id_item_substs<'tcx>(cx: &ctxt<'tcx>, id: ast::NodeId) -> ItemSubsts<'tcx> 
node_id_to_string			fn node_id_to_string(map: &Map, id: NodeId, include_id: bool) -> String 
node_id_to_type			pub fn node_id_to_type<'tcx>(cx: &ctxt<'tcx>, id: ast::NodeId) -> Ty<'tcx> 
node_id_to_type_opt			pub fn node_id_to_type_opt<'tcx>(cx: &ctxt<'tcx>, id: ast::NodeId) -> Option<Ty<'tcx>> 
node_is_reachable			    pub fn node_is_reachable(&self, id: ast::NodeId) -> bool 
node_label			    fn node_label(&'a self, &(i, n): &Node<'a>) -> dot::LabelText<'a> 
node_label			    fn node_label(&self, n: &Node) -> dot::LabelText 
node_method_origin			    fn node_method_origin(&self, method_call: ty::MethodCall)
node_method_origin			    fn node_method_origin(&self, method_call: ty::MethodCall)
node_method_ty			    fn node_method_ty(&self, method_call: ty::MethodCall) -> Option<Ty<'tcx>>;
node_method_ty			    fn node_method_ty(&self, method_call: ty::MethodCall) -> Option<Ty<'tcx>> 
node_to_string			    pub fn node_to_string(&self, id: NodeId) -> String 
node_to_user_string			    pub fn node_to_user_string(&self, id: NodeId) -> String 
node_ty			    fn node_ty(&self, id: ast::NodeId) -> McResult<Ty<'tcx>> 
node_ty			    fn node_ty(&self, id: ast::NodeId) -> McResult<Ty<'tcx>>;
node_ty			    fn node_ty(&self, id: ast::NodeId) -> mc::McResult<Ty<'tcx>> 
node_type_insert			    pub fn node_type_insert(&self, id: NodeId, ty: Ty<'tcx>) 
node_types			    pub fn node_types(&self) -> Ref<NodeMap<Ty<'tcx>>> { self.node_types.borrow() }
nodemap			    pub mod nodemap;
nodes			    fn nodes(&'a self) -> dot::Nodes<'a, Node<'a>> { self.cfg.nodes() }
nodes			    fn nodes(&'a self) -> dot::Nodes<'a, Node<'a>> 
nodes			    fn nodes(&self) -> dot::Nodes<Node> 
nodes_matching_suffix			    pub fn nodes_matching_suffix<'a>(&'a self, parts: &'a [String])
nominal			        fn nominal<'cx, 'tcx>(bound: ty::BuiltinBound,
normalize			fn normalize(values: &Vec<VarValue>, r: ty::Region) -> ty::Region 
normalize			pub fn normalize<'a,'b,'tcx,T>(selcx: &'a mut SelectionContext<'b,'tcx>,
normalize_param_env_or_error			pub fn normalize_param_env_or_error<'a,'tcx>(unnormalized_env: ty::ParameterEnvironment<'a,'tcx>,
normalize_projection_type			    pub fn normalize_projection_type<'a>(&mut self,
normalize_projection_type			pub fn normalize_projection_type<'a,'b,'tcx>(
normalize_to_error			fn normalize_to_error<'a,'tcx>(selcx: &mut SelectionContext<'a,'tcx>,
normalize_with_depth			pub fn normalize_with_depth<'a,'b,'tcx,T>(selcx: &'a mut SelectionContext<'b,'tcx>,
note			    pub fn note(&self, msg: &str) 
note_and_explain_region			pub fn note_and_explain_region(tcx: &ty::ctxt,
note_and_explain_type_err			pub fn note_and_explain_type_err<'tcx>(cx: &ctxt<'tcx>, err: &type_err<'tcx>, sp: Span) 
note_crate_name			pub fn note_crate_name(diag: &SpanHandler, name: &str) 
note_obligation_cause			fn note_obligation_cause<'a, 'tcx, T>(infcx: &InferCtxt<'a, 'tcx>,
note_obligation_cause_code			fn note_obligation_cause_code<'a, 'tcx, T>(infcx: &InferCtxt<'a, 'tcx>,
note_region_origin			    fn note_region_origin(&self, origin: &SubregionOrigin<'tcx>) 
note_region_origin			    fn note_region_origin(&self,
num			    pub mod num;
num_to_string			        fn num_to_string(counter: usize) -> String 
num_vars			    pub fn num_vars(&self) -> u32 
object_contents			    fn object_contents(bounds: &ExistentialBounds) -> TypeContents 
object_region_bounds			pub fn object_region_bounds<'tcx>(
object_safety			mod object_safety;
object_safety			    pub fn object_safety(&self) -> Option<bool> 
object_safety_violation_for_method			fn object_safety_violation_for_method<'tcx>(tcx: &ty::ctxt<'tcx>,
object_safety_violations			pub fn object_safety_violations<'tcx>(tcx: &ty::ctxt<'tcx>,
object_safety_violations_for_trait			fn object_safety_violations_for_trait<'tcx>(tcx: &ty::ctxt<'tcx>,
of			    pub fn of(lint: &'static Lint) -> LintId 
offset_cur_anon			    fn offset_cur_anon(&self) 
ok_if			        fn ok_if<'tcx>(v: Vec<Ty<'tcx>>)
opposite			    fn opposite(self) -> RelationDir 
ops::BitAnd for TypeContents			impl ops::BitAnd for TypeContents 
ops::BitOr for TypeContents			impl ops::BitOr for TypeContents 
ops::Deref for BuiltinBounds			impl ops::Deref for BuiltinBounds 
ops::DerefMut for BuiltinBounds			impl ops::DerefMut for BuiltinBounds 
ops::Sub for TypeContents			impl ops::Sub for TypeContents 
opt			    pub fn     opt(a: S, b: S, c: S, d: S) -> R { stable(getopts::optopt(a, b, c, d)) }
opt			mod opt 
opt_child			    fn opt_child(&self, tag: c::astencode_tag) -> Option<Self>;
opt_child			    fn opt_child(&self, tag: c::astencode_tag) -> Option<rbml::Doc<'a>> 
opt_encl_scope			    pub fn opt_encl_scope(&self, id: CodeExtent) -> Option<CodeExtent> 
opt_expr			    fn opt_expr(&mut self,
opt_get			    pub fn opt_get<'a>(&'a self,
opt_normalize_projection_type			fn opt_normalize_projection_type<'a,'b,'tcx>(
opt_span			    pub fn opt_span(&self, id: NodeId) -> Option<Span> 
opt_span_bug			    pub fn opt_span_bug(&self, opt_sp: Option<Span>, msg: &str) -> ! 
opt_span_warn			    pub fn opt_span_warn(&self, opt_sp: Option<Span>, msg: &str) 
opt_u			    pub fn     opt_u(a: S, b: S, c: S, d: S) -> R { unstable(getopts::optopt(a, b, c, d)) }
optgroups			pub fn optgroups() -> Vec<getopts::OptGroup> 
or			    pub fn or(self, other: LastPrivate) -> LastPrivate 
original_label			fn original_label(span: Span) -> Original 
original_lifetime			fn original_lifetime(l: &ast::Lifetime) -> Original 
orphan_check			pub fn orphan_check<'tcx>(tcx: &ty::ctxt<'tcx>,
orphan_check_trait_ref			fn orphan_check_trait_ref<'tcx>(tcx: &ty::ctxt<'tcx>,
output			    pub fn output(&self) -> ty::Binder<FnOutput<'tcx>> 
overlap			fn overlap(selcx: &mut SelectionContext,
overlapping_impls			pub fn overlapping_impls(infcx: &InferCtxt,
overloaded_method_return_ty			    fn overloaded_method_return_ty(&self,
owned_pointer			    pub fn owned_pointer(&self) -> TypeContents 
owns_owned			    pub fn owns_owned(&self) -> bool 
param_env			    pub fn param_env(&self) -> &'cx ty::ParameterEnvironment<'cx, 'tcx> 
param_env			    fn param_env<'a>(&'a self) -> &'a ty::ParameterEnvironment<'a, 'tcx>;
param_env			    fn param_env<'b>(&'b self) -> &'b ty::ParameterEnvironment<'b,'tcx> 
parameterized			fn parameterized<GG>(f: &mut fmt::Formatter,
params_from_type			    pub fn params_from_type(types: Vec<T>) -> VecPerParamSpace<T> 
parent			    fn parent(self) -> Option<NodeId> 
parse_abi_set			fn parse_abi_set(st: &mut PState) -> abi::Abi 
parse_associated_type_names			fn parse_associated_type_names(item_doc: rbml::Doc) -> Vec<ast::Name> 
parse_bare_fn_ty			fn parse_bare_fn_ty<'a, 'tcx, F>(st: &mut PState<'a, 'tcx>,
parse_bare_fn_ty_			fn parse_bare_fn_ty_<'a, 'tcx, F>(st: &mut PState<'a, 'tcx>,
parse_bare_fn_ty_data			pub fn parse_bare_fn_ty_data<'tcx, F>(data: &[u8], crate_num: ast::CrateNum, pos: usize,
parse_bool			        fn parse_bool(slot: &mut bool, v: Option<&str>) -> bool 
parse_bound_region_			fn parse_bound_region_<F>(st: &mut PState, conv: &mut F) -> ty::BoundRegion where
parse_builtin_bounds			fn parse_builtin_bounds<F>(st: &mut PState, mut _conv: F) -> ty::BuiltinBounds where
parse_builtin_bounds_			fn parse_builtin_bounds_<F>(st: &mut PState, _conv: &mut F) -> ty::BuiltinBounds where
parse_builtin_bounds_data			pub fn parse_builtin_bounds_data<F>(data: &[u8], crate_num: ast::CrateNum,
parse_cfgspecs			pub fn parse_cfgspecs(cfgspecs: Vec<String> ) -> ast::CrateConfig 
parse_closure_ty			fn parse_closure_ty<'a, 'tcx, F>(st: &mut PState<'a, 'tcx>,
parse_closure_ty_			fn parse_closure_ty_<'a, 'tcx, F>(st: &mut PState<'a, 'tcx>,
parse_crate_types_from_list			pub fn parse_crate_types_from_list(list_list: Vec<String>) -> Result<Vec<CrateType>, String> 
parse_def_			fn parse_def_<F>(st: &mut PState, source: DefIdSource, conv: &mut F) -> ast::DefId where
parse_def_id			pub fn parse_def_id(buf: &[u8]) -> ast::DefId 
parse_destruction_scope_data			fn parse_destruction_scope_data(st: &mut PState) -> region::DestructionScopeData 
parse_existential_bounds			fn parse_existential_bounds<'a,'tcx, F>(st: &mut PState<'a,'tcx>,
parse_existential_bounds_			fn parse_existential_bounds_<'a,'tcx, F>(st: &mut PState<'a,'tcx>,
parse_existential_bounds_data			pub fn parse_existential_bounds_data<'tcx, F>(data: &[u8], crate_num: ast::CrateNum,
parse_hex			fn parse_hex(st: &mut PState) -> usize 
parse_list			        fn parse_list(slot: &mut Vec<String>, v: Option<&str>)
parse_mt_			fn parse_mt_<'a, 'tcx, F>(st: &mut PState<'a, 'tcx>, conv: &mut F) -> ty::mt<'tcx> where
parse_mutability			fn parse_mutability(st: &mut PState) -> ast::Mutability 
parse_name			pub fn parse_name(st: &mut PState, last: char) -> ast::Name 
parse_name_			fn parse_name_<F>(st: &mut PState, is_last: F) -> ast::Name where
parse_object_lifetime_default			fn parse_object_lifetime_default<'a,'tcx, F>(st: &mut PState<'a,'tcx>,
parse_opt			fn parse_opt<'a, 'tcx, T, F>(st: &mut PState<'a, 'tcx>, f: F) -> Option<T> where
parse_opt_bool			        fn parse_opt_bool(slot: &mut Option<bool>, v: Option<&str>) -> bool 
parse_opt_list			        fn parse_opt_list(slot: &mut Option<Vec<String>>, v: Option<&str>)
parse_opt_string			        fn parse_opt_string(slot: &mut Option<String>, v: Option<&str>) -> bool 
parse_opt_uint			        fn parse_opt_uint(slot: &mut Option<usize>, v: Option<&str>) -> bool 
parse_param_space			fn parse_param_space(st: &mut PState) -> subst::ParamSpace 
parse_paren_sugar			fn parse_paren_sugar(item_doc: rbml::Doc) -> bool 
parse_passes			        fn parse_passes(slot: &mut Passes, v: Option<&str>) -> bool 
parse_polarity			fn parse_polarity(item_doc: rbml::Doc) -> ast::ImplPolarity 
parse_predicate			pub fn parse_predicate<'a,'tcx, F>(st: &mut PState<'a, 'tcx>,
parse_predicate_			fn parse_predicate_<'a,'tcx, F>(st: &mut PState<'a, 'tcx>,
parse_predicate_data			pub fn parse_predicate_data<'tcx, F>(data: &[u8],
parse_projection_predicate_			fn parse_projection_predicate_<'a,'tcx, F>(
parse_region			fn parse_region<F>(st: &mut PState, mut conv: F) -> ty::Region where
parse_region_			fn parse_region_<F>(st: &mut PState, conv: &mut F) -> ty::Region where
parse_region_data			pub fn parse_region_data<F>(data: &[u8], crate_num: ast::CrateNum, pos: usize, tcx: &ty::ctxt,
parse_region_substs_			fn parse_region_substs_<F>(st: &mut PState, conv: &mut F) -> subst::RegionSubsts where
parse_scope			fn parse_scope(st: &mut PState) -> region::CodeExtent 
parse_sess			    fn parse_sess(&self) -> &parse::ParseSess { self }
parse_sess			    fn parse_sess(&self) -> &parse::ParseSess;
parse_sig_			fn parse_sig_<'a, 'tcx, F>(st: &mut PState<'a, 'tcx>, conv: &mut F) -> ty::PolyFnSig<'tcx> where
parse_size			fn parse_size(st: &mut PState) -> Option<usize> 
parse_state_from_data			pub fn parse_state_from_data<'a, 'tcx>(data: &'a [u8], crate_num: ast::CrateNum,
parse_str			fn parse_str(st: &mut PState, term: char) -> String 
parse_string			        fn parse_string(slot: &mut String, v: Option<&str>) -> bool 
parse_substs			fn parse_substs<'a, 'tcx, F>(st: &mut PState<'a, 'tcx>,
parse_substs_			fn parse_substs_<'a, 'tcx, F>(st: &mut PState<'a, 'tcx>,
parse_substs_data			pub fn parse_substs_data<'tcx, F>(data: &[u8], crate_num: ast::CrateNum, pos: usize,
parse_trait_ref			fn parse_trait_ref<'a, 'tcx, F>(st: &mut PState<'a, 'tcx>, mut conv: F)
parse_trait_ref_			fn parse_trait_ref_<'a, 'tcx, F>(st: &mut PState<'a, 'tcx>, conv: &mut F)
parse_trait_ref_data			pub fn parse_trait_ref_data<'tcx, F>(data: &[u8], crate_num: ast::CrateNum, pos: usize,
parse_ty			fn parse_ty<'a, 'tcx, F>(st: &mut PState<'a, 'tcx>, mut conv: F) -> Ty<'tcx> where
parse_ty_			fn parse_ty_<'a, 'tcx, F>(st: &mut PState<'a, 'tcx>, conv: &mut F) -> Ty<'tcx> where
parse_ty_closure_data			pub fn parse_ty_closure_data<'tcx, F>(data: &[u8],
parse_ty_data			pub fn parse_ty_data<'tcx, F>(data: &[u8], crate_num: ast::CrateNum, pos: usize,
parse_type_param_def			fn parse_type_param_def<'a, 'tcx, F>(st: &mut PState<'a, 'tcx>, mut conv: F)
parse_type_param_def_			fn parse_type_param_def_<'a, 'tcx, F>(st: &mut PState<'a, 'tcx>, conv: &mut F)
parse_type_param_def_data			pub fn parse_type_param_def_data<'tcx, F>(data: &[u8], start: usize,
parse_u32			fn parse_u32(st: &mut PState) -> u32 
parse_uint			fn parse_uint(st: &mut PState) -> usize 
parse_uint			        fn parse_uint(slot: &mut usize, v: Option<&str>) -> bool 
parse_unsafety			fn parse_unsafety(item_doc: rbml::Doc) -> ast::Unsafety 
parse_unsafety			fn parse_unsafety(c: char) -> ast::Unsafety 
parse_vec_per_param_space			fn parse_vec_per_param_space<'a, 'tcx, T, F>(st: &mut PState<'a, 'tcx>,
pat			    fn pat(&mut self, pat: &ast::Pat, pred: CFGIndex) -> CFGIndex 
pat_bindings			    fn pat_bindings<F>(&mut self, pat: &ast::Pat, mut f: F) where
pat_bindings			pub fn pat_bindings<I>(dm: &DefMap, pat: &ast::Pat, mut it: I) where
pat_constructors			fn pat_constructors(cx: &MatchCheckCtxt, p: &Pat,
pat_contains_bindings			pub fn pat_contains_bindings(dm: &DefMap, pat: &ast::Pat) -> bool 
pat_contains_bindings_or_wild			pub fn pat_contains_bindings_or_wild(dm: &DefMap, pat: &ast::Pat) -> bool 
pat_contains_ref_binding			pub fn pat_contains_ref_binding(dm: &DefMap, pat: &ast::Pat) -> Option<ast::Mutability> 
pat_contains_ref_binding			    pub fn pat_contains_ref_binding(&self, pat: &ast::Pat) -> Option<ast::Mutability> 
pat_id_map			pub fn pat_id_map(dm: &DefMap, pat: &ast::Pat) -> PatIdMap 
pat_is_binding			pub fn pat_is_binding(dm: &DefMap, pat: &ast::Pat) -> bool 
pat_is_binding_or_wild			pub fn pat_is_binding_or_wild(dm: &DefMap, pat: &ast::Pat) -> bool 
pat_is_const			pub fn pat_is_const(dm: &DefMap, pat: &ast::Pat) -> bool 
pat_is_refutable			pub fn pat_is_refutable(dm: &DefMap, pat: &ast::Pat) -> bool 
pat_is_resolved_const			pub fn pat_is_resolved_const(dm: &DefMap, pat: &ast::Pat) -> bool 
pat_is_variant_or_struct			pub fn pat_is_variant_or_struct(dm: &DefMap, pat: &ast::Pat) -> bool 
pat_ty			    fn pat_ty(&self, pat: &ast::Pat) -> McResult<Ty<'tcx>> 
pat_ty			pub fn pat_ty<'tcx>(cx: &ctxt<'tcx>, pat: &ast::Pat) -> Ty<'tcx> 
pat_ty_opt			pub fn pat_ty_opt<'tcx>(cx: &ctxt<'tcx>, pat: &ast::Pat) -> Option<Ty<'tcx>> 
pat_util			    pub mod pat_util;
path			    pub fn path(&self, flavor: OutputType) -> PathBuf 
path2cstr			pub fn path2cstr(p: &Path) -> CString 
path_to_str_with_ident			    fn path_to_str_with_ident(&self, id: NodeId, i: Ident) -> String 
path_to_string			    pub fn path_to_string(&self, id: NodeId) -> String 
path_to_string			pub fn path_to_string<PI: Iterator<Item=PathElem>>(path: PI) -> String 
paths			    fn paths(&self) -> Vec<PathBuf> 
pats_all			    fn pats_all<'b, I: Iterator<Item=&'b P<ast::Pat>>>(&mut self,
peek			fn peek(st: &PState) -> char 
pending_obligations			    pub fn pending_obligations(&self) -> &[PredicateObligation<'tcx>] 
pick_candidate_cache			    fn pick_candidate_cache(&self) -> &SelectionCache<'tcx> 
pick_lifetime			    fn pick_lifetime(&self,
plug_leaks			pub fn plug_leaks<'a,'tcx,T>(infcx: &InferCtxt<'a,'tcx>,
plug_leaks			    pub fn plug_leaks<T>(&self,
plugin			pub mod plugin;
poly_project_and_unify_type			pub fn poly_project_and_unify_type<'cx,'tcx>(
pop			    pub fn pop(&mut self, space: ParamSpace) -> Option<T> 
populate_implementations_for_primitive_if_necessary			pub fn populate_implementations_for_primitive_if_necessary(tcx: &ctxt,
populate_implementations_for_trait_if_necessary			pub fn populate_implementations_for_trait_if_necessary(tcx: &ctxt, trait_id: ast::DefId) 
populate_inherent_implementations_for_type_if_necessary			pub fn populate_inherent_implementations_for_type_if_necessary(tcx: &ctxt,
positional_element_ty			pub fn positional_element_ty<'tcx>(cx: &ctxt<'tcx>,
ppaux			    pub mod ppaux;
pprust::PpAnn for DataFlowContext			impl<'a, 'tcx, O:DataFlowOperator> pprust::PpAnn for DataFlowContext<'a, 'tcx, O> 
pre			    fn pre(&self,
predicate_for_builtin_bound			pub fn predicate_for_builtin_bound<'tcx>(
predicate_for_trait_def			pub fn predicate_for_trait_def<'tcx>(
predicate_for_trait_ref			pub fn predicate_for_trait_ref<'tcx>(
predicates_for_generics			pub fn predicates_for_generics<'tcx>(cause: ObligationCause<'tcx>,
predicates_for_generics			pub fn predicates_for_generics<'tcx>(cause: ObligationCause<'tcx>,
pretty_print_to			    fn pretty_print_to<'b>(&self, wr: Box<io::Write + 'b>,
prim_ty_to_ty			pub fn prim_ty_to_ty<'tcx>(tcx: &ty::ctxt<'tcx>,
primary_libdir_name			    fn primary_libdir_name() -> String 
principal_def_id			    pub fn principal_def_id(&self) -> ast::DefId 
principal_trait_ref_with_self_ty			    pub fn principal_trait_ref_with_self_ty(&self,
print_debug_stats			    pub fn print_debug_stats(&self) 
print_enum_sizes			    pub fn print_enum_sizes(&self) -> bool 
print_help_message			fn print_help_message() 
print_llvm_passes			    pub fn print_llvm_passes(&self) -> bool 
print_node			    fn print_node(&mut self, node: &Node) -> io::Result<()> 
print_node			    fn print_node(&mut self, node: &Node) -> io::Result<()>;
privacy			    pub mod privacy;
probe			    pub fn probe<R, F>(&self, f: F) -> R where
probe			    pub fn probe(&self, vid: ty::TyVid) -> Option<Ty<'tcx>> 
process_command_line			    pub fn process_command_line(&mut self, sess: &Session) 
process_crate			    fn process_crate(&self, c: &ast::Crate) 
process_edges			        fn process_edges<'a, 'tcx>(this: &RegionVarBindings<'a, 'tcx>,
process_errors			    fn process_errors(&self, errors: &Vec<RegionResolutionError<'tcx>>)
process_item			    fn process_item(&mut self, i: &ast::Item) 
process_predicate			fn process_predicate<'a,'tcx>(selcx: &mut SelectionContext<'a,'tcx>,
project			mod project;
project_and_unify_type			fn project_and_unify_type<'cx,'tcx>(
project_type			fn project_type<'cx,'tcx>(
projection_bounds_with_self_ty			    pub fn projection_bounds_with_self_ty(&self,
propagate			    pub fn propagate(&mut self, cfg: &cfg::CFG, blk: &ast::Block) 
propagate			    fn propagate(&mut self) 
propagate_bits_into_entry_set_for			    fn propagate_bits_into_entry_set_for(&mut self,
propagate_bits_into_graph_successors_of			    fn propagate_bits_into_graph_successors_of(&mut self,
propagate_node			    fn propagate_node(&mut self, node: &ast_map::Node,
propagate_through_block			    fn propagate_through_block(&mut self, blk: &ast::Block, succ: LiveNode)
propagate_through_decl			    fn propagate_through_decl(&mut self, decl: &ast::Decl, succ: LiveNode)
propagate_through_expr			    fn propagate_through_expr(&mut self, expr: &Expr, succ: LiveNode)
propagate_through_exprs			    fn propagate_through_exprs(&mut self, exprs: &[P<Expr>], succ: LiveNode)
propagate_through_fn_block			    fn propagate_through_fn_block(&mut self, _: &ast::FnDecl, blk: &ast::Block)
propagate_through_local			    fn propagate_through_local(&mut self, local: &ast::Local, succ: LiveNode)
propagate_through_loop			    fn propagate_through_loop(&mut self,
propagate_through_lvalue_components			    fn propagate_through_lvalue_components(&mut self,
propagate_through_opt_expr			    fn propagate_through_opt_expr(&mut self,
propagate_through_stmt			    fn propagate_through_stmt(&mut self, stmt: &ast::Stmt, succ: LiveNode)
provided_source			pub fn provided_source(cx: &ctxt, id: ast::DefId) -> Option<ast::DefId> 
provided_trait_methods			pub fn provided_trait_methods<'tcx>(cx: &ctxt<'tcx>, id: ast::DefId)
ptr_sigil			pub fn ptr_sigil(ptr: PointerKind) -> &'static str 
push			    pub fn push(&mut self, other: BoundRegion) 
push			    pub fn push(&mut self, space: ParamSpace, value: T) 
push			    fn push(&mut self, predicate: &ty::Predicate<'tcx>) 
push_param_constraint			    fn push_param_constraint(&mut self,
push_param_constraint_from_top			    fn push_param_constraint_from_top(&mut self,
push_projection_constraint_from_top			    fn push_projection_constraint_from_top(&mut self,
push_region_constraint_from_top			    fn push_region_constraint_from_top(&mut self,
push_region_params			    fn push_region_params<'a,'tcx>(infcx: &InferCtxt<'a,'tcx>,
push_region_params			    fn push_region_params(regions: &mut VecPerParamSpace<ty::Region>,
push_reversed			fn push_reversed<'tcx>(stack: &mut Vec<Ty<'tcx>>, tys: &[Ty<'tcx>]) 
push_sig_subtypes			fn push_sig_subtypes<'tcx>(stack: &mut Vec<Ty<'tcx>>, sig: &ty::PolyFnSig<'tcx>) 
push_stack			    fn push_stack<'o,'s:'o>(&mut self,
push_sub_region_constraint			    fn push_sub_region_constraint(&mut self,
push_subtypes			fn push_subtypes<'tcx>(stack: &mut Vec<Ty<'tcx>>, parent_ty: Ty<'tcx>) 
push_transmute_restriction			    fn push_transmute_restriction(&self, restriction: TransmuteRestriction<'tcx>) 
push_types_from_defs			    fn push_types_from_defs<'tcx>(tcx: &ty::ctxt<'tcx>,
push_types_from_defs			    fn push_types_from_defs<'tcx>(tcx: &ty::ctxt<'tcx>,
range_covered_by_constructor			fn range_covered_by_constructor(ctor: &Constructor,
raw_emit_lint			pub fn raw_emit_lint(sess: &Session, lint: &'static Lint,
raw_pat			fn raw_pat<'a>(p: &'a Pat) -> &'a Pat 
rbml_decoder_decoder_helpers			trait rbml_decoder_decoder_helpers<'tcx> 
rbml_decoder_decoder_helpers for reader			impl<'a, 'tcx> rbml_decoder_decoder_helpers<'tcx> for reader::Decoder<'a> 
rbml_decoder_helper			trait rbml_decoder_helper 
rbml_decoder_helper for reader			impl<'a> rbml_decoder_helper for reader::Decoder<'a> 
rbml_writer_helpers			trait rbml_writer_helpers<'tcx> 
rbml_writer_helpers for Encoder			impl<'a, 'tcx> rbml_writer_helpers<'tcx> for Encoder<'a> 
reachable			    pub mod reachable;
read_auto_adjustment			    fn read_auto_adjustment<'a, 'b>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>)
read_auto_adjustment			    fn read_auto_adjustment<'b, 'c>(&mut self, dcx: &DecodeContext<'b, 'c, 'tcx>)
read_auto_deref_ref			    fn read_auto_deref_ref<'a, 'b>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>)
read_auto_deref_ref			    fn read_auto_deref_ref<'b, 'c>(&mut self, dcx: &DecodeContext<'b, 'c, 'tcx>)
read_autoref			    fn read_autoref<'a, 'b>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>)
read_autoref			    fn read_autoref<'b, 'c>(&mut self, dcx: &DecodeContext<'b, 'c, 'tcx>)
read_capture_mode			    fn read_capture_mode(&mut self) -> ast::CaptureClause 
read_capture_mode			    fn read_capture_mode(&mut self) -> ast::CaptureClause;
read_cast_kind			    fn read_cast_kind<'a, 'b>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>)
read_cast_kind			    fn read_cast_kind<'b, 'c>(&mut self, _dcx: &DecodeContext<'b, 'c, 'tcx>)
read_closure_kind			    fn read_closure_kind<'a, 'b>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>)
read_closure_kind			    fn read_closure_kind<'b, 'c>(&mut self, _dcx: &DecodeContext<'b, 'c, 'tcx>)
read_closure_ty			    fn read_closure_ty<'a, 'b>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>)
read_closure_ty			    fn read_closure_ty<'b, 'c>(&mut self, dcx: &DecodeContext<'b, 'c, 'tcx>)
read_crates			    pub fn read_crates(&mut self, krate: &ast::Crate) 
read_def_id			    fn read_def_id(&mut self, dcx: &DecodeContext) -> ast::DefId 
read_def_id			    fn read_def_id(&mut self, dcx: &DecodeContext) -> ast::DefId;
read_def_id_nodcx			    fn read_def_id_nodcx(&mut self,
read_existential_bounds			    fn read_existential_bounds<'a, 'b>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>)
read_existential_bounds			    fn read_existential_bounds<'b, 'c>(&mut self, dcx: &DecodeContext<'b, 'c, 'tcx>)
read_exported_macros			    pub fn read_exported_macros(&mut self, krate: &ast::Item) -> Vec<ast::MacroDef> 
read_extension_crate			    fn read_extension_crate(&mut self, span: Span, info: &CrateInfo) -> ExtensionCrate 
read_freevar_entry			    fn read_freevar_entry(&mut self, dcx: &DecodeContext)
read_macro_defs			pub fn read_macro_defs(sess: &Session, krate: &ast::Crate) -> Vec<ast::MacroDef> 
read_meta_section_name			pub fn read_meta_section_name(target: &Target) -> &'static str 
read_method_callee			    fn read_method_callee<'a, 'b>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>)
read_method_callee			    fn read_method_callee<'b, 'c>(&mut self, dcx: &DecodeContext<'b, 'c, 'tcx>)
read_method_callee_helper			trait read_method_callee_helper<'tcx> 
read_method_callee_helper for reader			impl<'a, 'tcx> read_method_callee_helper<'tcx> for reader::Decoder<'a> 
read_method_origin			    fn read_method_origin<'a, 'b>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>)
read_method_origin			    fn read_method_origin<'b, 'c>(&mut self, dcx: &DecodeContext<'b, 'c, 'tcx>)
read_poly_trait_ref			    fn read_poly_trait_ref<'a, 'b>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>)
read_poly_trait_ref			    fn read_poly_trait_ref<'b, 'c>(&mut self, dcx: &DecodeContext<'b, 'c, 'tcx>)
read_predicate			    fn read_predicate<'a, 'b>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>)
read_predicate			    fn read_predicate<'b, 'c>(&mut self, dcx: &DecodeContext<'b, 'c, 'tcx>)
read_substs			    fn read_substs<'a, 'b>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>)
read_substs			    fn read_substs<'b, 'c>(&mut self, dcx: &DecodeContext<'b, 'c, 'tcx>)
read_substs_nodcx			    fn read_substs_nodcx(&mut self, tcx: &ty::ctxt<'tcx>,
read_substs_nodcx			    fn read_substs_nodcx(&mut self,
read_trait_ref			    fn read_trait_ref<'a, 'b>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>)
read_trait_ref			    fn read_trait_ref<'b, 'c>(&mut self, dcx: &DecodeContext<'b, 'c, 'tcx>)
read_ty			    fn read_ty<'a, 'b>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>) -> Ty<'tcx>;
read_ty			    fn read_ty<'b, 'c>(&mut self, dcx: &DecodeContext<'b, 'c, 'tcx>) -> Ty<'tcx> 
read_ty_nodcx			    fn read_ty_nodcx(&mut self,
read_type_param_def			    fn read_type_param_def<'a, 'b>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>)
read_type_param_def			    fn read_type_param_def<'b, 'c>(&mut self, dcx: &DecodeContext<'b, 'c, 'tcx>)
read_type_scheme			    fn read_type_scheme<'a, 'b>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>)
read_type_scheme			    fn read_type_scheme<'b, 'c>(&mut self, dcx: &DecodeContext<'b, 'c, 'tcx>)
read_tys			    fn read_tys<'a, 'b>(&mut self, dcx: &DecodeContext<'a, 'b, 'tcx>) -> Vec<Ty<'tcx>>;
read_tys			    fn read_tys<'b, 'c>(&mut self, dcx: &DecodeContext<'b, 'c, 'tcx>)
read_tys_nodcx			    fn read_tys_nodcx(&mut self,
read_vec_per_param_space			    fn read_vec_per_param_space<T, F>(&mut self, f: F) -> VecPerParamSpace<T> where
read_vec_per_param_space			    fn read_vec_per_param_space<T, F>(&mut self, mut f: F) -> VecPerParamSpace<T> where
rebuild			    fn rebuild(&self)
rebuild_arg_ty_or_output			    fn rebuild_arg_ty_or_output(&self,
rebuild_args_ty			    fn rebuild_args_ty(&self,
rebuild_expl_self			    fn rebuild_expl_self(&self,
rebuild_generics			    fn rebuild_generics(&self,
rebuild_output			    fn rebuild_output(&self, ty: &ast::FunctionRetTy,
rebuild_path			    fn rebuild_path(&self,
rebuild_ty			    fn rebuild_ty(&self,
rebuild_ty_param_bounds			    fn rebuild_ty_param_bounds(&self,
rebuild_ty_params			    fn rebuild_ty_params(&self,
record_borrow			    fn record_borrow(&mut self, id: ast::NodeId, mutbl: ast::Mutability) 
record_encl_scope			    pub fn record_encl_scope(&self, sub: CodeExtent, sup: CodeExtent) 
record_fn_parent			    fn record_fn_parent(&self, sub_fn: ast::NodeId, sup_fn: ast::NodeId) 
record_impl			    pub fn record_impl(&self,
record_renamings			        fn record_renamings(const_expr: &ast::Expr,
record_rvalue_scope			    fn record_rvalue_scope(&self, var: ast::NodeId, lifetime: CodeExtent) 
record_rvalue_scope			    fn record_rvalue_scope<'a>(visitor: &mut RegionResolutionVisitor,
record_rvalue_scope_if_borrow_expr			    fn record_rvalue_scope_if_borrow_expr(visitor: &mut RegionResolutionVisitor,
record_superlifetime			fn record_superlifetime(visitor: &mut RegionResolutionVisitor,
record_trait_has_default_impl			pub fn record_trait_has_default_impl(tcx: &ctxt, trait_def_id: DefId) 
record_var_lifetime			fn record_var_lifetime(visitor: &mut RegionResolutionVisitor,
record_var_scope			    fn record_var_scope(&self, var: ast::NodeId, lifetime: CodeExtent) 
recursion_limit			    pub mod recursion_limit;
reexports			fn reexports<'a>(d: rbml::Doc<'a>) -> reader::TaggedDocsIterator<'a> 
reference			    pub fn reference(&self, bits: TypeContents) -> TypeContents 
references_error			    fn references_error(&self) -> bool 
references_error			    fn references_error(&self) -> bool;
region			    pub mod region;
region_existential_bound			pub fn region_existential_bound<'tcx>(r: ty::Region) -> ExistentialBounds<'tcx> 
region_inference			pub mod region_inference;
region_obligations			    pub fn region_obligations(&self,
region_outlives_predicate			    pub fn region_outlives_predicate(&self,
region_vars_confined_to_snapshot			    fn region_vars_confined_to_snapshot(&self,
region_vars_for_defs			    pub fn region_vars_for_defs(&self,
regions			    fn regions(&mut self, a: ty::Region, _: ty::Region) -> RelateResult<'tcx, ty::Region> 
regions			    fn regions(&mut self, a: ty::Region, b: ty::Region) -> RelateResult<'tcx, ty::Region> 
regions			    fn regions(&mut self, a: ty::Region, b: ty::Region) -> RelateResult<'tcx, ty::Region> 
regions			    fn regions(&mut self, a: ty::Region, b: ty::Region) -> RelateResult<'tcx, ty::Region> 
regions			    fn regions(&mut self, a: ty::Region, b: ty::Region) -> RelateResult<'tcx, ty::Region> 
regions			    pub fn regions<'a>(&'a self) -> &'a VecPerParamSpace<ty::Region> 
regions			    fn regions(&mut self, a: ty::Region, b: ty::Region) -> RelateResult<'tcx, ty::Region> 
regions			    fn regions(&mut self, a: ty::Region, b: ty::Region)
register			    fn register(&mut self, name: &str, span: Span) 
register_attribute			    pub fn register_attribute(&mut self, name: String, ty: AttributeType) 
register_builtin_bound			    pub fn register_builtin_bound<'a>(&mut self,
register_crate			    fn register_crate(&mut self,
register_group			    pub fn register_group(&mut self, sess: Option<&Session>,
register_lint_group			    pub fn register_lint_group(&mut self, name: &'static str, to: Vec<&'static Lint>) 
register_lint_pass			    pub fn register_lint_pass(&mut self, lint_pass: LintPassObject) 
register_llvm_pass			    pub fn register_llvm_pass(&mut self, name: &str) 
register_macro			    pub fn register_macro(&mut self, name: &str, expander: MacroExpanderFn) 
register_native_lib			fn register_native_lib(sess: &Session,
register_pass			    pub fn register_pass(&mut self, sess: Option<&Session>,
register_predicate_obligation			    pub fn register_predicate_obligation<'a>(&mut self,
register_region_obligation			    pub fn register_region_obligation<'a>(&mut self,
register_region_obligation			fn register_region_obligation<'tcx>(t_a: Ty<'tcx>,
register_renamed			    pub fn register_renamed(&mut self, old_name: &str, new_name: &str) 
register_syntax_extension			    pub fn register_syntax_extension(&mut self, name: ast::Name, extension: SyntaxExtension) 
registry			pub mod registry;
relate			    fn relate<R:TypeRelation<'a,'tcx>>(relation: &mut R,
relate			    fn relate<R>(relation: &mut R,
relate			    fn relate<T:Relate<'a,'tcx>>(&mut self, a: &T, b: &T) -> RelateResult<'tcx, T> 
relate_arg_vecs			fn relate_arg_vecs<'a,'tcx:'a,R>(relation: &mut R,
relate_bound			    fn relate_bound(&self, v: Ty<'tcx>, a: Ty<'tcx>, b: Ty<'tcx>) -> RelateResult<'tcx, ()> 
relate_bound			    fn relate_bound(&self, v: Ty<'tcx>, a: Ty<'tcx>, b: Ty<'tcx>) -> RelateResult<'tcx, ()>;
relate_bound			    fn relate_bound(&self, v: Ty<'tcx>, a: Ty<'tcx>, b: Ty<'tcx>) -> RelateResult<'tcx, ()> 
relate_free_regions			    pub fn relate_free_regions(&mut self, sub: FreeRegion, sup: FreeRegion) 
relate_free_regions_from_implications			    pub fn relate_free_regions_from_implications<'tcx>(&mut self,
relate_free_regions_from_predicates			    pub fn relate_free_regions_from_predicates<'tcx>(&mut self,
relate_item_substs			fn relate_item_substs<'a,'tcx:'a,R>(relation: &mut R,
relate_region_params			fn relate_region_params<'a,'tcx:'a,R>(relation: &mut R,
relate_substs			fn relate_substs<'a,'tcx:'a,R>(relation: &mut R,
relate_type_params			fn relate_type_params<'a,'tcx:'a,R>(relation: &mut R,
relate_vars			    pub fn relate_vars(&mut self, a: ty::TyVid, dir: RelationDir, b: ty::TyVid) 
relate_with_variance			    fn relate_with_variance<T:Relate<'a,'tcx>>(&mut self,
relate_with_variance			    fn relate_with_variance<T:Relate<'a,'tcx>>(&mut self,
relate_with_variance			    fn relate_with_variance<T:Relate<'a,'tcx>>(&mut self,
relate_with_variance			    fn relate_with_variance<T:Relate<'a,'tcx>>(&mut self,
relate_with_variance			    fn relate_with_variance<T:Relate<'a,'tcx>>(&mut self,
relate_with_variance			    fn relate_with_variance<T:Relate<'a,'tcx>>(&mut self,
relate_with_variance			    fn relate_with_variance<T:Relate<'a,'tcx>>(&mut self,
relations			    fn relations<'a>(&'a mut self, a: ty::TyVid) -> &'a mut Vec<Relation> 
relations			fn relations<'a>(v: &'a mut TypeVariableData) -> &'a mut Vec<Relation> 
relative_target_lib_path			pub fn relative_target_lib_path(sysroot: &Path, target_triple: &str) -> PathBuf 
rematch_impl			    fn rematch_impl(&mut self,
replace			    pub fn replace(&mut self, space: ParamSpace, elems: Vec<T>) 
replace_if_possible			    pub fn replace_if_possible(&self, t: Ty<'tcx>) -> Ty<'tcx> 
replace_late_bound_regions			pub fn replace_late_bound_regions<'tcx,T,F>(tcx: &ty::ctxt<'tcx>,
replace_late_bound_regions_with_fresh_var			    pub fn replace_late_bound_regions_with_fresh_var<T>(
replace_newline_with_backslash_l			fn replace_newline_with_backslash_l(s: String) -> String 
report_and_explain_type_error			    fn report_and_explain_type_error(&self,
report_concrete_failure			    fn report_concrete_failure(&self,
report_discrim_overflow			fn report_discrim_overflow(cx: &ctxt,
report_fulfillment_error			fn report_fulfillment_error<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,
report_fulfillment_errors			pub fn report_fulfillment_errors<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,
report_future_hostility			    fn report_future_hostility(&self, graph: &RegionGraph) 
report_generic_bound_failure			    fn report_generic_bound_failure(&self,
report_inference_failure			    fn report_inference_failure(&self,
report_load_errs			    pub fn report_load_errs(&mut self) 
report_mismatched_types			    pub fn report_mismatched_types(&self,
report_on_unimplemented			fn report_on_unimplemented<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,
report_overflow_error			pub fn report_overflow_error<'a, 'tcx, T>(infcx: &InferCtxt<'a, 'tcx>,
report_processed_errors			    fn report_processed_errors(&self,
report_projection_error			pub fn report_projection_error<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,
report_region_errors			    fn report_region_errors(&self,
report_selection_error			pub fn report_selection_error<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,
report_sub_sup_conflict			    fn report_sub_sup_conflict(&self,
report_sup_sup_conflict			    fn report_sup_sup_conflict(&self,
report_type_error			    fn report_type_error(&self, trace: TypeTrace<'tcx>, terr: &ty::type_err<'tcx>) 
report_type_error			    fn report_type_error(&self, trace: TypeTrace<'tcx>, terr: &ty::type_err<'tcx>);
require			    pub fn require(&self, it: LangItem) -> Result<ast::DefId, String> 
require_loop			    fn require_loop(&self, name: &str, span: Span) 
require_unsafe			    fn require_unsafe(&mut self, span: Span, description: &str) 
required_region_bounds			pub fn required_region_bounds<'tcx>(tcx: &ctxt<'tcx>,
reserve_id_range			fn reserve_id_range(sess: &Session,
reserve_node_ids			    pub fn reserve_node_ids(&self, count: ast::NodeId) -> ast::NodeId 
reset			    pub fn reset(&self) 
reset			    fn reset(&mut self, bits: &mut [usize]) 
resolve			    fn resolve<'a>(&self, infcx: &InferCtxt<'a, 'tcx>) -> Self;
resolve			    fn resolve<'a>(&self, infcx: &InferCtxt<'a, 'tcx>) -> Ty<'tcx> 
resolve			    fn resolve<'a>(&self, infcx: &InferCtxt<'a, 'tcx>)
resolve			    fn resolve<'a>(&self,
resolve			pub mod resolve;
resolve_arm			fn resolve_arm(visitor: &mut RegionResolutionVisitor, arm: &ast::Arm) 
resolve_block			fn resolve_block(visitor: &mut RegionResolutionVisitor, blk: &ast::Block) 
resolve_crate			    fn resolve_crate(&mut self,
resolve_crate			pub fn resolve_crate(sess: &Session, krate: &ast::Crate) -> RegionMaps 
resolve_crate_deps			    fn resolve_crate_deps(&mut self,
resolve_expr			fn resolve_expr(visitor: &mut RegionResolutionVisitor, expr: &ast::Expr) 
resolve_expr			pub fn resolve_expr(tcx: &ctxt, expr: &ast::Expr) -> def::Def 
resolve_fn			fn resolve_fn(visitor: &mut RegionResolutionVisitor,
resolve_free_lifetime_ref			    fn resolve_free_lifetime_ref(&mut self,
resolve_inlined_item			pub fn resolve_inlined_item(sess: &Session,
resolve_item			fn resolve_item(visitor: &mut RegionResolutionVisitor, item: &ast::Item) 
resolve_lifetime			    pub mod resolve_lifetime;
resolve_lifetime_ref			    fn resolve_lifetime_ref(&mut self, lifetime_ref: &ast::Lifetime) 
resolve_local			fn resolve_local(visitor: &mut RegionResolutionVisitor, local: &ast::Local) 
resolve_pat			fn resolve_pat(visitor: &mut RegionResolutionVisitor, pat: &ast::Pat) 
resolve_regions			    pub fn resolve_regions(&self,
resolve_regions_and_report_errors			    pub fn resolve_regions_and_report_errors(&self,
resolve_stmt			fn resolve_stmt(visitor: &mut RegionResolutionVisitor, stmt: &ast::Stmt) 
resolve_trait_associated_const			fn resolve_trait_associated_const<'a, 'tcx: 'a>(tcx: &'a ty::ctxt<'tcx>,
resolve_type_vars_if_possible			    pub fn resolve_type_vars_if_possible<T:TypeFoldable<'tcx>>(&self, value: &T) -> T 
resolve_var			    pub fn resolve_var(&self, rid: RegionVid) -> ty::Region 
rev_lookup			        fn rev_lookup(infcx: &InferCtxt,
reverse			    fn reverse(values: &mut Vec<TypeVariableData<'tcx>>, action: UndoEntry) 
reverse_translate_def_id			fn reverse_translate_def_id(cdata: Cmd, did: ast::DefId) -> Option<ast::DefId> 
rollback_to			    fn rollback_to(&self, snapshot: CombinedSnapshot) 
rollback_to			    pub fn rollback_to(&self, snapshot: RegionSnapshot) 
rollback_to			    pub fn rollback_to(&mut self, s: Snapshot) 
roundtrip			fn roundtrip(in_item: Option<P<ast::Item>>) 
rust_path			pub fn rust_path() -> Vec<PathBuf> 
rustc			mod rustc 
rustc_optgroups			pub fn rustc_optgroups() -> Vec<RustcOptGroup> 
rustc_short_optgroups			pub fn rustc_short_optgroups() -> Vec<RustcOptGroup> 
rustlibdir			pub fn rustlibdir() -> String 
safe_to_unsafe_fn_ty			    pub fn safe_to_unsafe_fn_ty(&self, bare_fn: &BareFnTy<'tcx>) -> Ty<'tcx> 
same_struct_or_enum_def_id			    fn same_struct_or_enum_def_id(ty: Ty, did: DefId) -> bool 
same_type			    fn same_type<'tcx>(a: Ty<'tcx>, b: Ty<'tcx>) -> bool 
scan			fn scan<R, F, G>(st: &mut PState, mut is_last: F, op: G) -> R where
scopes_intersect			    pub fn scopes_intersect(&self, scope1: CodeExtent, scope2: CodeExtent)
search			    pub fn search<F>(&self, mut pick: F)
search_lifetimes			fn search_lifetimes<'a>(lifetimes: &'a Vec<ast::LifetimeDef>,
search_paths			pub mod search_paths;
secondary_libdir_name			    fn secondary_libdir_name() -> String 
select			    fn select<'a>(&mut self,
select			mod select;
select			    pub fn select(&mut self, obligation: &TraitObligation<'tcx>)
select_all_or_error			    pub fn select_all_or_error<'a>(&mut self,
select_from_expr			    fn select_from_expr(&mut self, expr: &ast::Expr) 
select_new_obligations			    pub fn select_new_obligations<'a>(&mut self,
select_where_possible			    pub fn select_where_possible<'a>(&mut self,
self_ty			    pub fn self_ty(&self) -> Option<Ty<'tcx>> 
self_ty			    fn self_ty(&self) -> ty::Binder<Ty<'tcx>> 
self_ty			    pub fn self_ty(&self) -> Ty<'tcx> 
sequence_element_type			pub fn sequence_element_type<'tcx>(cx: &ctxt<'tcx>, ty: Ty<'tcx>) -> Ty<'tcx> 
sess			    pub fn sess(&'a self) -> &'a Session 
session			pub mod session;
set_bit			fn set_bit(words: &mut [usize], bit: usize) -> bool 
set_captures			    fn set_captures(&mut self, node_id: NodeId, cs: Vec<CaptureInfo>) 
set_crate_data			    pub fn set_crate_data(&self, cnum: ast::CrateNum, data: Rc<crate_metadata>) 
set_level			    fn set_level(&mut self, lint: LintId, lvlsrc: LevelSource) 
set_object_safety			    pub fn set_object_safety(&self, is_safe: bool) 
shadower_label			fn shadower_label(span: Span) -> Shadower 
shadower_lifetime			fn shadower_lifetime(l: &ast::Lifetime) -> Shadower 
shallow_resolve			    pub fn shallow_resolve(&self, typ: Ty<'tcx>) -> Ty<'tcx> 
shift_region			pub fn shift_region(region: ty::Region, amount: u32) -> ty::Region 
shift_region_through_binders			    fn shift_region_through_binders(&self, region: ty::Region) -> ty::Region 
shift_regions			pub fn shift_regions<'tcx, T:TypeFoldable<'tcx>>(tcx: &ty::ctxt<'tcx>,
shift_regions_through_binders			    fn shift_regions_through_binders(&self, ty: Ty<'tcx>) -> Ty<'tcx> 
shifted			    pub fn shifted(&self, amount: u32) -> DebruijnIndex 
short_optgroups			pub fn short_optgroups() -> Vec<getopts::OptGroup> 
should_explore			fn should_explore(tcx: &ty::ctxt, def_id: ast::DefId) -> bool 
should_link			fn should_link(i: &ast::Item) -> bool 
should_update_candidate_cache			    fn should_update_candidate_cache(&mut self,
should_warn			    fn should_warn(&self, var: Variable) -> Option<String> 
should_warn_about_field			    fn should_warn_about_field(&mut self, node: &ast::StructField_) -> bool 
should_warn_about_item			    fn should_warn_about_item(&mut self, item: &ast::Item) -> bool 
should_warn_about_variant			    fn should_warn_about_variant(&mut self, variant: &ast::Variant_) -> bool 
shuffle			    fn shuffle(early_bound: &mut Vec<ast::Name>,
signal_shadowing_problem			fn signal_shadowing_problem(
simd_size			pub fn simd_size(cx: &ctxt, ty: Ty) -> usize 
simd_type			pub fn simd_type<'tcx>(cx: &ctxt<'tcx>, ty: Ty<'tcx>) -> Ty<'tcx> 
simple_identifier			pub fn simple_identifier<'a>(pat: &'a ast::Pat) -> Option<&'a ast::Ident> 
simplify_ast			fn simplify_ast(ii: e::InlinedItemRef) -> ast::InlinedItem 
simplify_type			pub fn simplify_type(tcx: &ty::ctxt,
skip_binder			    pub fn skip_binder(&self) -> &T 
skip_current_subtree			    pub fn skip_current_subtree(&mut self) 
skolemize_late_bound_regions			pub fn skolemize_late_bound_regions<'a,'tcx,T>(infcx: &InferCtxt<'a,'tcx>,
skolemize_late_bound_regions			    pub fn skolemize_late_bound_regions<T>(&self,
snapshot			    pub fn snapshot(&mut self) -> Snapshot 
sort_bounds_list			pub fn sort_bounds_list(bounds: &mut [ty::PolyProjectionPredicate]) 
sort_key			    pub fn sort_key(&self) -> (ast::DefId, ast::Name) 
source			    fn source(&'a self, edge: &Edge<'a>) -> Node<'a> { self.cfg.source(edge) }
source			    fn source(&'a self, edge: &Edge<'a>) -> Node<'a> 
source			    fn source(&self, edge: &Edge) -> Node 
span			    pub fn span(self) -> Span 
span			    pub fn span(&self, id: NodeId) -> Span 
span			    pub fn span(&self) -> Span 
span			    fn span(&self) -> Span { self.span }
span			    fn span(&self) -> Span;
span			    pub fn span(&self, ast_map: &ast_map::Map) -> Option<Span> 
span_bug			    pub fn span_bug(&self, sp: Span, msg: &str) -> ! 
span_debug			    fn span_debug(span: codemap::Span, f: &mut fmt::Formatter) -> fmt::Result 
span_end_note			    pub fn span_end_note(&self, sp: Span, msg: &str) 
span_err			    pub fn span_err(&self, sp: Span, msg: &str) 
span_err_with_code			    pub fn span_err_with_code(&self, sp: Span, msg: &str, code: &str) 
span_fatal			    pub fn span_fatal(&self, sp: Span, msg: &str) -> ! 
span_fatal_with_code			    pub fn span_fatal_with_code(&self, sp: Span, msg: &str, code: &str) -> ! 
span_help			    pub fn span_help(&self, sp: Span, msg: &str) 
span_lint			    pub fn span_lint(&self, lint: &'static Lint, span: Span, msg: &str) 
span_note			    pub fn span_note(&self, sp: Span, msg: &str) 
span_suggestion			    pub fn span_suggestion(&self, sp: Span, msg: &str, suggestion: String) 
span_unimpl			    pub fn span_unimpl(&self, sp: Span, msg: &str) -> ! 
span_warn			    pub fn span_warn(&self, sp: Span, msg: &str) 
span_warn_with_code			    pub fn span_warn_with_code(&self, sp: Span, msg: &str, code: &str) 
specialize			pub fn specialize<'a>(cx: &MatchCheckCtxt, r: &[&'a Pat],
split			    pub fn split(self) -> SeparateVecsPerParamSpace<T> 
split_msg_into_multilines			fn split_msg_into_multilines(msg: &str) -> Option<String> 
stability			    pub mod stability;
stable			    fn stable(g: getopts::OptGroup) -> R { RustcOptGroup::stable(g) }
stable			    fn stable(g: getopts::OptGroup) -> RustcOptGroup 
start_snapshot			    fn start_snapshot(&self) -> CombinedSnapshot 
start_snapshot			    pub fn start_snapshot(&self) -> RegionSnapshot 
stmt			    fn stmt(&mut self, stmt: &ast::Stmt, pred: CFGIndex) -> CFGIndex 
stmt_node_id			pub fn stmt_node_id(s: &ast::Stmt) -> ast::NodeId 
store_free_region_map			    pub fn store_free_region_map(&self, id: NodeId, map: FreeRegionMap) 
straightline			    fn straightline<'b, I: Iterator<Item=&'b ast::Expr>>(&mut self,
struct_field_family_to_visibility			fn struct_field_family_to_visibility(family: Family) -> ast::Visibility 
struct_fields			pub fn struct_fields<'tcx>(cx: &ctxt<'tcx>, did: ast::DefId, substs: &Substs<'tcx>)
struct_lockstep_tails			pub fn struct_lockstep_tails<'tcx>(cx: &ctxt<'tcx>,
struct_tail			pub fn struct_tail<'tcx>(cx: &ctxt<'tcx>, mut ty: Ty<'tcx>) -> Ty<'tcx> 
sub			    pub fn sub(&self) -> Sub<'a, 'tcx> 
sub			    pub fn sub(&'a self, a_is_expected: bool, trace: TypeTrace<'tcx>)
sub			pub mod sub;
sub			    fn sub(self, other: TypeContents) -> TypeContents 
sub_free_region			    pub fn sub_free_region(&self, sub: FreeRegion, sup: FreeRegion) -> bool 
sub_poly_trait_refs			    pub fn sub_poly_trait_refs(&self,
sub_trait_refs			    pub fn sub_trait_refs(&self,
sub_types			    pub fn sub_types(&self,
subst			    pub mod subst;
subst			    fn subst(&self, tcx: &ty::ctxt<'tcx>, substs: &Substs<'tcx>) -> Self 
subst_spanned			    fn subst_spanned(&self, tcx: &ty::ctxt<'tcx>,
subst_spanned			    fn subst_spanned(&self,
subst_supertrait			    pub fn subst_supertrait(&self,
substd_enum_variants			pub fn substd_enum_variants<'tcx>(cx: &ctxt<'tcx>,
substs			    pub fn substs(&self) -> &'tcx Substs<'tcx> 
subtypes_require			    fn subtypes_require<'tcx>(cx: &ctxt<'tcx>, seen: &mut Vec<DefId>,
suffix_matches			    fn suffix_matches(&self, parent: NodeId) -> bool 
suggest_new_overflow_limit			pub fn suggest_new_overflow_limit(tcx: &ty::ctxt, span: Span) 
super_combine_tys			pub fn super_combine_tys<'a,'tcx:'a,R>(infcx: &InferCtxt<'a, 'tcx>,
super_fold_autoref			pub fn super_fold_autoref<'tcx, T: TypeFolder<'tcx>>(this: &mut T,
super_fold_bare_fn_ty			pub fn super_fold_bare_fn_ty<'tcx, T: TypeFolder<'tcx>>(this: &mut T,
super_fold_binder			pub fn super_fold_binder<'tcx, T, U>(this: &mut T,
super_fold_closure_ty			pub fn super_fold_closure_ty<'tcx, T: TypeFolder<'tcx>>(this: &mut T,
super_fold_existential_bounds			pub fn super_fold_existential_bounds<'tcx, T: TypeFolder<'tcx>>(
super_fold_fn_sig			pub fn super_fold_fn_sig<'tcx, T: TypeFolder<'tcx>>(this: &mut T,
super_fold_item_substs			pub fn super_fold_item_substs<'tcx, T: TypeFolder<'tcx>>(this: &mut T,
super_fold_mt			pub fn super_fold_mt<'tcx, T: TypeFolder<'tcx>>(this: &mut T,
super_fold_output			pub fn super_fold_output<'tcx, T: TypeFolder<'tcx>>(this: &mut T,
super_fold_substs			pub fn super_fold_substs<'tcx, T: TypeFolder<'tcx>>(this: &mut T,
super_fold_trait_ref			pub fn super_fold_trait_ref<'tcx, T: TypeFolder<'tcx>>(this: &mut T,
super_fold_ty			pub fn super_fold_ty<'tcx, T: TypeFolder<'tcx>>(this: &mut T,
super_lattice_tys			pub fn super_lattice_tys<'a,'tcx,L:LatticeDir<'a,'tcx>>(this: &mut L,
super_relate_tys			pub fn super_relate_tys<'a,'tcx:'a,R>(relation: &mut R,
supertrait_def_ids			pub fn supertrait_def_ids<'cx, 'tcx>(tcx: &'cx ty::ctxt<'tcx>,
supertraits			pub fn supertraits<'cx, 'tcx>(tcx: &'cx ty::ctxt<'tcx>,
supertraits_reference_self			fn supertraits_reference_self<'tcx>(tcx: &ty::ctxt<'tcx>,
sv::SnapshotVecDelegate for Delegate			impl<'tcx> sv::SnapshotVecDelegate for Delegate<'tcx> 
switch_expected			    pub fn switch_expected(&self) -> CombineFields<'a, 'tcx> 
symbol_is_live			    fn symbol_is_live(&mut self, id: ast::NodeId,
sysroot			    pub fn sysroot<'a>(&'a self) -> &'a Path 
tag			    fn tag<F>(&mut self, tag_id: c::astencode_tag, f: F) where F: FnOnce(&mut Self);
tag			    fn tag<F>(&mut self,
tag			    fn tag(&self) -> &'static str { "Bivariate" }
tag			    fn tag(&self) -> &'static str { "Equate" }
tag			    fn tag(&self) -> &'static str { "Glb" }
tag			    fn tag(&self) -> &'static str { "Lub" }
tag			    fn tag(&self) -> &'static str { "Sub" }
tag			    fn tag(_: Option<ty::FloatVid>) -> &'static str { "FloatVid" }
tag			    fn tag(_: Option<ty::IntVid>) -> &'static str { "IntVid" }
tag			    fn tag(&self) -> &'static str { "Match" }
tag			    fn tag(&self) -> &'static str;
tainted			    pub fn tainted(&self, mark: &RegionSnapshot, r0: Region) -> Vec<Region> 
tainted_regions			    fn tainted_regions(&self, snapshot: &CombinedSnapshot, r: ty::Region) -> Vec<ty::Region> 
tainted_regions			    fn tainted_regions(&self, snapshot: &CombinedSnapshot, r: ty::Region) -> Vec<ty::Region>;
target			    fn target(&'a self, edge: &Edge<'a>) -> Node<'a> { self.cfg.target(edge) }
target			    fn target(&'a self, edge: &Edge<'a>) -> Node<'a> 
target			    fn target(&self, edge: &Edge) -> Node 
target_filesearch			    pub fn target_filesearch(&self, kind: PathKind) -> filesearch::FileSearch 
tc_mt			    fn tc_mt<'tcx>(cx: &ctxt<'tcx>,
tc_ty			    fn tc_ty<'tcx>(cx: &ctxt<'tcx>,
tcx			    fn tcx(&self) -> &'t ty::ctxt<'tcx> 
tcx			    fn tcx(&self) -> &'a ty::ctxt<'tcx> 
tcx			    fn tcx(&self) -> &'a ty::ctxt<'tcx> { self.fields.tcx() }
tcx			    fn tcx(&self) -> &ty::ctxt<'tcx> 
tcx			    pub fn tcx(&self) -> &'a ty::ctxt<'tcx> 
tcx			    fn tcx(&self) -> &'a ty::ctxt<'tcx> { self.fields.tcx() }
tcx			    fn tcx<'b>(&'b self) -> &'b ty::ctxt<'tcx> 
tcx			    fn tcx(&self) -> &'a ty::ctxt<'tcx> { self.fields.tcx() }
tcx			    fn tcx(&self) -> &'a ty::ctxt<'tcx> { self.fields.tcx() }
tcx			    fn tcx(&self) -> &ty::ctxt<'tcx> 
tcx			    fn tcx(&self) -> &'a ty::ctxt<'tcx> { self.fields.infcx.tcx }
tcx			    fn tcx(&self) -> &'t ty::ctxt<'tcx> 
tcx			    fn tcx(&self) -> &ty::ctxt<'tcx> { self.tcx }
tcx			    fn tcx(&self) -> &ty::ctxt<'tcx> 
tcx			    pub fn tcx(&self) -> &'cx ty::ctxt<'tcx> 
tcx			    fn tcx(&self) -> &ty::ctxt<'tcx> 
tcx			    fn tcx(&self) -> &ty::ctxt<'tcx> { self.tcx }
tcx			    fn tcx<'a>(&'a self) -> &'a ty::ctxt<'tcx>;
tcx			    fn tcx(&self) -> &'a ty::ctxt<'tcx> { self.tcx }
tcx			    fn tcx(&self) -> &'a ty::ctxt<'tcx>;
temp_path			    pub fn temp_path(&self, flavor: OutputType) -> PathBuf 
temporary_scope			    fn temporary_scope(&self, rvalue_id: ast::NodeId) -> Option<region::CodeExtent>;
temporary_scope			    pub fn temporary_scope(&self, id: ast::NodeId) -> ty::Region 
temporary_scope			    pub fn temporary_scope(&self, expr_id: ast::NodeId) -> Option<CodeExtent> 
temporary_scope			    fn temporary_scope(&self, rvalue_id: ast::NodeId) -> Option<region::CodeExtent> 
terr_vstore_kind			pub enum terr_vstore_kind 
test			    fn test(&self) -> i32 
tests			mod tests 
time			pub fn time<T, U, F>(do_it: bool, what: &str, u: U, f: F) -> T where
time_llvm_passes			    pub fn time_llvm_passes(&self) -> bool 
time_passes			    pub fn time_passes(&self) -> bool { self.opts.debugging_opts.time_passes }
tls			pub mod tls 
to_bound_region			    pub fn to_bound_region(&self) -> ty::BoundRegion 
to_builtin_kind			    pub fn to_builtin_kind(&self, id: ast::DefId) -> Option<ty::BuiltinBound> 
to_code_extent			    fn to_code_extent(&self) -> CodeExtent 
to_code_extent			    fn to_code_extent(&self) -> Option<CodeExtent> 
to_code_extent			    pub fn to_code_extent(&self) -> CodeExtent 
to_early_bound_region			    pub fn to_early_bound_region(&self) -> ty::Region 
to_fn_parts			    pub fn to_fn_parts(self) -> FnParts<'a> 
to_i16			    fn to_i16(&self) -> Option<i16> 
to_i16			    fn to_i16(&self) -> Option<i16>;
to_i32			    fn to_i32(&self) -> Option<i32> 
to_i32			    fn to_i32(&self) -> Option<i32>;
to_i64			    fn to_i64(&self) -> Option<i64> 
to_i64			    fn to_i64(&self) -> Option<i64>;
to_i8			    fn to_i8(&self) -> Option<i8> 
to_i8			    fn to_i8(&self) -> Option<i8>;
to_mutbl_lossy			    pub fn to_mutbl_lossy(self) -> ast::Mutability 
to_node			    fn to_node(self) -> Option<Node<'ast>> 
to_opt_poly_trait_ref			    pub fn to_opt_poly_trait_ref(&self) -> Option<PolyTraitRef<'tcx>> 
to_poly_trait_predicate			    pub fn to_poly_trait_predicate(&self) -> PolyTraitPredicate<'tcx> 
to_poly_trait_ref			    fn to_poly_trait_ref(&self) -> PolyTraitRef<'tcx> 
to_poly_trait_ref			    fn to_poly_trait_ref(&self) -> PolyTraitRef<'tcx>;
to_predicates			    pub fn to_predicates<'tcx>(&self,
to_ty			    pub fn to_ty(&self, tcx: &ty::ctxt<'tcx>) -> Ty<'tcx> 
to_ty			    fn to_ty<'tcx>(&self, cx: &ctxt<'tcx>) -> Ty<'tcx> 
to_ty			    fn to_ty<'tcx>(&self, cx: &ctxt<'tcx>) -> Ty<'tcx>;
to_ty			    pub fn to_ty<'tcx>(self, tcx: &ty::ctxt<'tcx>) -> Ty<'tcx> 
to_type			    fn to_type(&self, tcx: &ty::ctxt<'tcx>) -> Ty<'tcx> 
to_type			    fn to_type(&self, tcx: &ty::ctxt<'tcx>) -> Ty<'tcx>;
to_u16			    fn to_u16(&self) -> Option<u16> 
to_u16			    fn to_u16(&self) -> Option<u16>;
to_u32			    fn to_u32(&self) -> Option<u32> 
to_u32			    fn to_u32(&self) -> Option<u32>;
to_u64			    fn to_u64(&self) -> Option<u64> 
to_u64			    fn to_u64(&self) -> Option<u64>;
to_u8			    fn to_u8(&self) -> Option<u8> 
to_u8			    fn to_u8(&self) -> Option<u8>;
to_uint			    pub fn to_uint(self) -> usize 
to_user_str			    pub fn to_user_str(&self) -> &'static str 
to_user_str			    pub fn to_user_str(&self) -> &'static str 
to_usize			    fn to_usize(&self) -> usize 
tr			    fn tr(&self, dcx: &DecodeContext) -> Option<ast::DefId> 
tr			    fn tr(&self, dcx: &DecodeContext) -> Self;
tr			    fn tr(&self, dcx: &DecodeContext) -> Span 
tr			    fn tr(&self, dcx: &DecodeContext) -> ast::DefId 
tr			    fn tr(&self, dcx: &DecodeContext) -> def::Def 
tr			    fn tr(&self, dcx: &DecodeContext) -> region::CodeExtent 
tr			    fn tr(&self, dcx: &DecodeContext) -> region::DestructionScopeData 
tr			    fn tr(&self, dcx: &DecodeContext) -> ty::BoundRegion 
tr			    fn tr(&self, dcx: &DecodeContext) -> ty::FreeRegion 
tr			    fn tr(&self, dcx: &DecodeContext) -> ty::Freevar 
tr			    fn tr(&self, dcx: &DecodeContext) -> ty::Region 
tr			    fn tr(&self, dcx: &DecodeContext) -> ty::UpvarBorrow 
tr			    fn tr(&self, dcx: &DecodeContext) -> ty::UpvarCapture 
tr			trait tr 
tr for Option			impl tr for Option<ast::DefId> 
tr for Span			impl tr for Span 
tr for ast			impl tr for ast::DefId 
tr for def			impl tr for def::Def 
tr for region			impl tr for region::CodeExtent 
tr for region			impl tr for region::DestructionScopeData 
tr for ty			impl tr for ty::BoundRegion 
tr for ty			impl tr for ty::FreeRegion 
tr for ty			impl tr for ty::Freevar 
tr for ty			impl tr for ty::Region 
tr for ty			impl tr for ty::UpvarBorrow 
tr for ty			impl tr for ty::UpvarCapture 
tr_def_id			    pub fn tr_def_id(&self, did: ast::DefId) -> ast::DefId 
tr_id			    pub fn tr_id(&self, id: ast::NodeId) -> ast::NodeId 
tr_intern			    fn tr_intern(&self, dcx: &DecodeContext) -> ast::DefId 
tr_intern			    fn tr_intern(&self, dcx: &DecodeContext) -> ast::DefId;
tr_intern			trait tr_intern 
tr_intern for ast			impl tr_intern for ast::DefId 
tr_intern_def_id			    pub fn tr_intern_def_id(&self, did: ast::DefId) -> ast::DefId 
tr_span			    pub fn tr_span(&self, span: Span) -> Span 
track_anon			    fn track_anon(&self, anon: u32) 
trait_did			    pub fn trait_did(&self, cx: &ctxt) -> ast::DefId 
trait_has_default_impl			pub fn trait_has_default_impl(tcx: &ctxt, trait_def_id: DefId) -> bool 
trait_has_sized_self			fn trait_has_sized_self<'tcx>(tcx: &ty::ctxt<'tcx>,
trait_id_of_impl			pub fn trait_id_of_impl(tcx: &ctxt,
trait_impl_polarity			pub fn trait_impl_polarity<'tcx>(cx: &ctxt<'tcx>, id: ast::DefId)
trait_item			pub fn trait_item<'tcx>(cx: &ctxt<'tcx>, trait_did: ast::DefId, idx: usize)
trait_item_def_ids			pub fn trait_item_def_ids(cx: &ctxt, id: ast::DefId)
trait_item_of_item			pub fn trait_item_of_item(tcx: &ctxt, def_id: ast::DefId)
trait_items			pub fn trait_items<'tcx>(cx: &ctxt<'tcx>, trait_did: ast::DefId)
trait_of_item			pub fn trait_of_item(tcx: &ctxt, def_id: ast::DefId) -> Option<ast::DefId> 
trait_ref_contains_error			pub fn trait_ref_contains_error(tref: &ty::TraitRef) -> bool 
trait_ref_for_builtin_bound			pub fn trait_ref_for_builtin_bound<'tcx>(
trait_ref_is_knowable			pub fn trait_ref_is_knowable<'tcx>(tcx: &ty::ctxt<'tcx>, trait_ref: &ty::TraitRef<'tcx>) -> bool
trait_ref_to_def_id			pub fn trait_ref_to_def_id(tcx: &ctxt, tr: &ast::TraitRef) -> ast::DefId 
trait_ref_to_string			    pub fn trait_ref_to_string(&self, t: &ty::TraitRef<'tcx>) -> String 
traits			    pub mod traits;
trans_empty			    pub fn trans_empty() -> Substs<'tcx> 
trans_stats			    pub fn trans_stats(&self) -> bool { self.opts.debugging_opts.trans_stats }
transitive_bounds			pub fn transitive_bounds<'cx, 'tcx>(tcx: &'cx ty::ctxt<'tcx>,
translate_def_id			pub fn translate_def_id(cdata: Cmd, did: ast::DefId) -> ast::DefId 
translated_def_id			fn translated_def_id(cdata: Cmd, d: rbml::Doc) -> ast::DefId 
truncate			    pub fn truncate(&mut self, space: ParamSpace, len: usize) 
try_add_builtin_trait			pub fn try_add_builtin_trait(
tup_fields			pub fn tup_fields<'tcx>(v: &[Ty<'tcx>]) -> Vec<field<'tcx>> 
ty			    pub mod ty;
ty_abbrev			pub struct ty_abbrev 
ty_dtor			pub fn ty_dtor(cx: &ctxt, struct_id: DefId) -> DtorKind 
ty_fn_abi			pub fn ty_fn_abi(fty: Ty) -> abi::Abi 
ty_fn_args			pub fn ty_fn_args<'tcx>(fty: Ty<'tcx>) -> ty::Binder<Vec<Ty<'tcx>>> 
ty_fn_ret			pub fn ty_fn_ret<'tcx>(fty: Ty<'tcx>) -> Binder<FnOutput<'tcx>> 
ty_fn_sig			pub fn ty_fn_sig<'tcx>(fty: Ty<'tcx>) -> &'tcx PolyFnSig<'tcx> 
ty_fold			    pub mod ty_fold;
ty_fold::TypeFolder for FullTypeResolver			impl<'a, 'tcx> ty_fold::TypeFolder<'tcx> for FullTypeResolver<'a, 'tcx> 
ty_fold::TypeFolder for Generalizer			impl<'cx, 'tcx> ty_fold::TypeFolder<'tcx> for Generalizer<'cx, 'tcx> 
ty_fold::TypeFolder for OpportunisticTypeResolver			impl<'a, 'tcx> ty_fold::TypeFolder<'tcx> for OpportunisticTypeResolver<'a, 'tcx> 
ty_for_param			    fn ty_for_param(&self, p: ty::ParamTy, source_ty: Ty<'tcx>) -> Ty<'tcx> 
ty_is_local			fn ty_is_local<'tcx>(tcx: &ty::ctxt<'tcx>, ty: Ty<'tcx>, infer_is_local: InferIsLocal) -> bool
ty_is_local_constructor			fn ty_is_local_constructor<'tcx>(tcx: &ty::ctxt<'tcx>,
ty_match			    pub mod ty_match;
ty_region			pub fn ty_region(tcx: &ctxt,
ty_relate			    pub mod ty_relate;
ty_sort_string			pub fn ty_sort_string(cx: &ctxt, ty: Ty) -> String 
ty_str_ctxt			    fn ty_str_ctxt<'a>(&'a self) -> tyencode::ctxt<'a, 'tcx>;
ty_str_ctxt			    fn ty_str_ctxt<'b>(&'b self) -> tyencode::ctxt<'b, 'tcx> 
ty_to_def_id			pub fn ty_to_def_id(ty: Ty) -> Option<ast::DefId> 
ty_to_string			    pub fn ty_to_string(&self, t: Ty<'tcx>) -> String 
ty_walk			    pub mod ty_walk;
tydecode			pub mod tydecode;
tyencode			pub mod tyencode;
type_content			pub fn type_content<'tcx>(ty: Ty<'tcx>) -> Ty<'tcx> 
type_contents			pub fn type_contents<'tcx>(cx: &ctxt<'tcx>, ty: Ty<'tcx>) -> TypeContents 
type_err			pub enum type_err<'tcx> 
type_error_message			    pub fn type_error_message<M>(&self,
type_error_message_str			    pub fn type_error_message_str<M>(&self,
type_error_message_str_with_expected			    pub fn type_error_message_str_with_expected<M>(&self,
type_escapes_depth			pub fn type_escapes_depth(ty: Ty, depth: u32) -> bool 
type_for_def			    pub fn type_for_def(&self, ty_param_def: &ty::TypeParameterDef) -> Ty<'tcx> 
type_has_erasable_regions			pub fn type_has_erasable_regions(ty: Ty) -> bool 
type_has_escaping_regions			pub fn type_has_escaping_regions(ty: Ty) -> bool 
type_has_params			pub fn type_has_params(ty: Ty) -> bool 
type_has_projection			pub fn type_has_projection(ty: Ty) -> bool 
type_has_self			pub fn type_has_self(ty: Ty) -> bool 
type_has_ty_closure			pub fn type_has_ty_closure(ty: Ty) -> bool 
type_has_ty_infer			pub fn type_has_ty_infer(ty: Ty) -> bool 
type_impls_bound			fn type_impls_bound<'a,'tcx>(param_env: Option<&ParameterEnvironment<'a,'tcx>>,
type_is_bare_fn			pub fn type_is_bare_fn(ty: Ty) -> bool 
type_is_bare_fn_item			pub fn type_is_bare_fn_item(ty: Ty) -> bool 
type_is_bool			pub fn type_is_bool(ty: Ty) -> bool { ty.sty == TyBool }
type_is_c_like_enum			pub fn type_is_c_like_enum(cx: &ctxt, ty: Ty) -> bool 
type_is_char			pub fn type_is_char(ty: Ty) -> bool 
type_is_empty			pub fn type_is_empty(cx: &ctxt, ty: Ty) -> bool 
type_is_error			pub fn type_is_error(ty: Ty) -> bool 
type_is_floating_point			pub fn type_is_floating_point(ty: Ty) -> bool 
type_is_fp			pub fn type_is_fp(ty: Ty) -> bool 
type_is_fresh			pub fn type_is_fresh(ty: Ty) -> bool 
type_is_global			pub fn type_is_global(ty: Ty) -> bool 
type_is_integral			pub fn type_is_integral(ty: Ty) -> bool 
type_is_machine			pub fn type_is_machine(ty: Ty) -> bool 
type_is_nil			pub fn type_is_nil(ty: Ty) -> bool 
type_is_numeric			pub fn type_is_numeric(ty: Ty) -> bool 
type_is_region_ptr			pub fn type_is_region_ptr(ty: Ty) -> bool 
type_is_scalar			pub fn type_is_scalar(ty: Ty) -> bool 
type_is_self			pub fn type_is_self(ty: Ty) -> bool 
type_is_signed			pub fn type_is_signed(ty: Ty) -> bool 
type_is_simd			pub fn type_is_simd(cx: &ctxt, ty: Ty) -> bool 
type_is_sized			pub fn type_is_sized<'a,'tcx>(param_env: Option<&ParameterEnvironment<'a,'tcx>>,
type_is_sized_uncached			fn type_is_sized_uncached<'a,'tcx>(param_env: Option<&ParameterEnvironment<'a,'tcx>>,
type_is_slice			fn type_is_slice(ty: Ty) -> bool 
type_is_structural			pub fn type_is_structural(ty: Ty) -> bool 
type_is_trait			pub fn type_is_trait(ty: Ty) -> bool 
type_is_ty_var			pub fn type_is_ty_var(ty: Ty) -> bool 
type_is_uint			pub fn type_is_uint(ty: Ty) -> bool 
type_is_unconstrained_numeric			    pub fn type_is_unconstrained_numeric(&'a self, ty: Ty) -> UnconstrainedNumeric 
type_is_unique			pub fn type_is_unique(ty: Ty) -> bool 
type_is_unsafe_function			fn type_is_unsafe_function(ty: Ty) -> bool 
type_is_unsafe_ptr			pub fn type_is_unsafe_ptr(ty: Ty) -> bool 
type_known_to_meet_builtin_bound			pub fn type_known_to_meet_builtin_bound<'a,'tcx>(infcx: &InferCtxt<'a,'tcx>,
type_moves_by_default			    fn type_moves_by_default(&self, span: Span, ty: Ty<'tcx>) -> bool;
type_moves_by_default			    fn type_moves_by_default(&self, span: Span, ty: Ty<'tcx>) -> bool 
type_moves_by_default			pub fn type_moves_by_default<'a,'tcx>(param_env: &ParameterEnvironment<'a,'tcx>,
type_needs_infer			pub fn type_needs_infer(ty: Ty) -> bool 
type_needs_subst			pub fn type_needs_subst(ty: Ty) -> bool 
type_parameter_def			    pub fn type_parameter_def(&self,
type_requires			    fn type_requires<'tcx>(cx: &ctxt<'tcx>, seen: &mut Vec<DefId>,
type_string			        fn type_string(doc: rbml::Doc) -> String 
type_var_diverges			    pub fn type_var_diverges(&'a self, ty: Ty) -> bool 
type_variable			pub mod type_variable;
types			    pub fn types(origin: TypeOrigin,
types_escaping_snapshot			    pub fn types_escaping_snapshot(&self, s: &Snapshot) -> Vec<Ty<'tcx>> 
tys			    fn tys(&mut self, a: Ty<'tcx>, b: Ty<'tcx>) -> RelateResult<'tcx, Ty<'tcx>> 
tys			    fn tys(&mut self, a: Ty<'tcx>, b: Ty<'tcx>) -> RelateResult<'tcx, Ty<'tcx>> 
tys			    fn tys(&mut self, a: Ty<'tcx>, b: Ty<'tcx>) -> RelateResult<'tcx, Ty<'tcx>> 
tys			    fn tys(&mut self, a: Ty<'tcx>, b: Ty<'tcx>) -> RelateResult<'tcx, Ty<'tcx>> 
tys			    fn tys(&mut self, a: Ty<'tcx>, b: Ty<'tcx>) -> RelateResult<'tcx, Ty<'tcx>> 
tys			    fn tys(&mut self, a: Ty<'tcx>, b: Ty<'tcx>) -> RelateResult<'tcx, Ty<'tcx>> 
tys			    fn tys(&mut self, a: Ty<'tcx>, b: Ty<'tcx>)
tys_to_string			    pub fn tys_to_string(&self, ts: &[Ty<'tcx>]) -> String 
u32_from_be_bytes			fn u32_from_be_bytes(bytes: &[u8]) -> u32 
u64_to_disr			    fn u64_to_disr(&self, val: u64) -> Option<Disr> 
u64_to_disr			    fn u64_to_disr(&self, val: u64) -> Option<Disr>;
uncovered_tys			fn uncovered_tys<'tcx>(tcx: &ty::ctxt<'tcx>,
unify_float_variable			fn unify_float_variable<'a,'tcx>(infcx: &InferCtxt<'a,'tcx>,
unify_integral_variable			fn unify_integral_variable<'a,'tcx>(infcx: &InferCtxt<'a,'tcx>,
unify_key			pub mod unify_key;
unimpl			    pub fn unimpl(&self, msg: &str) -> ! 
union			    pub fn union<T, F>(v: &[T], mut f: F) -> TypeContents where
unresolved_lifetime_ref			    fn unresolved_lifetime_ref(&self, lifetime_ref: &ast::Lifetime) 
unsafe_pointer			    pub fn unsafe_pointer(&self) -> TypeContents 
unstable			    fn unstable(g: getopts::OptGroup) -> R { RustcOptGroup::unstable(g) }
unstable			    fn unstable(g: getopts::OptGroup) -> RustcOptGroup 
unstable_options			    pub fn unstable_options(&self) -> bool 
unwrap			    pub fn unwrap(self) -> Ty<'tcx> 
unwrap_or			    pub fn unwrap_or(self, def: Ty<'tcx>) -> Ty<'tcx> 
upcast			    fn upcast(&mut self, obj_trait_ref: ty::PolyTraitRef<'tcx>, obligation: &TraitObligation<'tcx>)
upcast			pub fn upcast<'tcx>(tcx: &ty::ctxt<'tcx>,
update_recursion_limit			pub fn update_recursion_limit(sess: &Session, krate: &ast::Crate) 
upvar			    pub fn upvar(&self) -> Option<cmt<'tcx>> 
upvar_capture			    fn upvar_capture(&self, upvar_id: ty::UpvarId) -> Option<ty::UpvarCapture>;
upvar_capture			    fn upvar_capture(&self, upvar_id: ty::UpvarId) -> Option<ty::UpvarCapture> 
upvar_capture			    pub fn upvar_capture(&self, upvar_id: ty::UpvarId) -> Option<ty::UpvarCapture> 
used_on_entry			    fn used_on_entry(&self, ln: LiveNode, var: Variable) -> bool 
util			pub mod util 
util			mod util;
validate_crate_name			pub fn validate_crate_name(sess: Option<&Session>, s: &str, sp: Option<Span>) 
values_are_none			    fn values_are_none(&self) -> bool 
values_str			    fn values_str(&self, values: &ValuePairs<'tcx>) -> Option<String> 
values_str			    fn values_str(&self, values: &ValuePairs<'tcx>) -> Option<String>;
var_diverges			    pub fn var_diverges<'a>(&'a self, vid: ty::TyVid) -> bool 
var_ids			fn var_ids<'a, 'tcx>(fields: &CombineFields<'a, 'tcx>,
var_region			    pub fn var_region(&self, id: ast::NodeId) -> ty::Region 
var_scope			    pub fn var_scope(&self, var_id: ast::NodeId) -> CodeExtent 
variable			    fn variable(&self, node_id: NodeId, span: Span) -> Variable 
variable_name			    fn variable_name(&self, var: Variable) -> String 
variadic			    pub fn variadic(&self) -> bool 
variant_def_ids			    pub fn variant_def_ids(&self) -> Option<(ast::DefId, ast::DefId)> 
variant_disr_val			fn variant_disr_val(d: rbml::Doc) -> Option<ty::Disr> 
variant_expr			    fn variant_expr<'a>(variants: &'a [P<ast::Variant>], id: ast::NodeId)
vars_created_since_snapshot			    pub fn vars_created_since_snapshot(&self, mark: &RegionSnapshot)
vec_slice_info			        fn vec_slice_info(tcx: &ty::ctxt,
verbose			    pub fn verbose(&self) -> bool { self.opts.debugging_opts.verbose }
verbose			pub fn verbose() -> bool 
verify			fn verify(sess: &Session, items: &lang_items::LanguageItems) 
verify_generic_bound			    pub fn verify_generic_bound(&self,
verify_generic_bound			    pub fn verify_generic_bound(&self,
virtual_call_violation_for_method			fn virtual_call_violation_for_method<'tcx>(tcx: &ty::ctxt<'tcx>,
vis			    pub fn vis(&self) -> ast::Visibility 
visit			        fn visit(cstore: &CStore, cnum: ast::CrateNum,
visit::Visitor for CrateReader			impl<'a, 'v> visit::Visitor<'v> for CrateReader<'a> 
visit::Visitor for Formals			        impl<'a, 'v> visit::Visitor<'v> for Formals<'a> 
visit::Visitor for RvalueContext			impl<'a, 'tcx, 'v> visit::Visitor<'v> for RvalueContext<'a, 'tcx> 
visit_arm			    fn visit_arm(&mut self, a: &ast::Arm) 
visit_arm			    fn visit_arm(&mut self, arm: &ast::Arm) 
visit_arm			    fn visit_arm(&mut self, a: &ast::Arm) { visit_arm(self, a); }
visit_arm			    fn visit_arm(&mut self, a: &ast::Arm) 
visit_arm			fn visit_arm(ir: &mut IrMaps, arm: &ast::Arm) 
visit_arm			    fn visit_arm(&mut self, a: &Arm) 
visit_attribute			    fn visit_attribute(&mut self, attr: &ast::Attribute) 
visit_block			    fn visit_block(&mut self, block: &'ast Block) 
visit_block			    fn visit_block(&mut self, b: &ast::Block) 
visit_block			    fn visit_block(&mut self, block: &ast::Block) 
visit_block			    fn visit_block(&mut self, block: &ast::Block) 
visit_block			    fn visit_block(&mut self, b: &Block) 
visit_block			    fn visit_block(&mut self, b: &ast::Block) 
visit_decl			    fn visit_decl(&mut self, d: &ast::Decl) 
visit_early_late			    fn visit_early_late<F>(&mut self,
visit_explicit_self			    fn visit_explicit_self(&mut self, es: &ast::ExplicitSelf) 
visit_expr			    fn visit_expr(&mut self, expr: &'ast Expr) 
visit_expr			    fn visit_expr(&mut self, e: &ast::Expr) 
visit_expr			    fn visit_expr(&mut self, ex: &ast::Expr) 
visit_expr			    fn visit_expr(&mut self, ex: &ast::Expr) 
visit_expr			    fn visit_expr(&mut self, e: &ast::Expr) 
visit_expr			    fn visit_expr(&mut self, ex: &ast::Expr) 
visit_expr			    fn visit_expr(&mut self, e: &ast::Expr) 
visit_expr			    fn visit_expr(&mut self, expr: &ast::Expr) 
visit_expr			    fn visit_expr(&mut self, expr: &ast::Expr) 
visit_expr			    fn visit_expr(&mut self, expr: &ast::Expr) 
visit_expr			    fn visit_expr(&mut self, ex: &Expr) { visit_expr(self, ex); }
visit_expr			    fn visit_expr(&mut self, ex: &Expr) 
visit_expr			fn visit_expr(ir: &mut IrMaps, expr: &Expr) 
visit_expr			    fn visit_expr(&mut self, expr: &ast::Expr) 
visit_expr			    fn visit_expr(&mut self, ex: &Expr) 
visit_expr			        fn visit_expr(&mut self, ex: &'v ast::Expr) 
visit_expr			    fn visit_expr(&mut self, ex: &ast::Expr) 
visit_expr			    fn visit_expr(&mut self, e: &ast::Expr) 
visit_expr_post			    fn visit_expr_post(&mut self, e: &ast::Expr) 
visit_fn			    fn visit_fn(&mut self, fk: visit::FnKind<'ast>, fd: &'ast FnDecl,
visit_fn			    fn visit_fn(&mut self, fk: FnKind<'v>, decl: &'v ast::FnDecl,
visit_fn			    fn visit_fn(&mut self,
visit_fn			    fn visit_fn(&mut self, fk: FnKind<'v>, fd: &'v ast::FnDecl,
visit_fn			    fn visit_fn(&mut self,
visit_fn			    fn visit_fn(&mut self, fn_kind: visit::FnKind<'v>, fn_decl: &'v ast::FnDecl,
visit_fn			    fn visit_fn(&mut self, fk: visit::FnKind<'v>, fd: &'v ast::FnDecl,
visit_fn			    fn visit_fn(&mut self, fk: FnKind<'v>, fd: &'v ast::FnDecl,
visit_fn			fn visit_fn(ir: &mut IrMaps,
visit_fn			    fn visit_fn(&mut self, fk: FnKind<'v>, fd: &'v FnDecl,
visit_fn			    fn visit_fn(&mut self, fk: visit::FnKind<'v>, fd: &'v ast::FnDecl,
visit_fn			    fn visit_fn(&mut self, _: FnKind<'v>, _: &'v FnDecl,
visit_fn_decl			    fn visit_fn_decl(&mut self, decl: &'ast FnDecl) 
visit_foreign_item			    fn visit_foreign_item(&mut self, it: &ast::ForeignItem) 
visit_foreign_item			    fn visit_foreign_item(&mut self, ni: &ast::ForeignItem) 
visit_foreign_item			    fn visit_foreign_item(&mut self, fi: &ast::ForeignItem) 
visit_foreign_item			    fn visit_foreign_item(&mut self, i: &ast::ForeignItem) 
visit_foreign_item			    fn visit_foreign_item(&mut self, i: &ast::ForeignItem) 
visit_generics			    fn visit_generics(&mut self, g: &ast::Generics) 
visit_generics			    fn visit_generics(&mut self, generics: &ast::Generics) 
visit_id			    fn visit_id(&mut self, id: ast::NodeId) 
visit_id			    fn visit_id(&mut self, id: ast::NodeId) 
visit_id			    fn visit_id(&mut self, node_id: NodeId) 
visit_ident			    fn visit_ident(&mut self, sp: Span, id: ast::Ident) 
visit_ids			    fn visit_ids<F>(&mut self, f: F) where
visit_impl_item			    fn visit_impl_item(&mut self, ii: &'ast ImplItem) 
visit_impl_item			    fn visit_impl_item(&mut self, impl_item: &ast::ImplItem) 
visit_impl_item			    fn visit_impl_item(&mut self, i: &'v ast::ImplItem) 
visit_impl_item			    fn visit_impl_item(&mut self, ii: &ast::ImplItem) 
visit_impl_item			    fn visit_impl_item(&mut self, impl_item: &ast::ImplItem) 
visit_impl_item			    fn visit_impl_item(&mut self, ii: &ast::ImplItem) 
visit_item			    fn visit_item(&mut self, i: &'ast Item) 
visit_item			    fn visit_item(&mut self, it: &ast::Item) 
visit_item			    fn visit_item(&mut self, a: &ast::Item) 
visit_item			    fn visit_item(&mut self, i: &ast::Item) 
visit_item			    fn visit_item(&mut self, item: &ast::Item) 
visit_item			    fn visit_item(&mut self, item: &ast::Item) 
visit_item			    fn visit_item(&mut self, i: &ast::Item) 
visit_item			    fn visit_item(&mut self, i: &ast::Item) 
visit_item			    fn visit_item(&mut self, it: &ast::Item) 
visit_item			    fn visit_item(&mut self, _: &ast::Item) 
visit_item			    fn visit_item(&mut self, item: &ast::Item) 
visit_item			    fn visit_item(&mut self, item: &Item) 
visit_item			    fn visit_item(&mut self, item: &ast::Item) 
visit_item			    fn visit_item(&mut self, _item: &ast::Item) 
visit_item			    fn visit_item(&mut self, i: &Item) 
visit_item			        fn visit_item(&mut self, _: &ast::Item) 
visit_item			    fn visit_item(&mut self, item: &ast::Item) 
visit_item			    fn visit_item(&mut self, i: &Item) 
visit_item			    fn visit_item(&mut self, item: &ast::Item) 
visit_item			    fn visit_item(&mut self, item: &ast::Item) 
visit_lifetime_def			    fn visit_lifetime_def(&mut self, def: &'ast LifetimeDef) 
visit_lifetime_def			    fn visit_lifetime_def(&mut self, lt: &ast::LifetimeDef) 
visit_lifetime_ref			    fn visit_lifetime_ref(&mut self, lifetime: &'ast Lifetime) 
visit_lifetime_ref			    fn visit_lifetime_ref(&mut self, lt: &ast::Lifetime) 
visit_lifetime_ref			        fn visit_lifetime_ref(&mut self, lifetime_ref: &ast::Lifetime) 
visit_lifetime_ref			    fn visit_lifetime_ref(&mut self, lifetime_ref: &ast::Lifetime) 
visit_local			    fn visit_local(&mut self, l: &ast::Local) 
visit_local			    fn visit_local(&mut self, l: &ast::Local) 
visit_local			    fn visit_local(&mut self, l: &ast::Local) { visit_local(self, l); }
visit_local			    fn visit_local(&mut self, l: &ast::Local) 
visit_local			fn visit_local(ir: &mut IrMaps, local: &ast::Local) 
visit_local			    fn visit_local(&mut self, l: &Local) 
visit_mac			    fn visit_mac(&mut self, mac: &ast::Mac) 
visit_mac			    fn visit_mac(&mut self, _: &ast::Mac) 
visit_mod			    fn visit_mod(&mut self, m: &ast::Mod, s: Span, n: ast::NodeId) 
visit_node			    fn visit_node(&mut self, node: &ast_map::Node) 
visit_opt_lifetime_ref			    fn visit_opt_lifetime_ref(&mut self, sp: Span, lt: &Option<ast::Lifetime>) 
visit_pat			    fn visit_pat(&mut self, pat: &'ast Pat) 
visit_pat			    fn visit_pat(&mut self, p: &ast::Pat) 
visit_pat			    fn visit_pat(&mut self, p: &ast::Pat) 
visit_pat			    fn visit_pat(&mut self, pat: &Pat) 
visit_pat			            fn visit_pat(&mut self, p: &ast::Pat) 
visit_pat			    fn visit_pat(&mut self, pat: &ast::Pat) 
visit_pat			    fn visit_pat(&mut self, p: &Pat) 
visit_pat			    fn visit_pat(&mut self, pat: &ast::Pat) 
visit_path			    fn visit_path(&mut self, p: &ast::Path, id: ast::NodeId) 
visit_path			    fn visit_path(&mut self, path: &ast::Path, id: ast::NodeId) 
visit_path			    fn visit_path(&mut self, path: &ast::Path, id: ast::NodeId) 
visit_poly_trait_ref			    fn visit_poly_trait_ref(&mut self,
visit_stmt			    fn visit_stmt(&mut self, stmt: &'ast Stmt) 
visit_stmt			    fn visit_stmt(&mut self, s: &ast::Stmt) 
visit_stmt			    fn visit_stmt(&mut self, s: &Stmt) 
visit_struct_def			    fn visit_struct_def(&mut self,
visit_struct_def			    fn visit_struct_def(&mut self, def: &ast::StructDef, _: ast::Ident,
visit_struct_field			    fn visit_struct_field(&mut self, s: &ast::StructField) 
visit_struct_field			        fn visit_struct_field(&mut self, field: &ast::StructField) 
visit_struct_field			    fn visit_struct_field(&mut self, field: &ast::StructField) 
visit_struct_field			    fn visit_struct_field(&mut self, s: &StructField) 
visit_trait_item			    fn visit_trait_item(&mut self, ti: &'ast TraitItem) 
visit_trait_item			    fn visit_trait_item(&mut self, trait_item: &ast::TraitItem) 
visit_trait_item			    fn visit_trait_item(&mut self, t: &'v ast::TraitItem) 
visit_trait_item			    fn visit_trait_item(&mut self, ti: &ast::TraitItem) 
visit_trait_item			    fn visit_trait_item(&mut self, trait_item: &ast::TraitItem) 
visit_trait_item			    fn visit_trait_item(&mut self, trait_item: &ast::TraitItem) 
visit_trait_item			    fn visit_trait_item(&mut self, ti: &ast::TraitItem) 
visit_ty			    fn visit_ty(&mut self, ty: &'ast Ty) 
visit_ty			    fn visit_ty(&mut self, t: &ast::Ty) 
visit_ty			    fn visit_ty(&mut self, ty: &ast::Ty) 
visit_variant			    fn visit_variant(&mut self, v: &ast::Variant, g: &ast::Generics) 
visit_variant			    fn visit_variant(&mut self, var: &Variant, g: &'v Generics) 
vtable_builtin_data			    fn vtable_builtin_data(&mut self,
vtable_decoder_helpers			pub trait vtable_decoder_helpers<'tcx> 
vtable_decoder_helpers for reader			impl<'tcx, 'a> vtable_decoder_helpers<'tcx> for reader::Decoder<'a> 
vtable_default_impl			    fn vtable_default_impl(&mut self,
vtable_impl			    fn vtable_impl(&mut self,
walk			    pub fn walk(&'tcx self) -> TypeWalker<'tcx> 
walk_adjustment			    fn walk_adjustment(&mut self, expr: &ast::Expr) 
walk_arg_patterns			    fn walk_arg_patterns(&mut self,
walk_arm			    fn walk_arm(&mut self, discr_cmt: mc::cmt<'tcx>, arm: &ast::Arm, mode: MatchMode) 
walk_autoderefref			    fn walk_autoderefref(&mut self,
walk_autoderefs			    fn walk_autoderefs(&mut self,
walk_autoref			    fn walk_autoref(&mut self,
walk_block			    fn walk_block(&mut self, blk: &ast::Block) 
walk_callee			    fn walk_callee(&mut self, call: &ast::Expr, callee: &ast::Expr) 
walk_captures			    fn walk_captures(&mut self, closure_expr: &ast::Expr) 
walk_cfg			    fn walk_cfg(&mut self,
walk_expr			    pub fn walk_expr(&mut self, expr: &ast::Expr) 
walk_fn			    pub fn walk_fn(&mut self,
walk_fn			    fn walk_fn<'b>(&mut self,
walk_irrefutable_pat			    fn walk_irrefutable_pat(&mut self, cmt_discr: mc::cmt<'tcx>, pat: &ast::Pat) 
walk_local			    fn walk_local(&mut self, local: &ast::Local) 
walk_overloaded_operator			    fn walk_overloaded_operator(&mut self,
walk_pat			    fn walk_pat(&mut self,
walk_shallow			    pub fn walk_shallow(&'tcx self) -> IntoIter<Ty<'tcx>> 
walk_shallow			pub fn walk_shallow<'tcx>(ty: Ty<'tcx>) -> IntoIter<Ty<'tcx>> 
walk_stmt			    fn walk_stmt(&mut self, stmt: &ast::Stmt) 
walk_struct_expr			    fn walk_struct_expr(&mut self,
walk_ty			pub fn walk_ty<'tcx, F>(ty_root: Ty<'tcx>, mut f: F)
walk_tys			    pub fn walk_tys(&self) -> IntoIter<Ty<'tcx>> 
warn			    pub fn warn(&self, msg: &str) 
warn_about_dead_assign			    fn warn_about_dead_assign(&self,
warn_about_unused			    fn warn_about_unused(&self,
warn_about_unused_args			    fn warn_about_unused_args(&self, decl: &ast::FnDecl, entry_ln: LiveNode) 
warn_about_unused_or_dead_vars_in_pat			    fn warn_about_unused_or_dead_vars_in_pat(&mut self, pat: &ast::Pat) 
warn_dead_code			    fn warn_dead_code(&mut self,
weak_lang_items			    pub mod weak_lang_items;
when			    pub fn when(&self, cond: bool) -> TypeContents 
will_change			    fn will_change(&mut self, _: bool, _: bool) -> bool 
will_change			    fn will_change(&mut self, a: bool, b: bool) -> bool 
will_change			    fn will_change(&mut self, a: bool, b: bool) -> bool 
will_change			    fn will_change(&mut self, a: bool, b: bool) -> bool 
will_change			    fn will_change(&mut self, a: bool, b: bool) -> bool 
will_change			    fn will_change(&mut self, _: bool, _: bool) -> bool 
will_change			    fn will_change(&mut self, a: bool, b: bool) -> bool;
winnow_candidate			    fn winnow_candidate<'o>(&mut self,
winnow_selection			    fn winnow_selection<'o>(&mut self,
with			    fn with<F>(&mut self, wrap_scope: ScopeChain, f: F) where
with			    pub fn with<P>(&self, value: P) -> Obligation<'tcx,P> 
with			    pub fn with<U>(self, value: U) -> Normalized<'tcx,U> 
with			    fn with(r: &'o TraitObligationStack<'o,'tcx>) -> TraitObligationStackList<'o,'tcx> 
with			    pub fn with<F: FnOnce(&ty::ctxt) -> R, R>(f: F) -> R 
with_caller_bounds			    pub fn with_caller_bounds(&self,
with_cause			    fn with_cause<F,R>(&mut self, cause: Cause, f: F) -> R
with_cause			    fn with_cause<F,R>(&mut self, _cause: Cause, f: F) -> R
with_context			    fn with_context<F>(&mut self, cx: Context, f: F) where
with_ctxt			pub fn with_ctxt<'tcx, F, R>(s: Session,
with_depth			    fn with_depth(cause: ObligationCause<'tcx>,
with_each_combination			    fn with_each_combination(&self,
with_euv			    fn with_euv<'b, F, R>(&'b mut self, item_id: Option<ast::NodeId>, f: F) -> R where
with_extension			    pub fn with_extension(&self, extension: &str) -> PathBuf 
with_freevars			pub fn with_freevars<T, F>(tcx: &ty::ctxt, fid: ast::NodeId, f: F) -> T where
with_item_id_pushed			    fn with_item_id_pushed<F>(&mut self, id: ast::NodeId, f: F)
with_lint_attrs			    fn with_lint_attrs<F>(&mut self,
with_loop_nodes			    fn with_loop_nodes<R, F>(&mut self,
with_method			    pub fn with_method(self,
with_mode			    fn with_mode<F, R>(&mut self, mode: Mode, f: F) -> R where
with_path			    pub fn with_path<T, F>(&self, id: NodeId, f: F) -> T where
with_path			pub fn with_path<T, F>(cx: &ctxt, id: ast::DefId, f: F) -> T where
with_path_next			    fn with_path_next<T, F>(&self, id: NodeId, next: LinkedPath, f: F) -> T where
with_self_ty			    pub fn with_self_ty(&self, self_ty: Ty<'tcx>) -> Substs<'tcx> 
with_taken			    fn with_taken(taken: &[ast::LifetimeDef]) -> LifeGiver 
with_vec			    pub fn with_vec(mut self, space: ParamSpace, vec: Vec<T>)
write			    fn write(&mut self, bytes: &[u8]) 
write_be_u32			fn write_be_u32(w: &mut Write, u: u32) 
write_closure_type			pub fn write_closure_type<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,
write_i64			fn write_i64(writer: &mut Cursor<Vec<u8>>, &n: &i64) 
write_lvalue			    fn write_lvalue(&mut self, expr: &Expr, succ: LiveNode, acc: u32)
write_region			pub fn write_region(ecx: &EncodeContext,
write_tag_and_id			trait write_tag_and_id 
write_tag_and_id for Encoder			impl<'a> write_tag_and_id for Encoder<'a> 
write_trait_ref			pub fn write_trait_ref<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,
write_type			pub fn write_type<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,
write_vars			    fn write_vars<F>(&self,
