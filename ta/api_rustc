AShr			pub fn AShr(cx: &Block, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
Add			pub fn Add(cx: &Block, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
AddCase			pub fn AddCase(s: ValueRef, on_val: ValueRef, dest: BasicBlockRef) 
AddIncomingToPhi			pub fn AddIncomingToPhi(phi: ValueRef, val: ValueRef, bb: BasicBlockRef) 
AggregateRet			pub fn AggregateRet(cx: &Block, ret_vals: &[ValueRef]) 
AliasableReason			pub enum AliasableReason 
AliasableViolationKind			pub enum AliasableViolationKind 
AllBuiltinBounds			pub fn AllBuiltinBounds() -> BuiltinBounds 
Alloca			pub fn Alloca(cx: &Block, ty: Type, name: &str) -> ValueRef 
AllocaFcx			pub fn AllocaFcx(fcx: &FunctionContext, ty: Type, name: &str) -> ValueRef 
Allocation			enum Allocation 
And			pub fn And(cx: &Block, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
AnnotateFreevarsVisitor			struct AnnotateFreevarsVisitor 
Archive			pub struct Archive<'a> 
ArchiveMetadata			impl ArchiveMetadata 
ArchiveMetadata			pub struct ArchiveMetadata 
ArchiveRO			impl ArchiveRO 
ArchiveRO			pub struct ArchiveRO 
Archive_opaque			pub enum Archive_opaque {}
ArgKind			pub enum ArgKind 
ArgType			impl ArgType 
ArgType			pub struct ArgType 
ArmData			struct ArmData<'a,'b> 
ArrayAlloca			pub fn ArrayAlloca(cx: &Block, ty: Type, val: ValueRef) -> ValueRef 
ArrayMalloc			pub fn ArrayMalloc(cx: &Block, ty: Type, val: ValueRef) -> ValueRef 
AsmDialect			pub enum AsmDialect 
AssignDataFlowOperator			pub struct AssignDataFlowOperator;
Assignment			pub struct Assignment 
AstConv			pub trait AstConv 
AstRenumberer			struct AstRenumberer<'a> 
AtomicBinOp			pub enum AtomicBinOp 
AtomicCmpXchg			pub fn AtomicCmpXchg(cx: &Block, dst: ValueRef,
AtomicFence			pub fn AtomicFence(cx: &Block, order: AtomicOrdering) 
AtomicLoad			pub fn AtomicLoad(cx: &Block, pointer_val: ValueRef, order: AtomicOrdering) -> ValueRef 
AtomicOrdering			pub enum AtomicOrdering 
AtomicRMW			pub fn AtomicRMW(cx: &Block, op: AtomicBinOp,
AtomicStore			pub fn AtomicStore(cx: &Block, val: ValueRef, ptr: ValueRef, order: AtomicOrdering) 
Attribute			pub enum Attribute 
AutoAdjustment			pub enum AutoAdjustment 
AutoDerefRef			pub struct AutoDerefRef 
AutoRef			impl AutoRef 
AutoRef			pub enum AutoRef 
AutoderefReceiverFlag			pub enum AutoderefReceiverFlag 
AutorefArg			pub enum AutorefArg 
B			pub fn B<'a>(cx: &'a Block) -> Builder<'a> 
Bar			    struct Bar { foo: Foo  }
BareFnTy			pub struct BareFnTy 
BareIdentifierPatternResolution			enum BareIdentifierPatternResolution 
BasicBlock			impl BasicBlock 
BasicBlock			pub struct BasicBlock(BasicBlockRef);
BasicBlock_opaque			pub enum BasicBlock_opaque {}
BasicBlocks			pub struct BasicBlocks 
BckError			pub struct BckError 
BinOp			pub fn BinOp(cx: &Block, op: Opcode, lhs: ValueRef, rhs: ValueRef)
BindingInfo			struct BindingInfo 
BindingRscope			impl BindingRscope 
BindingRscope			pub struct BindingRscope 
BitAnd			impl BitAnd<RestrictionSet,RestrictionSet> for RestrictionSet 
BitCast			pub fn BitCast(cx: &Block, val: ValueRef, dest_ty: Type) -> ValueRef 
BitOr			impl BitOr<RestrictionSet,RestrictionSet> for RestrictionSet 
Block			pub struct Block<'a> 
BlockQueryVisitor			struct BlockQueryVisitor<'a> 
BorrowKind			impl BorrowKind 
BorrowKind			pub enum BorrowKind 
BorrowStats			pub struct BorrowStats 
BorrowckCtxt			pub struct BorrowckCtxt<'a> 
BottomUpFolder			pub struct BottomUpFolder<'a> 
BoundRegion			pub enum BoundRegion 
Bounds			pub struct Bounds<T> 
Br			pub fn Br(cx: &Block, dest: BasicBlockRef) 
BuildReducedGraphVisitor			struct BuildReducedGraphVisitor<'a, 'b> 
Builder			pub struct Builder<'a> 
BuilderRef_res			pub fn BuilderRef_res(b: BuilderRef) -> BuilderRef_res 
BuilderRef_res			pub struct BuilderRef_res 
Builder_opaque			pub enum Builder_opaque {}
BuiltinBound			pub enum BuiltinBound 
CFG			impl CFG 
CFG			pub struct CFG 
CFGBuilder			struct CFGBuilder<'a> 
CFGEdgeData			pub struct CFGEdgeData 
CFGIndices			pub struct CFGIndices 
CFGNodeData			pub struct CFGNodeData 
CLike			impl CLike for BuiltinBound 
CStore			impl CStore 
CStore			pub struct CStore 
C_array			pub fn C_array(ty: Type, elts: &[ValueRef]) -> ValueRef 
C_binary_slice			pub fn C_binary_slice(cx: &CrateContext, data: &[u8]) -> ValueRef 
C_bool			pub fn C_bool(ccx: &CrateContext, val: bool) -> ValueRef 
C_bytes			pub fn C_bytes(ccx: &CrateContext, bytes: &[u8]) -> ValueRef 
C_cstr			pub fn C_cstr(cx: &CrateContext, s: InternedString) -> ValueRef 
C_floating			pub fn C_floating(s: &str, t: Type) -> ValueRef 
C_i1			pub fn C_i1(ccx: &CrateContext, val: bool) -> ValueRef 
C_i32			pub fn C_i32(ccx: &CrateContext, i: i32) -> ValueRef 
C_i64			pub fn C_i64(ccx: &CrateContext, i: i64) -> ValueRef 
C_int			pub fn C_int(ccx: &CrateContext, i: int) -> ValueRef 
C_integral			pub fn C_integral(t: Type, u: u64, sign_extend: bool) -> ValueRef 
C_named_struct			pub fn C_named_struct(t: Type, elts: &[ValueRef]) -> ValueRef 
C_nil			pub fn C_nil(ccx: &CrateContext) -> ValueRef 
C_null			pub fn C_null(t: Type) -> ValueRef 
C_str_slice			pub fn C_str_slice(cx: &CrateContext, s: InternedString) -> ValueRef 
C_struct			pub fn C_struct(ccx: &CrateContext, elts: &[ValueRef], packed: bool) -> ValueRef 
C_u64			pub fn C_u64(ccx: &CrateContext, i: u64) -> ValueRef 
C_u8			pub fn C_u8(ccx: &CrateContext, i: uint) -> ValueRef 
C_uint			pub fn C_uint(ccx: &CrateContext, i: uint) -> ValueRef 
C_undef			pub fn C_undef(t: Type) -> ValueRef 
CachedEarlyExit			pub struct CachedEarlyExit 
Call			pub fn Call(cx: &Block, fn_: ValueRef, args: &[ValueRef],
CallArgs			pub enum CallArgs<'a> 
CallConv			pub enum CallConv 
CallWithConv			pub fn CallWithConv(cx: &Block, fn_: ValueRef, args: &[ValueRef], conv: CallConv,
Callee			pub struct Callee<'a> 
CalleeData			pub enum CalleeData 
Candidate			struct Candidate 
CaptureInfo			struct CaptureInfo 
CaptureMode			pub enum CaptureMode 
CaptureVar			pub struct CaptureVar 
Case			impl Case 
Case			struct Case { discr: Disr, tys: Vec<ty::t> }
Cast			pub fn Cast(cx: &Block, op: Opcode, val: ValueRef, dest_ty: Type, _: *u8)
CheckCrateVisitor			pub struct CheckCrateVisitor<'a> 
CheckItemRecursionVisitor			struct CheckItemRecursionVisitor<'a> 
CheckItemTypesVisitor			struct CheckItemTypesVisitor<'a> { ccx: &'a CrateCtxt<'a> }
CheckLoanCtxt			struct CheckLoanCtxt<'a> 
CheckLoopVisitor			struct CheckLoopVisitor<'a> 
CheckStaticVisitor			struct CheckStaticVisitor<'a> 
CheckTraitsFlag			pub enum CheckTraitsFlag 
CheckTypeForPrivatenessVisitor			struct CheckTypeForPrivatenessVisitor<'a, 'b> 
ClassList			trait ClassList 
Classification			enum Classification { Expanding, Contracting }
Cleanup			impl Cleanup for DropValue 
Cleanup			impl Cleanup for FreeValue 
Cleanup			pub trait Cleanup 
CleanupHelperMethods			trait CleanupHelperMethods<'a> 
CleanupMethods			pub trait CleanupMethods<'a> 
CleanupScope			pub struct CleanupScope<'a> 
CleanupScopeKind			pub enum CleanupScopeKind<'a> 
Clone			impl Clone for LoanDataFlowOperator 
Clone			impl Clone for AssignDataFlowOperator 
Clone			impl Clone for MoveDataFlowOperator 
Clone			impl Clone for MovePathIndex 
Clone			impl Clone for LiveNode 
ClosureResult			pub struct ClosureResult<'a> 
ClosureTy			pub struct ClosureTy 
CodeGenModel			pub enum CodeGenModel 
CodeGenOptLevel			pub enum CodeGenOptLevel 
CodegenOptions			    pub struct CodegenOptions { $(pub $opt: $t),* }
Coerce			pub struct Coerce<'f>(CombineFields<'f>);
CoherenceCheckVisitor			struct CoherenceCheckVisitor<'a> 
CoherenceChecker			struct CoherenceChecker<'a> 
CollectFreevarsVisitor			struct CollectFreevarsVisitor 
CollectItemTypesVisitor			struct CollectItemTypesVisitor<'a> 
Combine			pub trait Combine 
CombineFields			pub struct CombineFields<'a> 
CombineFieldsLatticeMethods			pub trait CombineFieldsLatticeMethods 
CombineMapType			pub enum CombineMapType 
CondBr			pub fn CondBr(cx: &Block,
Config			pub struct Config 
ConstEvalVisitor			struct ConstEvalVisitor<'a> 
ConstFCmp			pub fn ConstFCmp(pred: RealPredicate, v1: ValueRef, v2: ValueRef) -> ValueRef 
ConstICmp			pub fn ConstICmp(pred: IntPredicate, v1: ValueRef, v2: ValueRef) -> ValueRef 
Constraint			pub enum Constraint 
Constraint			struct Constraint<'a> 
ConstraintContext			struct ConstraintContext<'a> 
Context			struct Context<'a> 
Context			struct Context<'a> 
Context			pub struct Context<'a> 
Context			enum Context 
Context			pub struct Context<'a> 
Context			struct Context<'a> 
Context			pub struct Context 
Context_opaque			pub enum Context_opaque {}
ConvertTo			    impl ConvertTo<int> for Object { ... }
ConvertTo			    trait ConvertTo<A> 
CopiedUpvar			pub struct CopiedUpvar 
CrateAnalysis			pub struct CrateAnalysis 
CrateContext			impl CrateContext 
CrateContext			pub struct CrateContext 
CrateCtxt			pub struct CrateCtxt<'a> 
CrateDebugContext			impl CrateDebugContext 
CrateDebugContext			pub struct CrateDebugContext 
CrateDep			pub struct CrateDep 
CrateInfo			struct CrateInfo 
CrateMap			pub struct CrateMap 
CrateSource			pub struct CrateSource 
CrateTranslation			pub struct CrateTranslation 
CrateType			pub enum CrateType 
CresCompare			trait CresCompare<T> 
CustomScopeIndex			pub struct CustomScopeIndex 
DIB			fn DIB(cx: &CrateContext) -> DIBuilderRef 
DIBuilder_opaque			    pub enum DIBuilder_opaque {}
DIDescriptorFlags			    pub enum DIDescriptorFlags 
DataFlowContext			pub struct DataFlowContext<'a, O> 
DataFlowOperator			impl DataFlowOperator for LoanDataFlowOperator 
DataFlowOperator			impl DataFlowOperator for AssignDataFlowOperator 
DataFlowOperator			impl DataFlowOperator for MoveDataFlowOperator 
DataFlowOperator			pub trait DataFlowOperator 
Datum			impl Datum<Expr> 
Datum			impl Datum<Lvalue> 
Datum			impl Datum<Rvalue> 
Datum			pub fn Datum<K:KindOps>(val: ValueRef, ty: ty::t, kind: K) -> Datum<K> 
Datum			pub struct Datum<K> 
DatumBlock			pub fn DatumBlock<'a, K>(bcx: &'a Block<'a>,
DatumBlock			pub struct DatumBlock<'a, K> 
DeadVisitor			struct DeadVisitor<'a> 
DebugInfoLevel			pub enum DebugInfoLevel 
DebugLocation			enum DebugLocation 
DebugLocation			impl DebugLocation 
DecodeContext			struct DecodeContext<'a> 
DefIdMap			pub mod DefIdMap 
DefIdSet			pub mod DefIdSet 
DefIdSource			pub enum DefIdSource 
DefLike			pub enum DefLike 
DerefArgs			pub enum DerefArgs 
Dest			impl Dest 
Dest			pub enum Dest 
Digest			impl Digest for Sha256 
Digest			pub trait Digest 
Direction			pub struct Direction { repr: uint }
Drop			impl Drop for ArchiveRO 
Drop			impl Drop for ObjectFile 
Drop			impl Drop for pass_manager_res 
Drop			impl Drop for section_iter_res 
Drop			impl Drop for target_data_res 
Drop			impl Drop for _InsnCtxt 
Drop			impl Drop for BuilderRef_res 
Drop			impl Drop for Rvalue 
Drop			impl Drop for _indenter 
DropValue			pub struct DropValue 
DtorKind			impl DtorKind 
DtorKind			pub enum DtorKind 
DuplicateCheckingMode			enum DuplicateCheckingMode 
DynamicFailureHandler			struct DynamicFailureHandler<'a> 
EarlyExitLabel			impl EarlyExitLabel 
EarlyExitLabel			pub enum EarlyExitLabel 
Edge			pub struct Edge<E> 
EdgeIndex			impl EdgeIndex 
EdgeIndex			pub struct EdgeIndex(uint);
EffectCheckVisitor			struct EffectCheckVisitor<'a> 
ElementKind			pub enum ElementKind 
EmbargoVisitor			struct EmbargoVisitor<'a> 
EmptyBuiltinBounds			pub fn EmptyBuiltinBounds() -> BuiltinBounds 
EmptyPhi			pub fn EmptyPhi(cx: &Block, ty: Type) -> ValueRef 
EncodeContext			pub struct EncodeContext<'a> 
EncodeParams			pub struct EncodeParams<'a> 
EncodeVisitor			struct EncodeVisitor<'a,'b> 
Engine256			impl Engine256 
Engine256			struct Engine256 
Engine256State			impl Engine256State 
Engine256State			struct Engine256State 
EntryContext			struct EntryContext<'a> 
EntryFnType			pub enum EntryFnType 
EnumVariantMemberDescriptionFactory			impl EnumVariantMemberDescriptionFactory 
EnumVariantMemberDescriptionFactory			struct EnumVariantMemberDescriptionFactory 
Env			struct Env<'a> 
Env			impl Env 
Env			struct Env 
EnvAction			impl EnvAction 
EnvAction			pub enum EnvAction 
EnvValue			impl EnvValue 
EnvValue			pub struct EnvValue 
ErrorReporting			pub trait ErrorReporting 
ErrorReportingHelpers			trait ErrorReportingHelpers 
ExactSDiv			pub fn ExactSDiv(cx: &Block, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
ExecutionEngine_opaque			pub enum ExecutionEngine_opaque {}
ExplicitRscope			pub struct ExplicitRscope;
Export2			pub struct Export2 
Expr			pub enum Expr 
ExprKind			pub enum ExprKind 
ExprOrMethodCall			pub enum ExprOrMethodCall 
ExprTyProvider			impl ExprTyProvider for ctxt 
ExprTyProvider			pub trait ExprTyProvider 
ExtendedDecodeContext			struct ExtendedDecodeContext<'a> 
ExtractElement			pub fn ExtractElement(cx: &Block, vec_val: ValueRef, index: ValueRef) -> ValueRef 
ExtractValue			pub fn ExtractValue(cx: &Block, agg_val: ValueRef, index: uint) -> ValueRef 
ExtractedBlock			struct ExtractedBlock<'a> 
FAdd			pub fn FAdd(cx: &Block, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
FCmp			pub fn FCmp(cx: &Block, op: RealPredicate, lhs: ValueRef, rhs: ValueRef)
FDiv			pub fn FDiv(cx: &Block, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
FMul			pub fn FMul(cx: &Block, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
FNeg			pub fn FNeg(cx: &Block, v: ValueRef) -> ValueRef 
FPCast			pub fn FPCast(cx: &Block, val: ValueRef, dest_ty: Type) -> ValueRef 
FPExt			pub fn FPExt(cx: &Block, val: ValueRef, dest_ty: Type) -> ValueRef 
FPToSI			pub fn FPToSI(cx: &Block, val: ValueRef, dest_ty: Type) -> ValueRef 
FPToUI			pub fn FPToUI(cx: &Block, val: ValueRef, dest_ty: Type) -> ValueRef 
FPTrunc			pub fn FPTrunc(cx: &Block, val: ValueRef, dest_ty: Type) -> ValueRef 
FRem			pub fn FRem(cx: &Block, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
FSub			pub fn FSub(cx: &Block, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
FailureHandler			enum FailureHandler<'a> 
Family			enum Family 
Features			impl Features 
Features			pub struct Features 
FieldName			pub enum FieldName 
FileMatch			pub enum FileMatch { FileMatches, FileDoesntMatch }
FileSearch			pub struct FileSearch<'a> 
FileType			pub enum FileType 
FixedBuffer			impl FixedBuffer for FixedBuffer64 
FixedBuffer			trait FixedBuffer 
FixedBuffer64			impl FixedBuffer64 
FixedBuffer64			struct FixedBuffer64 
FloatVid			pub struct FloatVid(uint);
FlowedMoveData			pub struct FlowedMoveData<'a> 
FnCtxt			pub struct FnCtxt<'a> 
FnKind			pub enum FnKind 
FnSig			pub struct FnSig 
FnType			pub struct FnType 
FnvHashMap			pub mod FnvHashMap 
FnvHasher			pub struct FnvHasher;
FnvState			pub struct FnvState(u64);
Folder			impl Folder for NestedItemsDropper 
Foo			struct Foo { f: uint, g: uint }
Foo			    struct Foo { a: int, b: ~int }
Foo			    struct Foo { i: int }
Foo			    struct Foo { f: uint, g: uint }
ForeignTypes			struct ForeignTypes 
Free			pub fn Free(cx: &Block, pointer_val: ValueRef) 
FreeLifetimeCollector			    struct FreeLifetimeCollector 
FreeRegion			pub struct FreeRegion 
FreeRegionsFromSameFn			        struct FreeRegionsFromSameFn 
FreeValue			pub struct FreeValue 
FunctionContext			pub struct FunctionContext<'a> 
FunctionDebugContext			impl FunctionDebugContext 
FunctionDebugContext			pub enum FunctionDebugContext 
FunctionDebugContextData			struct FunctionDebugContextData 
GEP			pub fn GEP(cx: &Block, pointer: ValueRef, indices: &[ValueRef]) -> ValueRef 
GEPi			pub fn GEPi(cx: &Block, base: ValueRef, ixs: &[uint]) -> ValueRef 
GatherLoanCtxt			struct GatherLoanCtxt<'a> 
GatherLocalsVisitor			struct GatherLocalsVisitor<'a> 
GeneralMemberDescriptionFactory			impl GeneralMemberDescriptionFactory 
GeneralMemberDescriptionFactory			struct GeneralMemberDescriptionFactory 
Generics			impl Generics 
Generics			pub struct Generics 
Glb			pub struct Glb<'f>(CombineFields<'f>);  \/\/ "greatest lower bound" (common subtype)
GlobalString			pub fn GlobalString(cx: &Block, _str: *c_char) -> ValueRef 
GlobalStringPtr			pub fn GlobalStringPtr(cx: &Block, _str: *c_char) -> ValueRef 
Graph			pub struct Graph<N,E> 
GuaranteeLifetimeContext			struct GuaranteeLifetimeContext<'a> 
Hasher			impl Hasher<FnvState> for FnvHasher 
ICmp			pub fn ICmp(cx: &Block, op: IntPredicate, lhs: ValueRef, rhs: ValueRef)
IdentifiedAnnotation			struct IdentifiedAnnotation;
Impl			pub struct Impl 
ImplVisitor			struct ImplVisitor<'a,'b> 
ImportDirective			impl ImportDirective 
ImportDirective			struct ImportDirective 
ImportDirectiveSubclass			enum ImportDirectiveSubclass 
ImportResolution			impl ImportResolution 
ImportResolution			struct ImportResolution 
ImportUse			pub enum ImportUse 
InBoundsGEP			pub fn InBoundsGEP(cx: &Block, pointer: ValueRef, indices: &[ValueRef]) -> ValueRef 
IndirectBr			pub fn IndirectBr(cx: &Block, addr: ValueRef, num_dests: uint) 
InferCtxt			pub struct InferCtxt<'a> 
InferCtxtMethods			pub trait InferCtxtMethods 
InferRegion			pub enum InferRegion 
InferStr			impl InferStr for FnSig 
InferStr			impl InferStr for IntVarValue 
InferStr			impl InferStr for ast::FloatTy 
InferStr			impl InferStr for ty::Region 
InferStr			impl InferStr for ty::TraitRef 
InferStr			impl InferStr for ty::mt 
InferStr			impl InferStr for ty::t 
InferStr			pub trait InferStr 
InferTy			pub enum InferTy 
InferredIndex			struct InferredIndex(uint);
InferredInfo			struct InferredInfo<'a> 
Inherited			pub struct Inherited<'a> 
InlineAsmCall			pub fn InlineAsmCall(cx: &Block, asm: *c_char, cons: *c_char,
InlinedItemRef			pub enum InlinedItemRef<'a> 
Input			impl Input 
Input			pub enum Input 
InsertElement			pub fn InsertElement(cx: &Block, vec_val: ValueRef, elt_val: ValueRef,
InsertValue			pub fn InsertValue(cx: &Block, agg_val: ValueRef, elt_val: ValueRef, index: uint) -> ValueRef 
IntBounds			struct IntBounds 
IntCast			pub fn IntCast(cx: &Block, val: ValueRef, dest_ty: Type) -> ValueRef 
IntPredicate			pub enum IntPredicate 
IntToPtr			pub fn IntToPtr(cx: &Block, val: ValueRef, dest_ty: Type) -> ValueRef 
IntVarValue			pub enum IntVarValue 
IntVid			pub struct IntVid(uint);
InteriorKind			pub enum InteriorKind 
InteriorSafety			pub enum InteriorSafety 
Invoke			pub fn Invoke(cx: &Block,
IrMaps			fn IrMaps<'a>(tcx: &'a ty::ctxt,
IrMaps			struct IrMaps<'a> 
IrrefutablePatternBindingMode			enum IrrefutablePatternBindingMode 
IsBinopAssignment			enum IsBinopAssignment
IsNotNull			pub fn IsNotNull(cx: &Block, val: ValueRef) -> ValueRef 
IsNull			pub fn IsNull(cx: &Block, val: ValueRef) -> ValueRef 
ItemVariances			pub struct ItemVariances 
Iterator			impl Iterator<Value> for Users 
KindOps			impl KindOps for Expr 
KindOps			impl KindOps for Lvalue 
KindOps			impl KindOps for Rvalue 
KindOps			pub trait KindOps 
LLVMABIAlignmentOfType			        pub fn LLVMABIAlignmentOfType(TD: TargetDataRef, Ty: TypeRef)
LLVMABISizeOfType			        pub fn LLVMABISizeOfType(TD: TargetDataRef, Ty: TypeRef) -> c_uint;
LLVMAddAggressiveDCEPass			        pub fn LLVMAddAggressiveDCEPass(PM: PassManagerRef);
LLVMAddAlias			        pub fn LLVMAddAlias(M: ModuleRef,
LLVMAddArgumentPromotionPass			        pub fn LLVMAddArgumentPromotionPass(PM: PassManagerRef);
LLVMAddAttribute			        pub fn LLVMAddAttribute(Arg: ValueRef, PA: c_uint);
LLVMAddBasicAliasAnalysisPass			        pub fn LLVMAddBasicAliasAnalysisPass(PM: PassManagerRef);
LLVMAddCFGSimplificationPass			        pub fn LLVMAddCFGSimplificationPass(PM: PassManagerRef);
LLVMAddCase			        pub fn LLVMAddCase(Switch: ValueRef,
LLVMAddClause			        pub fn LLVMAddClause(LandingPad: ValueRef, ClauseVal: ValueRef);
LLVMAddColdAttribute			        pub fn LLVMAddColdAttribute(Fn: ValueRef);
LLVMAddConstantMergePass			        pub fn LLVMAddConstantMergePass(PM: PassManagerRef);
LLVMAddConstantPropagationPass			        pub fn LLVMAddConstantPropagationPass(PM: PassManagerRef);
LLVMAddCorrelatedValuePropagationPass			        pub fn LLVMAddCorrelatedValuePropagationPass(PM: PassManagerRef);
LLVMAddDeadArgEliminationPass			        pub fn LLVMAddDeadArgEliminationPass(PM: PassManagerRef);
LLVMAddDeadStoreEliminationPass			        pub fn LLVMAddDeadStoreEliminationPass(PM: PassManagerRef);
LLVMAddDestination			        pub fn LLVMAddDestination(IndirectBr: ValueRef, Dest: BasicBlockRef);
LLVMAddEarlyCSEPass			        pub fn LLVMAddEarlyCSEPass(PM: PassManagerRef);
LLVMAddFunction			        pub fn LLVMAddFunction(M: ModuleRef,
LLVMAddFunctionAttr			        pub fn LLVMAddFunctionAttr(Fn: ValueRef, PA: c_uint);
LLVMAddFunctionAttrString			        pub fn LLVMAddFunctionAttrString(Fn: ValueRef, Name: *c_char);
LLVMAddFunctionAttrsPass			        pub fn LLVMAddFunctionAttrsPass(PM: PassManagerRef);
LLVMAddFunctionInliningPass			        pub fn LLVMAddFunctionInliningPass(PM: PassManagerRef);
LLVMAddGVNPass			        pub fn LLVMAddGVNPass(PM: PassManagerRef);
LLVMAddGlobal			        pub fn LLVMAddGlobal(M: ModuleRef, Ty: TypeRef, Name: *c_char)
LLVMAddGlobalDCEPass			        pub fn LLVMAddGlobalDCEPass(PM: PassManagerRef);
LLVMAddGlobalInAddressSpace			        pub fn LLVMAddGlobalInAddressSpace(M: ModuleRef,
LLVMAddGlobalOptimizerPass			        pub fn LLVMAddGlobalOptimizerPass(PM: PassManagerRef);
LLVMAddIPSCCPPass			        pub fn LLVMAddIPSCCPPass(PM: PassManagerRef);
LLVMAddIncoming			        pub fn LLVMAddIncoming(PhiNode: ValueRef,
LLVMAddIndVarSimplifyPass			        pub fn LLVMAddIndVarSimplifyPass(PM: PassManagerRef);
LLVMAddInstrAttribute			        pub fn LLVMAddInstrAttribute(Instr: ValueRef,
LLVMAddInstructionCombiningPass			        pub fn LLVMAddInstructionCombiningPass(PM: PassManagerRef);
LLVMAddJumpThreadingPass			        pub fn LLVMAddJumpThreadingPass(PM: PassManagerRef);
LLVMAddLICMPass			        pub fn LLVMAddLICMPass(PM: PassManagerRef);
LLVMAddLoopDeletionPass			        pub fn LLVMAddLoopDeletionPass(PM: PassManagerRef);
LLVMAddLoopIdiomPass			        pub fn LLVMAddLoopIdiomPass(PM: PassManagerRef);
LLVMAddLoopRotatePass			        pub fn LLVMAddLoopRotatePass(PM: PassManagerRef);
LLVMAddLoopUnrollPass			        pub fn LLVMAddLoopUnrollPass(PM: PassManagerRef);
LLVMAddLoopUnswitchPass			        pub fn LLVMAddLoopUnswitchPass(PM: PassManagerRef);
LLVMAddMemCpyOptPass			        pub fn LLVMAddMemCpyOptPass(PM: PassManagerRef);
LLVMAddNamedMetadataOperand			        pub fn LLVMAddNamedMetadataOperand(M: ModuleRef,
LLVMAddPruneEHPass			        pub fn LLVMAddPruneEHPass(PM: PassManagerRef);
LLVMAddReassociatePass			        pub fn LLVMAddReassociatePass(PM: PassManagerRef);
LLVMAddReturnAttribute			        pub fn LLVMAddReturnAttribute(Fn: ValueRef, PA: c_uint);
LLVMAddSCCPPass			        pub fn LLVMAddSCCPPass(PM: PassManagerRef);
LLVMAddScalarReplAggregatesPass			        pub fn LLVMAddScalarReplAggregatesPass(PM: PassManagerRef);
LLVMAddScalarReplAggregatesPassSSA			        pub fn LLVMAddScalarReplAggregatesPassSSA(PM: PassManagerRef);
LLVMAddSimplifyLibCallsPass			        pub fn LLVMAddSimplifyLibCallsPass(PM: PassManagerRef);
LLVMAddStripDeadPrototypesPass			        pub fn LLVMAddStripDeadPrototypesPass(PM: PassManagerRef);
LLVMAddTailCallEliminationPass			        pub fn LLVMAddTailCallEliminationPass(PM: PassManagerRef);
LLVMAddTargetData			        pub fn LLVMAddTargetData(TD: TargetDataRef, PM: PassManagerRef);
LLVMAddTypeBasedAliasAnalysisPass			        pub fn LLVMAddTypeBasedAliasAnalysisPass(PM: PassManagerRef);
LLVMAddVerifierPass			        pub fn LLVMAddVerifierPass(PM: PassManagerRef);
LLVMAlignOf			        pub fn LLVMAlignOf(Ty: TypeRef) -> ValueRef;
LLVMAppendBasicBlockInContext			        pub fn LLVMAppendBasicBlockInContext(C: ContextRef,
LLVMArrayType			        pub fn LLVMArrayType(ElementType: TypeRef, ElementCount: c_uint)
LLVMBasicBlockAsValue			        pub fn LLVMBasicBlockAsValue(BB: BasicBlockRef) -> ValueRef;
LLVMBlockAddress			        pub fn LLVMBlockAddress(F: ValueRef, BB: BasicBlockRef) -> ValueRef;
LLVMBuildAShr			        pub fn LLVMBuildAShr(B: BuilderRef,
LLVMBuildAdd			        pub fn LLVMBuildAdd(B: BuilderRef,
LLVMBuildAggregateRet			        pub fn LLVMBuildAggregateRet(B: BuilderRef,
LLVMBuildAlloca			        pub fn LLVMBuildAlloca(B: BuilderRef, Ty: TypeRef, Name: *c_char)
LLVMBuildAnd			        pub fn LLVMBuildAnd(B: BuilderRef,
LLVMBuildArrayAlloca			        pub fn LLVMBuildArrayAlloca(B: BuilderRef,
LLVMBuildArrayMalloc			        pub fn LLVMBuildArrayMalloc(B: BuilderRef,
LLVMBuildAtomicCmpXchg			        pub fn LLVMBuildAtomicCmpXchg(B: BuilderRef,
LLVMBuildAtomicFence			        pub fn LLVMBuildAtomicFence(B: BuilderRef, Order: AtomicOrdering);
LLVMBuildAtomicLoad			        pub fn LLVMBuildAtomicLoad(B: BuilderRef,
LLVMBuildAtomicRMW			        pub fn LLVMBuildAtomicRMW(B: BuilderRef,
LLVMBuildAtomicStore			        pub fn LLVMBuildAtomicStore(B: BuilderRef,
LLVMBuildBinOp			        pub fn LLVMBuildBinOp(B: BuilderRef,
LLVMBuildBitCast			        pub fn LLVMBuildBitCast(B: BuilderRef,
LLVMBuildBr			        pub fn LLVMBuildBr(B: BuilderRef, Dest: BasicBlockRef) -> ValueRef;
LLVMBuildCall			        pub fn LLVMBuildCall(B: BuilderRef,
LLVMBuildCast			        pub fn LLVMBuildCast(B: BuilderRef,
LLVMBuildCondBr			        pub fn LLVMBuildCondBr(B: BuilderRef,
LLVMBuildExactSDiv			        pub fn LLVMBuildExactSDiv(B: BuilderRef,
LLVMBuildExtractElement			        pub fn LLVMBuildExtractElement(B: BuilderRef,
LLVMBuildExtractValue			        pub fn LLVMBuildExtractValue(B: BuilderRef,
LLVMBuildFAdd			        pub fn LLVMBuildFAdd(B: BuilderRef,
LLVMBuildFCmp			        pub fn LLVMBuildFCmp(B: BuilderRef,
LLVMBuildFDiv			        pub fn LLVMBuildFDiv(B: BuilderRef,
LLVMBuildFMul			        pub fn LLVMBuildFMul(B: BuilderRef,
LLVMBuildFNeg			        pub fn LLVMBuildFNeg(B: BuilderRef, V: ValueRef, Name: *c_char)
LLVMBuildFPCast			        pub fn LLVMBuildFPCast(B: BuilderRef,
LLVMBuildFPExt			        pub fn LLVMBuildFPExt(B: BuilderRef,
LLVMBuildFPToSI			        pub fn LLVMBuildFPToSI(B: BuilderRef,
LLVMBuildFPToUI			        pub fn LLVMBuildFPToUI(B: BuilderRef,
LLVMBuildFPTrunc			        pub fn LLVMBuildFPTrunc(B: BuilderRef,
LLVMBuildFRem			        pub fn LLVMBuildFRem(B: BuilderRef,
LLVMBuildFSub			        pub fn LLVMBuildFSub(B: BuilderRef,
LLVMBuildFree			        pub fn LLVMBuildFree(B: BuilderRef, PointerVal: ValueRef) -> ValueRef;
LLVMBuildGEP			        pub fn LLVMBuildGEP(B: BuilderRef,
LLVMBuildGlobalString			        pub fn LLVMBuildGlobalString(B: BuilderRef,
LLVMBuildGlobalStringPtr			        pub fn LLVMBuildGlobalStringPtr(B: BuilderRef,
LLVMBuildICmp			        pub fn LLVMBuildICmp(B: BuilderRef,
LLVMBuildInBoundsGEP			        pub fn LLVMBuildInBoundsGEP(B: BuilderRef,
LLVMBuildIndirectBr			        pub fn LLVMBuildIndirectBr(B: BuilderRef,
LLVMBuildInsertElement			        pub fn LLVMBuildInsertElement(B: BuilderRef,
LLVMBuildInsertValue			        pub fn LLVMBuildInsertValue(B: BuilderRef,
LLVMBuildIntCast			        pub fn LLVMBuildIntCast(B: BuilderRef,
LLVMBuildIntToPtr			        pub fn LLVMBuildIntToPtr(B: BuilderRef,
LLVMBuildInvoke			        pub fn LLVMBuildInvoke(B: BuilderRef,
LLVMBuildIsNotNull			        pub fn LLVMBuildIsNotNull(B: BuilderRef, Val: ValueRef, Name: *c_char)
LLVMBuildIsNull			        pub fn LLVMBuildIsNull(B: BuilderRef, Val: ValueRef, Name: *c_char)
LLVMBuildLShr			        pub fn LLVMBuildLShr(B: BuilderRef,
LLVMBuildLandingPad			        pub fn LLVMBuildLandingPad(B: BuilderRef,
LLVMBuildLoad			        pub fn LLVMBuildLoad(B: BuilderRef,
LLVMBuildMalloc			        pub fn LLVMBuildMalloc(B: BuilderRef, Ty: TypeRef, Name: *c_char)
LLVMBuildMul			        pub fn LLVMBuildMul(B: BuilderRef,
LLVMBuildNSWAdd			        pub fn LLVMBuildNSWAdd(B: BuilderRef,
LLVMBuildNSWMul			        pub fn LLVMBuildNSWMul(B: BuilderRef,
LLVMBuildNSWNeg			        pub fn LLVMBuildNSWNeg(B: BuilderRef, V: ValueRef, Name: *c_char)
LLVMBuildNSWSub			        pub fn LLVMBuildNSWSub(B: BuilderRef,
LLVMBuildNUWAdd			        pub fn LLVMBuildNUWAdd(B: BuilderRef,
LLVMBuildNUWMul			        pub fn LLVMBuildNUWMul(B: BuilderRef,
LLVMBuildNUWNeg			        pub fn LLVMBuildNUWNeg(B: BuilderRef, V: ValueRef, Name: *c_char)
LLVMBuildNUWSub			        pub fn LLVMBuildNUWSub(B: BuilderRef,
LLVMBuildNeg			        pub fn LLVMBuildNeg(B: BuilderRef, V: ValueRef, Name: *c_char)
LLVMBuildNot			        pub fn LLVMBuildNot(B: BuilderRef, V: ValueRef, Name: *c_char)
LLVMBuildOr			        pub fn LLVMBuildOr(B: BuilderRef,
LLVMBuildPhi			        pub fn LLVMBuildPhi(B: BuilderRef, Ty: TypeRef, Name: *c_char)
LLVMBuildPointerCast			        pub fn LLVMBuildPointerCast(B: BuilderRef,
LLVMBuildPtrDiff			        pub fn LLVMBuildPtrDiff(B: BuilderRef,
LLVMBuildPtrToInt			        pub fn LLVMBuildPtrToInt(B: BuilderRef,
LLVMBuildResume			        pub fn LLVMBuildResume(B: BuilderRef, Exn: ValueRef) -> ValueRef;
LLVMBuildRet			        pub fn LLVMBuildRet(B: BuilderRef, V: ValueRef) -> ValueRef;
LLVMBuildRetVoid			        pub fn LLVMBuildRetVoid(B: BuilderRef) -> ValueRef;
LLVMBuildSDiv			        pub fn LLVMBuildSDiv(B: BuilderRef,
LLVMBuildSExt			        pub fn LLVMBuildSExt(B: BuilderRef,
LLVMBuildSExtOrBitCast			        pub fn LLVMBuildSExtOrBitCast(B: BuilderRef,
LLVMBuildSIToFP			        pub fn LLVMBuildSIToFP(B: BuilderRef,
LLVMBuildSRem			        pub fn LLVMBuildSRem(B: BuilderRef,
LLVMBuildSelect			        pub fn LLVMBuildSelect(B: BuilderRef,
LLVMBuildShl			        pub fn LLVMBuildShl(B: BuilderRef,
LLVMBuildShuffleVector			        pub fn LLVMBuildShuffleVector(B: BuilderRef,
LLVMBuildStore			        pub fn LLVMBuildStore(B: BuilderRef, Val: ValueRef, Ptr: ValueRef)
LLVMBuildStructGEP			        pub fn LLVMBuildStructGEP(B: BuilderRef,
LLVMBuildSub			        pub fn LLVMBuildSub(B: BuilderRef,
LLVMBuildSwitch			        pub fn LLVMBuildSwitch(B: BuilderRef,
LLVMBuildTrunc			        pub fn LLVMBuildTrunc(B: BuilderRef,
LLVMBuildTruncOrBitCast			        pub fn LLVMBuildTruncOrBitCast(B: BuilderRef,
LLVMBuildUDiv			        pub fn LLVMBuildUDiv(B: BuilderRef,
LLVMBuildUIToFP			        pub fn LLVMBuildUIToFP(B: BuilderRef,
LLVMBuildURem			        pub fn LLVMBuildURem(B: BuilderRef,
LLVMBuildUnreachable			        pub fn LLVMBuildUnreachable(B: BuilderRef) -> ValueRef;
LLVMBuildVAArg			        pub fn LLVMBuildVAArg(B: BuilderRef,
LLVMBuildXor			        pub fn LLVMBuildXor(B: BuilderRef,
LLVMBuildZExt			        pub fn LLVMBuildZExt(B: BuilderRef,
LLVMBuildZExtOrBitCast			        pub fn LLVMBuildZExtOrBitCast(B: BuilderRef,
LLVMCallFrameAlignmentOfType			        pub fn LLVMCallFrameAlignmentOfType(TD: TargetDataRef, Ty: TypeRef)
LLVMClearInsertionPosition			        pub fn LLVMClearInsertionPosition(Builder: BuilderRef);
LLVMConstAShr			        pub fn LLVMConstAShr(LHSConstant: ValueRef, RHSConstant: ValueRef)
LLVMConstAdd			        pub fn LLVMConstAdd(LHSConstant: ValueRef, RHSConstant: ValueRef)
LLVMConstAllOnes			        pub fn LLVMConstAllOnes(Ty: TypeRef) -> ValueRef;
LLVMConstAnd			        pub fn LLVMConstAnd(LHSConstant: ValueRef, RHSConstant: ValueRef)
LLVMConstArray			        pub fn LLVMConstArray(ElementTy: TypeRef,
LLVMConstBitCast			        pub fn LLVMConstBitCast(ConstantVal: ValueRef, ToType: TypeRef)
LLVMConstExactSDiv			        pub fn LLVMConstExactSDiv(LHSConstant: ValueRef,
LLVMConstExtractElement			        pub fn LLVMConstExtractElement(VectorConstant: ValueRef,
LLVMConstExtractValue			        pub fn LLVMConstExtractValue(AggConstant: ValueRef,
LLVMConstFAdd			        pub fn LLVMConstFAdd(LHSConstant: ValueRef, RHSConstant: ValueRef)
LLVMConstFCmp			        pub fn LLVMConstFCmp(Pred: c_ushort, V1: ValueRef, V2: ValueRef)
LLVMConstFDiv			        pub fn LLVMConstFDiv(LHSConstant: ValueRef, RHSConstant: ValueRef)
LLVMConstFMul			        pub fn LLVMConstFMul(LHSConstant: ValueRef, RHSConstant: ValueRef)
LLVMConstFNeg			        pub fn LLVMConstFNeg(ConstantVal: ValueRef) -> ValueRef;
LLVMConstFPCast			        pub fn LLVMConstFPCast(ConstantVal: ValueRef, ToType: TypeRef)
LLVMConstFPExt			        pub fn LLVMConstFPExt(ConstantVal: ValueRef, ToType: TypeRef)
LLVMConstFPToSI			        pub fn LLVMConstFPToSI(ConstantVal: ValueRef, ToType: TypeRef)
LLVMConstFPToUI			        pub fn LLVMConstFPToUI(ConstantVal: ValueRef, ToType: TypeRef)
LLVMConstFPTrunc			        pub fn LLVMConstFPTrunc(ConstantVal: ValueRef, ToType: TypeRef)
LLVMConstFRem			        pub fn LLVMConstFRem(LHSConstant: ValueRef, RHSConstant: ValueRef)
LLVMConstFSub			        pub fn LLVMConstFSub(LHSConstant: ValueRef, RHSConstant: ValueRef)
LLVMConstGEP			        pub fn LLVMConstGEP(ConstantVal: ValueRef,
LLVMConstICmp			        pub fn LLVMConstICmp(Pred: c_ushort, V1: ValueRef, V2: ValueRef)
LLVMConstInBoundsGEP			        pub fn LLVMConstInBoundsGEP(ConstantVal: ValueRef,
LLVMConstInlineAsm			        pub fn LLVMConstInlineAsm(Ty: TypeRef,
LLVMConstInsertElement			        pub fn LLVMConstInsertElement(VectorConstant: ValueRef,
LLVMConstInsertValue			        pub fn LLVMConstInsertValue(AggConstant: ValueRef,
LLVMConstInt			        pub fn LLVMConstInt(IntTy: TypeRef, N: c_ulonglong, SignExtend: Bool)
LLVMConstIntCast			        pub fn LLVMConstIntCast(ConstantVal: ValueRef,
LLVMConstIntGetSExtValue			        pub fn LLVMConstIntGetSExtValue(ConstantVal: ValueRef) -> c_longlong;
LLVMConstIntGetZExtValue			        pub fn LLVMConstIntGetZExtValue(ConstantVal: ValueRef) -> c_ulonglong;
LLVMConstIntOfString			        pub fn LLVMConstIntOfString(IntTy: TypeRef, Text: *c_char, Radix: u8)
LLVMConstIntOfStringAndSize			        pub fn LLVMConstIntOfStringAndSize(IntTy: TypeRef,
LLVMConstIntToPtr			        pub fn LLVMConstIntToPtr(ConstantVal: ValueRef, ToType: TypeRef)
LLVMConstLShr			        pub fn LLVMConstLShr(LHSConstant: ValueRef, RHSConstant: ValueRef)
LLVMConstMul			        pub fn LLVMConstMul(LHSConstant: ValueRef, RHSConstant: ValueRef)
LLVMConstNSWAdd			        pub fn LLVMConstNSWAdd(LHSConstant: ValueRef, RHSConstant: ValueRef)
LLVMConstNSWMul			        pub fn LLVMConstNSWMul(LHSConstant: ValueRef, RHSConstant: ValueRef)
LLVMConstNSWNeg			        pub fn LLVMConstNSWNeg(ConstantVal: ValueRef) -> ValueRef;
LLVMConstNSWSub			        pub fn LLVMConstNSWSub(LHSConstant: ValueRef, RHSConstant: ValueRef)
LLVMConstNUWAdd			        pub fn LLVMConstNUWAdd(LHSConstant: ValueRef, RHSConstant: ValueRef)
LLVMConstNUWMul			        pub fn LLVMConstNUWMul(LHSConstant: ValueRef, RHSConstant: ValueRef)
LLVMConstNUWNeg			        pub fn LLVMConstNUWNeg(ConstantVal: ValueRef) -> ValueRef;
LLVMConstNUWSub			        pub fn LLVMConstNUWSub(LHSConstant: ValueRef, RHSConstant: ValueRef)
LLVMConstNamedStruct			        pub fn LLVMConstNamedStruct(S: TypeRef,
LLVMConstNeg			        pub fn LLVMConstNeg(ConstantVal: ValueRef) -> ValueRef;
LLVMConstNot			        pub fn LLVMConstNot(ConstantVal: ValueRef) -> ValueRef;
LLVMConstNull			        pub fn LLVMConstNull(Ty: TypeRef) -> ValueRef;
LLVMConstOr			        pub fn LLVMConstOr(LHSConstant: ValueRef, RHSConstant: ValueRef)
LLVMConstPointerCast			        pub fn LLVMConstPointerCast(ConstantVal: ValueRef, ToType: TypeRef)
LLVMConstPointerNull			        pub fn LLVMConstPointerNull(Ty: TypeRef) -> ValueRef;
LLVMConstPtrToInt			        pub fn LLVMConstPtrToInt(ConstantVal: ValueRef, ToType: TypeRef)
LLVMConstReal			        pub fn LLVMConstReal(RealTy: TypeRef, N: f64) -> ValueRef;
LLVMConstRealOfString			        pub fn LLVMConstRealOfString(RealTy: TypeRef, Text: *c_char)
LLVMConstRealOfStringAndSize			        pub fn LLVMConstRealOfStringAndSize(RealTy: TypeRef,
LLVMConstSDiv			        pub fn LLVMConstSDiv(LHSConstant: ValueRef, RHSConstant: ValueRef)
LLVMConstSExt			        pub fn LLVMConstSExt(ConstantVal: ValueRef, ToType: TypeRef)
LLVMConstSExtOrBitCast			        pub fn LLVMConstSExtOrBitCast(ConstantVal: ValueRef, ToType: TypeRef)
LLVMConstSIToFP			        pub fn LLVMConstSIToFP(ConstantVal: ValueRef, ToType: TypeRef)
LLVMConstSRem			        pub fn LLVMConstSRem(LHSConstant: ValueRef, RHSConstant: ValueRef)
LLVMConstSelect			        pub fn LLVMConstSelect(ConstantCondition: ValueRef,
LLVMConstShl			        pub fn LLVMConstShl(LHSConstant: ValueRef, RHSConstant: ValueRef)
LLVMConstShuffleVector			        pub fn LLVMConstShuffleVector(VectorAConstant: ValueRef,
LLVMConstStringInContext			        pub fn LLVMConstStringInContext(C: ContextRef,
LLVMConstStructInContext			        pub fn LLVMConstStructInContext(C: ContextRef,
LLVMConstSub			        pub fn LLVMConstSub(LHSConstant: ValueRef, RHSConstant: ValueRef)
LLVMConstTrunc			        pub fn LLVMConstTrunc(ConstantVal: ValueRef, ToType: TypeRef)
LLVMConstTruncOrBitCast			        pub fn LLVMConstTruncOrBitCast(ConstantVal: ValueRef, ToType: TypeRef)
LLVMConstUDiv			        pub fn LLVMConstUDiv(LHSConstant: ValueRef, RHSConstant: ValueRef)
LLVMConstUIToFP			        pub fn LLVMConstUIToFP(ConstantVal: ValueRef, ToType: TypeRef)
LLVMConstURem			        pub fn LLVMConstURem(LHSConstant: ValueRef, RHSConstant: ValueRef)
LLVMConstVector			        pub fn LLVMConstVector(ScalarConstantVals: *ValueRef, Size: c_uint)
LLVMConstXor			        pub fn LLVMConstXor(LHSConstant: ValueRef, RHSConstant: ValueRef)
LLVMConstZExt			        pub fn LLVMConstZExt(ConstantVal: ValueRef, ToType: TypeRef)
LLVMConstZExtOrBitCast			        pub fn LLVMConstZExtOrBitCast(ConstantVal: ValueRef, ToType: TypeRef)
LLVMContextCreate			        pub fn LLVMContextCreate() -> ContextRef;
LLVMContextDispose			        pub fn LLVMContextDispose(C: ContextRef);
LLVMCountBasicBlocks			        pub fn LLVMCountBasicBlocks(Fn: ValueRef) -> c_uint;
LLVMCountIncoming			        pub fn LLVMCountIncoming(PhiNode: ValueRef) -> c_uint;
LLVMCountParamTypes			        pub fn LLVMCountParamTypes(FunctionTy: TypeRef) -> c_uint;
LLVMCountParams			        pub fn LLVMCountParams(Fn: ValueRef) -> c_uint;
LLVMCountStructElementTypes			        pub fn LLVMCountStructElementTypes(StructTy: TypeRef) -> c_uint;
LLVMCreateBuilderInContext			        pub fn LLVMCreateBuilderInContext(C: ContextRef) -> BuilderRef;
LLVMCreateFunctionPassManagerForModule			        pub fn LLVMCreateFunctionPassManagerForModule(M: ModuleRef)
LLVMCreateMemoryBufferWithMemoryRange			        pub fn LLVMCreateMemoryBufferWithMemoryRange(InputData: *c_char,
LLVMCreateMemoryBufferWithMemoryRangeCopy			        pub fn LLVMCreateMemoryBufferWithMemoryRangeCopy(InputData: *c_char,
LLVMCreateObjectFile			        pub fn LLVMCreateObjectFile(MemBuf: MemoryBufferRef) -> ObjectFileRef;
LLVMCreatePassManager			        pub fn LLVMCreatePassManager() -> PassManagerRef;
LLVMCreateTargetData			        pub fn LLVMCreateTargetData(StringRep: *c_char) -> TargetDataRef;
LLVMDIBuilderCreate			        pub fn LLVMDIBuilderCreate(M: ModuleRef) -> DIBuilderRef;
LLVMDIBuilderCreateArrayType			        pub fn LLVMDIBuilderCreateArrayType(Builder: DIBuilderRef,
LLVMDIBuilderCreateBasicType			        pub fn LLVMDIBuilderCreateBasicType(Builder: DIBuilderRef,
LLVMDIBuilderCreateCompileUnit			        pub fn LLVMDIBuilderCreateCompileUnit(Builder: DIBuilderRef,
LLVMDIBuilderCreateComplexVariable			        pub fn LLVMDIBuilderCreateComplexVariable(Builder: DIBuilderRef,
LLVMDIBuilderCreateEnumerationType			        pub fn LLVMDIBuilderCreateEnumerationType(Builder: DIBuilderRef,
LLVMDIBuilderCreateEnumerator			        pub fn LLVMDIBuilderCreateEnumerator(Builder: DIBuilderRef,
LLVMDIBuilderCreateFile			        pub fn LLVMDIBuilderCreateFile(Builder: DIBuilderRef,
LLVMDIBuilderCreateFunction			        pub fn LLVMDIBuilderCreateFunction(Builder: DIBuilderRef,
LLVMDIBuilderCreateLexicalBlock			        pub fn LLVMDIBuilderCreateLexicalBlock(Builder: DIBuilderRef,
LLVMDIBuilderCreateLocalVariable			        pub fn LLVMDIBuilderCreateLocalVariable(Builder: DIBuilderRef,
LLVMDIBuilderCreateMemberType			        pub fn LLVMDIBuilderCreateMemberType(Builder: DIBuilderRef,
LLVMDIBuilderCreateNameSpace			        pub fn LLVMDIBuilderCreateNameSpace(Builder: DIBuilderRef,
LLVMDIBuilderCreateOpDeref			        pub fn LLVMDIBuilderCreateOpDeref(IntType: TypeRef) -> ValueRef;
LLVMDIBuilderCreateOpPlus			        pub fn LLVMDIBuilderCreateOpPlus(IntType: TypeRef) -> ValueRef;
LLVMDIBuilderCreatePointerType			        pub fn LLVMDIBuilderCreatePointerType(Builder: DIBuilderRef,
LLVMDIBuilderCreateStaticVariable			        pub fn LLVMDIBuilderCreateStaticVariable(Builder: DIBuilderRef,
LLVMDIBuilderCreateStructType			        pub fn LLVMDIBuilderCreateStructType(Builder: DIBuilderRef,
LLVMDIBuilderCreateSubroutineType			        pub fn LLVMDIBuilderCreateSubroutineType(Builder: DIBuilderRef,
LLVMDIBuilderCreateTemplateTypeParameter			        pub fn LLVMDIBuilderCreateTemplateTypeParameter(Builder: DIBuilderRef,
LLVMDIBuilderCreateUnionType			        pub fn LLVMDIBuilderCreateUnionType(Builder: DIBuilderRef,
LLVMDIBuilderCreateVectorType			        pub fn LLVMDIBuilderCreateVectorType(Builder: DIBuilderRef,
LLVMDIBuilderDispose			        pub fn LLVMDIBuilderDispose(Builder: DIBuilderRef);
LLVMDIBuilderFinalize			        pub fn LLVMDIBuilderFinalize(Builder: DIBuilderRef);
LLVMDIBuilderGetOrCreateArray			        pub fn LLVMDIBuilderGetOrCreateArray(Builder: DIBuilderRef,
LLVMDIBuilderGetOrCreateSubrange			        pub fn LLVMDIBuilderGetOrCreateSubrange(Builder: DIBuilderRef,
LLVMDIBuilderInsertDeclareAtEnd			        pub fn LLVMDIBuilderInsertDeclareAtEnd(Builder: DIBuilderRef,
LLVMDIBuilderInsertDeclareBefore			        pub fn LLVMDIBuilderInsertDeclareBefore(Builder: DIBuilderRef,
LLVMDICompositeTypeSetTypeArray			        pub fn LLVMDICompositeTypeSetTypeArray(CompositeType: ValueRef, TypeArray: ValueRef);
LLVMDeleteBasicBlock			        pub fn LLVMDeleteBasicBlock(BB: BasicBlockRef);
LLVMDeleteFunction			        pub fn LLVMDeleteFunction(Fn: ValueRef);
LLVMDeleteGlobal			        pub fn LLVMDeleteGlobal(GlobalVar: ValueRef);
LLVMDisposeBuilder			        pub fn LLVMDisposeBuilder(Builder: BuilderRef);
LLVMDisposeExecutionEngine			        pub fn LLVMDisposeExecutionEngine(EE: ExecutionEngineRef);
LLVMDisposeMemoryBuffer			        pub fn LLVMDisposeMemoryBuffer(MemBuf: MemoryBufferRef);
LLVMDisposeModule			        pub fn LLVMDisposeModule(M: ModuleRef);
LLVMDisposeObjectFile			        pub fn LLVMDisposeObjectFile(ObjFile: ObjectFileRef);
LLVMDisposePassManager			        pub fn LLVMDisposePassManager(PM: PassManagerRef);
LLVMDisposeSectionIterator			        pub fn LLVMDisposeSectionIterator(SI: SectionIteratorRef);
LLVMDisposeTargetData			        pub fn LLVMDisposeTargetData(TD: TargetDataRef);
LLVMDoubleTypeInContext			        pub fn LLVMDoubleTypeInContext(C: ContextRef) -> TypeRef;
LLVMDumpModule			        pub fn LLVMDumpModule(M: ModuleRef);
LLVMDumpValue			        pub fn LLVMDumpValue(Val: ValueRef);
LLVMFP128TypeInContext			        pub fn LLVMFP128TypeInContext(C: ContextRef) -> TypeRef;
LLVMFinalizeFunctionPassManager			        pub fn LLVMFinalizeFunctionPassManager(FPM: PassManagerRef) -> Bool;
LLVMFloatTypeInContext			        pub fn LLVMFloatTypeInContext(C: ContextRef) -> TypeRef;
LLVMFunctionType			        pub fn LLVMFunctionType(ReturnType: TypeRef,
LLVMGetAlignment			        pub fn LLVMGetAlignment(Global: ValueRef) -> c_uint;
LLVMGetArrayLength			        pub fn LLVMGetArrayLength(ArrayTy: TypeRef) -> c_uint;
LLVMGetAttribute			        pub fn LLVMGetAttribute(Arg: ValueRef) -> c_uint;
LLVMGetBasicBlockParent			        pub fn LLVMGetBasicBlockParent(BB: BasicBlockRef) -> ValueRef;
LLVMGetBasicBlocks			        pub fn LLVMGetBasicBlocks(Fn: ValueRef, BasicBlocks: *ValueRef);
LLVMGetCurrentDebugLocation			        pub fn LLVMGetCurrentDebugLocation(Builder: BuilderRef) -> ValueRef;
LLVMGetDataLayout			        pub fn LLVMGetDataLayout(M: ModuleRef) -> *c_char;
LLVMGetElementType			        pub fn LLVMGetElementType(Ty: TypeRef) -> TypeRef;
LLVMGetEntryBasicBlock			        pub fn LLVMGetEntryBasicBlock(Fn: ValueRef) -> BasicBlockRef;
LLVMGetFirstBasicBlock			        pub fn LLVMGetFirstBasicBlock(Fn: ValueRef) -> BasicBlockRef;
LLVMGetFirstFunction			        pub fn LLVMGetFirstFunction(M: ModuleRef) -> ValueRef;
LLVMGetFirstGlobal			        pub fn LLVMGetFirstGlobal(M: ModuleRef) -> ValueRef;
LLVMGetFirstInstruction			        pub fn LLVMGetFirstInstruction(BB: BasicBlockRef) -> ValueRef;
LLVMGetFirstParam			        pub fn LLVMGetFirstParam(Fn: ValueRef) -> ValueRef;
LLVMGetFirstUse			        pub fn LLVMGetFirstUse(Val: ValueRef) -> UseRef;
LLVMGetFunctionAttr			        pub fn LLVMGetFunctionAttr(Fn: ValueRef) -> c_ulonglong;
LLVMGetFunctionCallConv			        pub fn LLVMGetFunctionCallConv(Fn: ValueRef) -> c_uint;
LLVMGetGC			        pub fn LLVMGetGC(Fn: ValueRef) -> *c_char;
LLVMGetGlobalParent			        pub fn LLVMGetGlobalParent(Global: ValueRef) -> ModuleRef;
LLVMGetIncomingBlock			        pub fn LLVMGetIncomingBlock(PhiNode: ValueRef, Index: c_uint)
LLVMGetIncomingValue			        pub fn LLVMGetIncomingValue(PhiNode: ValueRef, Index: c_uint)
LLVMGetInitializer			        pub fn LLVMGetInitializer(GlobalVar: ValueRef) -> ValueRef;
LLVMGetInsertBlock			        pub fn LLVMGetInsertBlock(Builder: BuilderRef) -> BasicBlockRef;
LLVMGetInstructionCallConv			        pub fn LLVMGetInstructionCallConv(Instr: ValueRef) -> c_uint;
LLVMGetInstructionParent			        pub fn LLVMGetInstructionParent(Inst: ValueRef) -> BasicBlockRef;
LLVMGetIntTypeWidth			        pub fn LLVMGetIntTypeWidth(IntegerTy: TypeRef) -> c_uint;
LLVMGetIntrinsicID			        pub fn LLVMGetIntrinsicID(Fn: ValueRef) -> c_uint;
LLVMGetLastBasicBlock			        pub fn LLVMGetLastBasicBlock(Fn: ValueRef) -> BasicBlockRef;
LLVMGetLastFunction			        pub fn LLVMGetLastFunction(M: ModuleRef) -> ValueRef;
LLVMGetLastGlobal			        pub fn LLVMGetLastGlobal(M: ModuleRef) -> ValueRef;
LLVMGetLastInstruction			        pub fn LLVMGetLastInstruction(BB: BasicBlockRef) -> ValueRef;
LLVMGetLastParam			        pub fn LLVMGetLastParam(Fn: ValueRef) -> ValueRef;
LLVMGetLinkage			        pub fn LLVMGetLinkage(Global: ValueRef) -> c_uint;
LLVMGetMDKindIDInContext			        pub fn LLVMGetMDKindIDInContext(C: ContextRef,
LLVMGetMetadata			        pub fn LLVMGetMetadata(Val: ValueRef, KindID: c_uint) -> ValueRef;
LLVMGetModuleContext			        pub fn LLVMGetModuleContext(M: ModuleRef) -> ContextRef;
LLVMGetNamedFunction			        pub fn LLVMGetNamedFunction(M: ModuleRef, Name: *c_char) -> ValueRef;
LLVMGetNamedGlobal			        pub fn LLVMGetNamedGlobal(M: ModuleRef, Name: *c_char) -> ValueRef;
LLVMGetNextBasicBlock			        pub fn LLVMGetNextBasicBlock(BB: BasicBlockRef) -> BasicBlockRef;
LLVMGetNextFunction			        pub fn LLVMGetNextFunction(Fn: ValueRef) -> ValueRef;
LLVMGetNextGlobal			        pub fn LLVMGetNextGlobal(GlobalVar: ValueRef) -> ValueRef;
LLVMGetNextInstruction			        pub fn LLVMGetNextInstruction(Inst: ValueRef) -> ValueRef;
LLVMGetNextParam			        pub fn LLVMGetNextParam(Arg: ValueRef) -> ValueRef;
LLVMGetNextUse			        pub fn LLVMGetNextUse(U: UseRef) -> UseRef;
LLVMGetNumOperands			        pub fn LLVMGetNumOperands(Val: ValueRef) -> c_int;
LLVMGetOperand			        pub fn LLVMGetOperand(Val: ValueRef, Index: c_uint) -> ValueRef;
LLVMGetOrInsertFunction			        pub fn LLVMGetOrInsertFunction(M: ModuleRef,
LLVMGetParam			        pub fn LLVMGetParam(Fn: ValueRef, Index: c_uint) -> ValueRef;
LLVMGetParamParent			        pub fn LLVMGetParamParent(Inst: ValueRef) -> ValueRef;
LLVMGetParamTypes			        pub fn LLVMGetParamTypes(FunctionTy: TypeRef, Dest: *TypeRef);
LLVMGetParams			        pub fn LLVMGetParams(Fn: ValueRef, Params: *ValueRef);
LLVMGetPointerAddressSpace			        pub fn LLVMGetPointerAddressSpace(PointerTy: TypeRef) -> c_uint;
LLVMGetPointerToGlobal			        pub fn LLVMGetPointerToGlobal(EE: ExecutionEngineRef, V: ValueRef)
LLVMGetPreviousBasicBlock			        pub fn LLVMGetPreviousBasicBlock(BB: BasicBlockRef) -> BasicBlockRef;
LLVMGetPreviousFunction			        pub fn LLVMGetPreviousFunction(Fn: ValueRef) -> ValueRef;
LLVMGetPreviousGlobal			        pub fn LLVMGetPreviousGlobal(GlobalVar: ValueRef) -> ValueRef;
LLVMGetPreviousInstruction			        pub fn LLVMGetPreviousInstruction(Inst: ValueRef) -> ValueRef;
LLVMGetPreviousParam			        pub fn LLVMGetPreviousParam(Arg: ValueRef) -> ValueRef;
LLVMGetReturnType			        pub fn LLVMGetReturnType(FunctionTy: TypeRef) -> TypeRef;
LLVMGetSection			        pub fn LLVMGetSection(Global: ValueRef) -> *c_char;
LLVMGetSectionContents			        pub fn LLVMGetSectionContents(SI: SectionIteratorRef) -> *c_char;
LLVMGetSectionName			        pub fn LLVMGetSectionName(SI: SectionIteratorRef) -> *c_char;
LLVMGetSectionSize			        pub fn LLVMGetSectionSize(SI: SectionIteratorRef) -> c_ulonglong;
LLVMGetSections			        pub fn LLVMGetSections(ObjFile: ObjectFileRef) -> SectionIteratorRef;
LLVMGetStructElementTypes			        pub fn LLVMGetStructElementTypes(StructTy: TypeRef,
LLVMGetTarget			        pub fn LLVMGetTarget(M: ModuleRef) -> *c_char;
LLVMGetTypeContext			        pub fn LLVMGetTypeContext(Ty: TypeRef) -> ContextRef;
LLVMGetTypeKind			        pub fn LLVMGetTypeKind(Ty: TypeRef) -> TypeKind;
LLVMGetUndef			        pub fn LLVMGetUndef(Ty: TypeRef) -> ValueRef;
LLVMGetUsedValue			        pub fn LLVMGetUsedValue(U: UseRef) -> ValueRef;
LLVMGetUser			        pub fn LLVMGetUser(U: UseRef) -> ValueRef;
LLVMGetValueName			        pub fn LLVMGetValueName(Val: ValueRef) -> *c_char;
LLVMGetVectorSize			        pub fn LLVMGetVectorSize(VectorTy: TypeRef) -> c_uint;
LLVMGetVisibility			        pub fn LLVMGetVisibility(Global: ValueRef) -> c_uint;
LLVMGetVolatile			        pub fn LLVMGetVolatile(MemoryAccessInst: ValueRef) -> Bool;
LLVMHasMetadata			        pub fn LLVMHasMetadata(Val: ValueRef) -> c_int;
LLVMInitializeARMAsmParser			        pub fn LLVMInitializeARMAsmParser();
LLVMInitializeARMAsmPrinter			        pub fn LLVMInitializeARMAsmPrinter();
LLVMInitializeARMTarget			        pub fn LLVMInitializeARMTarget();
LLVMInitializeARMTargetInfo			        pub fn LLVMInitializeARMTargetInfo();
LLVMInitializeARMTargetMC			        pub fn LLVMInitializeARMTargetMC();
LLVMInitializeFunctionPassManager			        pub fn LLVMInitializeFunctionPassManager(FPM: PassManagerRef) -> Bool;
LLVMInitializeMipsAsmParser			        pub fn LLVMInitializeMipsAsmParser();
LLVMInitializeMipsAsmPrinter			        pub fn LLVMInitializeMipsAsmPrinter();
LLVMInitializeMipsTarget			        pub fn LLVMInitializeMipsTarget();
LLVMInitializeMipsTargetInfo			        pub fn LLVMInitializeMipsTargetInfo();
LLVMInitializeMipsTargetMC			        pub fn LLVMInitializeMipsTargetMC();
LLVMInitializePasses			        pub fn LLVMInitializePasses();
LLVMInitializeX86AsmParser			        pub fn LLVMInitializeX86AsmParser();
LLVMInitializeX86AsmPrinter			        pub fn LLVMInitializeX86AsmPrinter();
LLVMInitializeX86Target			        pub fn LLVMInitializeX86Target();
LLVMInitializeX86TargetInfo			        pub fn LLVMInitializeX86TargetInfo();
LLVMInitializeX86TargetMC			        pub fn LLVMInitializeX86TargetMC();
LLVMInlineAsm			        pub fn LLVMInlineAsm(Ty: TypeRef,
LLVMInsertBasicBlockInContext			        pub fn LLVMInsertBasicBlockInContext(C: ContextRef,
LLVMInsertIntoBuilder			        pub fn LLVMInsertIntoBuilder(Builder: BuilderRef, Instr: ValueRef);
LLVMInsertIntoBuilderWithName			        pub fn LLVMInsertIntoBuilderWithName(Builder: BuilderRef,
LLVMInstructionEraseFromParent			        pub fn LLVMInstructionEraseFromParent(Inst: ValueRef);
LLVMInt16TypeInContext			        pub fn LLVMInt16TypeInContext(C: ContextRef) -> TypeRef;
LLVMInt1TypeInContext			        pub fn LLVMInt1TypeInContext(C: ContextRef) -> TypeRef;
LLVMInt32TypeInContext			        pub fn LLVMInt32TypeInContext(C: ContextRef) -> TypeRef;
LLVMInt64TypeInContext			        pub fn LLVMInt64TypeInContext(C: ContextRef) -> TypeRef;
LLVMInt8TypeInContext			        pub fn LLVMInt8TypeInContext(C: ContextRef) -> TypeRef;
LLVMIntTypeInContext			        pub fn LLVMIntTypeInContext(C: ContextRef, NumBits: c_uint)
LLVMIsAAllocaInst			        pub fn LLVMIsAAllocaInst(value_ref: ValueRef) -> ValueRef;
LLVMIsAArgument			        pub fn LLVMIsAArgument(value_ref: ValueRef) -> ValueRef;
LLVMIsAStoreInst			        pub fn LLVMIsAStoreInst(Inst: ValueRef) -> ValueRef;
LLVMIsATerminatorInst			        pub fn LLVMIsATerminatorInst(Inst: ValueRef) -> ValueRef;
LLVMIsConstant			        pub fn LLVMIsConstant(Val: ValueRef) -> Bool;
LLVMIsDeclaration			        pub fn LLVMIsDeclaration(Global: ValueRef) -> Bool;
LLVMIsFunctionVarArg			        pub fn LLVMIsFunctionVarArg(FunctionTy: TypeRef) -> Bool;
LLVMIsGlobalConstant			        pub fn LLVMIsGlobalConstant(GlobalVar: ValueRef) -> Bool;
LLVMIsMultithreaded			        pub fn LLVMIsMultithreaded() -> Bool;
LLVMIsNull			        pub fn LLVMIsNull(Val: ValueRef) -> Bool;
LLVMIsPackedStruct			        pub fn LLVMIsPackedStruct(StructTy: TypeRef) -> Bool;
LLVMIsSectionIteratorAtEnd			        pub fn LLVMIsSectionIteratorAtEnd(ObjFile: ObjectFileRef,
LLVMIsTailCall			        pub fn LLVMIsTailCall(CallInst: ValueRef) -> Bool;
LLVMIsThreadLocal			        pub fn LLVMIsThreadLocal(GlobalVar: ValueRef) -> Bool;
LLVMIsUndef			        pub fn LLVMIsUndef(Val: ValueRef) -> Bool;
LLVMLabelTypeInContext			        pub fn LLVMLabelTypeInContext(C: ContextRef) -> TypeRef;
LLVMMDNodeInContext			        pub fn LLVMMDNodeInContext(C: ContextRef,
LLVMMDStringInContext			        pub fn LLVMMDStringInContext(C: ContextRef,
LLVMMetadataTypeInContext			        pub fn LLVMMetadataTypeInContext(C: ContextRef) -> TypeRef;
LLVMModuleCreateWithNameInContext			        pub fn LLVMModuleCreateWithNameInContext(ModuleID: *c_char,
LLVMMoveBasicBlockAfter			        pub fn LLVMMoveBasicBlockAfter(BB: BasicBlockRef,
LLVMMoveBasicBlockBefore			        pub fn LLVMMoveBasicBlockBefore(BB: BasicBlockRef,
LLVMMoveToNextSection			        pub fn LLVMMoveToNextSection(SI: SectionIteratorRef);
LLVMOffsetOfElement			        pub fn LLVMOffsetOfElement(TD: TargetDataRef,
LLVMPPCFP128TypeInContext			        pub fn LLVMPPCFP128TypeInContext(C: ContextRef) -> TypeRef;
LLVMPassManagerBuilderCreate			        pub fn LLVMPassManagerBuilderCreate() -> PassManagerBuilderRef;
LLVMPassManagerBuilderDispose			        pub fn LLVMPassManagerBuilderDispose(PMB: PassManagerBuilderRef);
LLVMPassManagerBuilderPopulateFunctionPassManager			        pub fn LLVMPassManagerBuilderPopulateFunctionPassManager(
LLVMPassManagerBuilderPopulateLTOPassManager			        pub fn LLVMPassManagerBuilderPopulateLTOPassManager(
LLVMPassManagerBuilderPopulateModulePassManager			        pub fn LLVMPassManagerBuilderPopulateModulePassManager(
LLVMPassManagerBuilderSetDisableSimplifyLibCalls			        pub fn LLVMPassManagerBuilderSetDisableSimplifyLibCalls(
LLVMPassManagerBuilderSetDisableUnitAtATime			        pub fn LLVMPassManagerBuilderSetDisableUnitAtATime(
LLVMPassManagerBuilderSetDisableUnrollLoops			        pub fn LLVMPassManagerBuilderSetDisableUnrollLoops(
LLVMPassManagerBuilderSetOptLevel			        pub fn LLVMPassManagerBuilderSetOptLevel(PMB: PassManagerBuilderRef,
LLVMPassManagerBuilderSetSizeLevel			        pub fn LLVMPassManagerBuilderSetSizeLevel(PMB: PassManagerBuilderRef,
LLVMPassManagerBuilderUseInlinerWithThreshold			        pub fn LLVMPassManagerBuilderUseInlinerWithThreshold(
LLVMPointerType			        pub fn LLVMPointerType(ElementType: TypeRef, AddressSpace: c_uint)
LLVMPositionBuilder			        pub fn LLVMPositionBuilder(Builder: BuilderRef,
LLVMPositionBuilderAtEnd			        pub fn LLVMPositionBuilderAtEnd(Builder: BuilderRef,
LLVMPositionBuilderBefore			        pub fn LLVMPositionBuilderBefore(Builder: BuilderRef,
LLVMPreferredAlignmentOfType			        pub fn LLVMPreferredAlignmentOfType(TD: TargetDataRef, Ty: TypeRef)
LLVMRemoveAttribute			        pub fn LLVMRemoveAttribute(Arg: ValueRef, PA: c_uint);
LLVMRemoveFunctionAttr			        pub fn LLVMRemoveFunctionAttr(Fn: ValueRef,
LLVMRemoveInstrAttribute			        pub fn LLVMRemoveInstrAttribute(Instr: ValueRef,
LLVMRemoveReturnAttribute			        pub fn LLVMRemoveReturnAttribute(Fn: ValueRef, PA: c_uint);
LLVMReplaceAllUsesWith			        pub fn LLVMReplaceAllUsesWith(OldVal: ValueRef, NewVal: ValueRef);
LLVMRunFunctionPassManager			        pub fn LLVMRunFunctionPassManager(FPM: PassManagerRef, F: ValueRef)
LLVMRunPassManager			        pub fn LLVMRunPassManager(PM: PassManagerRef, M: ModuleRef) -> Bool;
LLVMRustAddAlwaysInlinePass			        pub fn LLVMRustAddAlwaysInlinePass(P: PassManagerBuilderRef,
LLVMRustAddAnalysisPasses			        pub fn LLVMRustAddAnalysisPasses(T: TargetMachineRef,
LLVMRustAddBuilderLibraryInfo			        pub fn LLVMRustAddBuilderLibraryInfo(PMB: PassManagerBuilderRef,
LLVMRustAddLibraryInfo			        pub fn LLVMRustAddLibraryInfo(PM: PassManagerRef, M: ModuleRef);
LLVMRustAddModuleFlag			        pub fn LLVMRustAddModuleFlag(M: ModuleRef,
LLVMRustAddPass			        pub fn LLVMRustAddPass(PM: PassManagerRef, Pass: *c_char) -> bool;
LLVMRustArchiveReadSection			        pub fn LLVMRustArchiveReadSection(AR: ArchiveRef, name: *c_char,
LLVMRustCreateMemoryBufferWithContentsOfFile			        pub fn LLVMRustCreateMemoryBufferWithContentsOfFile(Path: *c_char)
LLVMRustCreateTargetMachine			        pub fn LLVMRustCreateTargetMachine(Triple: *c_char,
LLVMRustDestroyArchive			        pub fn LLVMRustDestroyArchive(AR: ArchiveRef);
LLVMRustDisposeTargetMachine			        pub fn LLVMRustDisposeTargetMachine(T: TargetMachineRef);
LLVMRustGetLastError			        pub fn LLVMRustGetLastError() -> *c_char;
LLVMRustLinkInExternalBitcode			        pub fn LLVMRustLinkInExternalBitcode(M: ModuleRef,
LLVMRustMarkAllFunctionsNounwind			        pub fn LLVMRustMarkAllFunctionsNounwind(M: ModuleRef);
LLVMRustOpenArchive			        pub fn LLVMRustOpenArchive(path: *c_char) -> ArchiveRef;
LLVMRustPrintModule			        pub fn LLVMRustPrintModule(PM: PassManagerRef,
LLVMRustPrintPassTimings			        pub fn LLVMRustPrintPassTimings();
LLVMRustPrintPasses			        pub fn LLVMRustPrintPasses();
LLVMRustRunFunctionPassManager			        pub fn LLVMRustRunFunctionPassManager(PM: PassManagerRef, M: ModuleRef);
LLVMRustRunRestrictionPass			        pub fn LLVMRustRunRestrictionPass(M: ModuleRef,
LLVMRustSetDLLExportStorageClass			        pub fn LLVMRustSetDLLExportStorageClass(V: ValueRef);
LLVMRustSetLLVMOptions			        pub fn LLVMRustSetLLVMOptions(Argc: c_int, Argv: **c_char);
LLVMRustSetNormalizedTarget			        pub fn LLVMRustSetNormalizedTarget(M: ModuleRef, triple: *c_char);
LLVMRustWriteOutputFile			        pub fn LLVMRustWriteOutputFile(T: TargetMachineRef,
LLVMSetAlignment			        pub fn LLVMSetAlignment(Global: ValueRef, Bytes: c_uint);
LLVMSetCleanup			        pub fn LLVMSetCleanup(LandingPad: ValueRef, Val: Bool);
LLVMSetCurrentDebugLocation			        pub fn LLVMSetCurrentDebugLocation(Builder: BuilderRef, L: ValueRef);
LLVMSetDataLayout			        pub fn LLVMSetDataLayout(M: ModuleRef, Triple: *c_char);
LLVMSetDebug			        pub fn LLVMSetDebug(Enabled: c_int);
LLVMSetFunctionCallConv			        pub fn LLVMSetFunctionCallConv(Fn: ValueRef, CC: c_uint);
LLVMSetGC			        pub fn LLVMSetGC(Fn: ValueRef, Name: *c_char);
LLVMSetGlobalConstant			        pub fn LLVMSetGlobalConstant(GlobalVar: ValueRef, IsConstant: Bool);
LLVMSetInitializer			        pub fn LLVMSetInitializer(GlobalVar: ValueRef,
LLVMSetInstDebugLocation			        pub fn LLVMSetInstDebugLocation(Builder: BuilderRef, Inst: ValueRef);
LLVMSetInstrParamAlignment			        pub fn LLVMSetInstrParamAlignment(Instr: ValueRef,
LLVMSetInstructionCallConv			        pub fn LLVMSetInstructionCallConv(Instr: ValueRef, CC: c_uint);
LLVMSetLinkage			        pub fn LLVMSetLinkage(Global: ValueRef, Link: c_uint);
LLVMSetMetadata			        pub fn LLVMSetMetadata(Val: ValueRef, KindID: c_uint, Node: ValueRef);
LLVMSetModuleInlineAsm			        pub fn LLVMSetModuleInlineAsm(M: ModuleRef, Asm: *c_char);
LLVMSetOperand			        pub fn LLVMSetOperand(Val: ValueRef, Index: c_uint, Op: ValueRef);
LLVMSetParamAlignment			        pub fn LLVMSetParamAlignment(Arg: ValueRef, align: c_uint);
LLVMSetSection			        pub fn LLVMSetSection(Global: ValueRef, Section: *c_char);
LLVMSetTailCall			        pub fn LLVMSetTailCall(CallInst: ValueRef, IsTailCall: Bool);
LLVMSetTarget			        pub fn LLVMSetTarget(M: ModuleRef, Triple: *c_char);
LLVMSetThreadLocal			        pub fn LLVMSetThreadLocal(GlobalVar: ValueRef, IsThreadLocal: Bool);
LLVMSetUnnamedAddr			        pub fn LLVMSetUnnamedAddr(GlobalVar: ValueRef, UnnamedAddr: Bool);
LLVMSetValueName			        pub fn LLVMSetValueName(Val: ValueRef, Name: *c_char);
LLVMSetVisibility			        pub fn LLVMSetVisibility(Global: ValueRef, Viz: c_uint);
LLVMSetVolatile			        pub fn LLVMSetVolatile(MemoryAccessInst: ValueRef, volatile: Bool);
LLVMSizeOf			        pub fn LLVMSizeOf(Ty: TypeRef) -> ValueRef;
LLVMSizeOfTypeInBits			        pub fn LLVMSizeOfTypeInBits(TD: TargetDataRef, Ty: TypeRef)
LLVMStartMultithreaded			        pub fn LLVMStartMultithreaded() -> Bool;
LLVMStoreSizeOfType			        pub fn LLVMStoreSizeOfType(TD: TargetDataRef, Ty: TypeRef)
LLVMStructCreateNamed			        pub fn LLVMStructCreateNamed(C: ContextRef, Name: *c_char) -> TypeRef;
LLVMStructSetBody			        pub fn LLVMStructSetBody(StructTy: TypeRef,
LLVMStructTypeInContext			        pub fn LLVMStructTypeInContext(C: ContextRef,
LLVMTypeOf			        pub fn LLVMTypeOf(Val: ValueRef) -> TypeRef;
LLVMTypeToString			        pub fn LLVMTypeToString(Type: TypeRef) -> *c_char;
LLVMValueAsBasicBlock			        pub fn LLVMValueAsBasicBlock(Val: ValueRef) -> BasicBlockRef;
LLVMValueIsBasicBlock			        pub fn LLVMValueIsBasicBlock(Val: ValueRef) -> Bool;
LLVMValueToString			        pub fn LLVMValueToString(value_ref: ValueRef) -> *c_char;
LLVMVectorType			        pub fn LLVMVectorType(ElementType: TypeRef, ElementCount: c_uint)
LLVMVersionMinor			        pub fn LLVMVersionMinor() -> c_int;
LLVMVoidTypeInContext			        pub fn LLVMVoidTypeInContext(C: ContextRef) -> TypeRef;
LLVMWriteBitcodeToFile			        pub fn LLVMWriteBitcodeToFile(M: ModuleRef, Path: *c_char) -> c_int;
LLVMX86FP80TypeInContext			        pub fn LLVMX86FP80TypeInContext(C: ContextRef) -> TypeRef;
LShr			pub fn LShr(cx: &Block, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
LandingPad			pub fn LandingPad(cx: &Block, ty: Type, pers_fn: ValueRef,
LangItem			pub enum LangItem 
LanguageItemCollector			struct LanguageItemCollector<'a> 
LanguageItems			impl LanguageItems 
LanguageItems			pub struct LanguageItems 
LastPrivate			impl LastPrivate 
LastPrivate			pub enum LastPrivate 
LatticeDir			pub trait LatticeDir 
LatticeValue			impl LatticeValue for ty::t 
LatticeValue			pub trait LatticeValue 
LatticeVarResult			pub enum LatticeVarResult<V,T> 
Library			pub struct Library 
LifeGiver			impl LifeGiver 
LifeGiver			struct LifeGiver 
LifeSeeder			struct LifeSeeder 
LifetimeContext			struct LifetimeContext<'a> 
LinkMeta			pub struct LinkMeta 
Linkage			pub enum Linkage 
LinkagePreference			pub enum LinkagePreference 
Lint			pub enum Lint 
LintSource			enum LintSource 
LintSpec			pub struct LintSpec 
List			struct List 
Lit			enum Lit 
LiveNode			impl LiveNode 
LiveNode			struct LiveNode(uint);
LiveNodeKind			enum LiveNodeKind 
Liveness			fn Liveness<'a>(ir: &'a mut IrMaps<'a>, specials: Specials) -> Liveness<'a> 
Liveness			struct Liveness<'a> 
LlvmRepr			impl LlvmRepr for Type 
LlvmRepr			impl LlvmRepr for ValueRef 
LlvmRepr			pub trait LlvmRepr 
LlvmSignature			struct LlvmSignature 
Load			pub fn Load(cx: &Block, pointer_val: ValueRef) -> ValueRef 
LoadRangeAssert			pub fn LoadRangeAssert(cx: &Block, pointer_val: ValueRef, lo: c_ulonglong,
Loader			pub struct Loader<'a> 
Loan			pub struct Loan 
LoanCause			pub enum LoanCause 
LoanDataFlowOperator			pub struct LoanDataFlowOperator;
LoanPath			impl LoanPath 
LoanPath			pub enum LoanPath 
LoanPathElem			pub enum LoanPathElem 
LocalInfo			struct LocalInfo 
LocalKind			enum LocalKind 
LookupContext			struct LookupContext<'a> 
LoopQueryVisitor			struct LoopQueryVisitor<'a> 
LoopScope			struct LoopScope 
LoopScope			struct LoopScope<'a> 
Lub			pub struct Lub<'f>(CombineFields<'f>);  \/\/ least-upper-bound: common supertype
Lvalue			pub struct Lvalue;
LvaluePreference			pub enum LvaluePreference 
MacroDefVisitor			struct MacroDefVisitor<'a, 'b> 
Malloc			pub fn Malloc(cx: &Block, ty: Type) -> ValueRef 
MallocResult			pub struct MallocResult<'a> 
Maps			pub struct Maps 
MarkSymbolVisitor			struct MarkSymbolVisitor<'a> 
Match			struct Match<'a,'b> 
MatchCheckCtxt			struct MatchCheckCtxt<'a> 
MemCategorizationContext			pub struct MemCategorizationContext<TYPER> 
MemberDescription			struct MemberDescription 
MemberDescriptionFactory			enum MemberDescriptionFactory 
MemberDescriptionFactory			impl MemberDescriptionFactory 
MemberOffset			enum MemberOffset 
MemoryBuffer_opaque			pub enum MemoryBuffer_opaque {}
Metadata			pub enum Metadata 
MetadataBlob			impl MetadataBlob 
MetadataBlob			pub enum MetadataBlob 
Method			impl Method 
Method			pub struct Method 
MethodCall			impl MethodCall 
MethodCall			pub struct MethodCall 
MethodCallee			pub struct MethodCallee 
MethodContainer			pub enum MethodContainer 
MethodData			pub struct MethodData 
MethodObject			pub struct MethodObject 
MethodOrigin			pub enum MethodOrigin 
MethodParam			pub struct MethodParam 
MethodSort			enum MethodSort 
Module			impl Module 
Module			struct Module 
ModuleKind			enum ModuleKind 
ModulePrefixResult			enum ModulePrefixResult 
Module_opaque			pub enum Module_opaque {}
MonoDataClass			pub enum MonoDataClass 
Move			pub struct Move 
MoveData			impl MoveData 
MoveData			pub struct MoveData 
MoveDataFlowOperator			pub struct MoveDataFlowOperator;
MoveError			enum MoveError 
MoveIndex			impl MoveIndex 
MoveIndex			pub struct MoveIndex(uint);
MoveKind			pub enum MoveKind 
MoveMaps			pub struct MoveMaps 
MovePath			pub struct MovePath 
MovePathIndex			impl MovePathIndex 
MovePathIndex			pub struct MovePathIndex(uint);
MovedValueUseKind			pub enum MovedValueUseKind 
Mul			pub fn Mul(cx: &Block, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
MutabilityCategory			impl MutabilityCategory 
MutabilityCategory			pub enum MutabilityCategory 
NSWAdd			pub fn NSWAdd(cx: &Block, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
NSWMul			pub fn NSWMul(cx: &Block, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
NSWNeg			pub fn NSWNeg(cx: &Block, v: ValueRef) -> ValueRef 
NSWSub			pub fn NSWSub(cx: &Block, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
NUWAdd			pub fn NUWAdd(cx: &Block, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
NUWMul			pub fn NUWMul(cx: &Block, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
NUWNeg			pub fn NUWNeg(cx: &Block, v: ValueRef) -> ValueRef 
NUWSub			pub fn NUWSub(cx: &Block, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
NameBindings			fn NameBindings() -> NameBindings 
NameBindings			impl NameBindings 
NameBindings			struct NameBindings 
NameDefinition			enum NameDefinition 
NameSearchType			enum NameSearchType 
Namespace			enum Namespace 
NamespaceError			enum NamespaceError 
NamespaceResult			enum NamespaceResult 
NamespaceResult			impl NamespaceResult 
NamespaceTreeNode			impl NamespaceTreeNode 
NamespaceTreeNode			struct NamespaceTreeNode 
NativeLibaryKind			pub enum NativeLibaryKind 
Neg			pub fn Neg(cx: &Block, v: ValueRef) -> ValueRef 
NestedItemsDropper			struct NestedItemsDropper;
Node			pub struct Node<N> 
Node			pub struct Node<V, T> 
NodeIdAssigner			struct NodeIdAssigner<'a> 
NodeIndex			impl NodeIndex 
NodeIndex			pub struct NodeIndex(uint);
NodeInfo			pub struct NodeInfo 
NodeMap			pub mod NodeMap 
NodeSet			pub mod NodeSet 
Not			pub fn Not(cx: &Block, v: ValueRef) -> ValueRef 
ObjectFile			impl ObjectFile 
ObjectFile			pub struct ObjectFile 
ObjectFile_opaque			pub enum ObjectFile_opaque {}
Opt			enum Opt 
OptLevel			pub enum OptLevel 
Option			    enum Option<A> { Some(A), None }
OptionalFn			    enum OptionalFn<B> { Some(|B|), None }
OptionalMap			    enum OptionalMap<C> { Some(|C| -> C), None }
Options			pub struct Options 
Or			pub fn Or(cx: &Block, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
Os			pub enum Os 
OutputFilenames			impl OutputFilenames 
OutputFilenames			pub struct OutputFilenames 
OutputType			pub enum OutputType 
PState			pub struct PState<'a> 
ParamBounds			pub struct ParamBounds 
ParamKind			enum ParamKind { TypeParam, RegionParam, SelfParam }
ParameterEnvironment			pub struct ParameterEnvironment 
ParamsTy			pub struct ParamsTy 
ParentLink			enum ParentLink 
ParentVisitor			struct ParentVisitor 
PartialTotal			pub enum PartialTotal 
PassManager			pub struct PassManager 
PassManagerBuilder_opaque			pub enum PassManagerBuilder_opaque {}
PassManager_opaque			pub enum PassManager_opaque {}
Pass_opaque			pub enum Pass_opaque {}
PatternBindingMode			enum PatternBindingMode 
Phi			pub fn Phi(cx: &Block, ty: Type, vals: &[ValueRef], bbs: &[BasicBlockRef]) -> ValueRef 
PointerCast			pub fn PointerCast(cx: &Block, val: ValueRef, dest_ty: Type) -> ValueRef 
PointerKind			pub enum PointerKind 
PointerKind			pub enum PointerKind { Send, Borrowed }
PointerTy			    enum PointerTy 
PointerTy			    impl PointerTy 
PpMode			pub enum PpMode 
PreludeInjector			struct PreludeInjector<'a> 
PrimitiveTypeTable			fn PrimitiveTypeTable() -> PrimitiveTypeTable 
PrimitiveTypeTable			impl PrimitiveTypeTable 
PrimitiveTypeTable			struct PrimitiveTypeTable 
PrivacyResult			enum PrivacyResult 
PrivacyVisitor			struct PrivacyVisitor<'a> 
PrivateDep			pub enum PrivateDep 
PrivilegedScopeVisitor			struct PrivilegedScopeVisitor<'a> { cc: &'a CoherenceChecker<'a> }
PropagationContext			struct PropagationContext<'a, 'b, O> 
PtrDiff			pub fn PtrDiff(cx: &Block, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
PtrToInt			pub fn PtrToInt(cx: &Block, val: ValueRef, dest_ty: Type) -> ValueRef 
PurityState			impl PurityState 
PurityState			pub struct PurityState 
RH			struct RH 
RawPtrDerivingVisitor			struct RawPtrDerivingVisitor<'a> 
RcvrMatchCondition			pub enum RcvrMatchCondition 
Rcx			pub struct Rcx<'a> 
ReScope_id_to_str			pub fn ReScope_id_to_str(cx: &ctxt, node_id: ast::NodeId) -> ~str 
ReachableContext			struct ReachableContext<'a> 
RealPredicate			pub enum RealPredicate 
Rebuilder			struct Rebuilder<'a> 
RecursiveTypeDescription			enum RecursiveTypeDescription 
RecursiveTypeDescription			impl RecursiveTypeDescription 
ReducedGraphParent			enum ReducedGraphParent 
ReducedGraphParent			impl ReducedGraphParent 
Reflector			pub struct Reflector<'a> 
RegClass			enum RegClass 
RegClass			impl RegClass 
Region			impl Region 
Region			pub enum Region 
RegionAndOrigin			struct RegionAndOrigin 
RegionFolder			pub struct RegionFolder<'a> 
RegionMaps			impl RegionMaps 
RegionMaps			pub struct RegionMaps 
RegionParameterDef			pub struct RegionParameterDef 
RegionRelator			    struct RegionRelator<'a> 
RegionResolutionError			pub enum RegionResolutionError 
RegionResolutionVisitor			struct RegionResolutionVisitor<'a> 
RegionScope			impl RegionScope for BindingRscope 
RegionScope			impl RegionScope for ExplicitRscope 
RegionScope			pub trait RegionScope 
RegionSubsts			pub enum RegionSubsts 
RegionVarBindings			pub fn RegionVarBindings<'a>(tcx: &'a ty::ctxt) -> RegionVarBindings<'a> 
RegionVarBindings			pub struct RegionVarBindings<'a> 
RegionVariableOrigin			impl RegionVariableOrigin 
RegionVariableOrigin			pub enum RegionVariableOrigin 
RegionVid			pub struct RegionVid 
RelocMode			pub enum RelocMode 
Repr			impl Repr for Loan 
Repr			impl Repr for LoanPath 
Repr			impl Repr for Restriction 
Repr			impl Repr for RestrictionSet 
Repr			impl Repr for InteriorKind 
Repr			impl Repr for categorization 
Repr			impl Repr for cmt_ 
Repr			pub enum Repr 
Repr			impl Repr for param_substs 
Repr			impl Repr for Candidate 
Repr			impl Repr for RcvrMatchCondition 
Repr			impl Repr for RegionVariableOrigin 
Repr			impl Repr for SubregionOrigin 
Repr			impl Repr for TypeOrigin 
Repr			impl Repr for TypeTrace 
Repr			impl Repr for Constraint 
Repr			impl Repr for impl_res 
Repr			impl Repr for vtable_origin 
Repr			impl Repr for () 
Repr			impl Repr for AbiSet 
Repr			impl Repr for Span 
Repr			impl Repr for ast::DefId 
Repr			impl Repr for ast::ExplicitSelf_ 
Repr			impl Repr for ast::Expr 
Repr			impl Repr for ast::Ident 
Repr			impl Repr for ast::Item 
Repr			impl Repr for ast::Mutability 
Repr			impl Repr for ast::Name 
Repr			impl Repr for ast::Pat 
Repr			impl Repr for ast::Stmt 
Repr			impl Repr for ast::Visibility 
Repr			impl Repr for ty::BareFnTy 
Repr			impl Repr for ty::BorrowKind 
Repr			impl Repr for ty::BoundRegion 
Repr			impl Repr for ty::BuiltinBound 
Repr			impl Repr for ty::BuiltinBounds 
Repr			impl Repr for ty::FnSig 
Repr			impl Repr for ty::Generics 
Repr			impl Repr for ty::ItemVariances 
Repr			impl Repr for ty::Method 
Repr			impl Repr for ty::ParamBounds 
Repr			impl Repr for ty::Region 
Repr			impl Repr for ty::RegionParameterDef 
Repr			impl Repr for ty::RegionSubsts 
Repr			impl Repr for ty::RegionVid 
Repr			impl Repr for ty::TraitRef 
Repr			impl Repr for ty::TraitStore 
Repr			impl Repr for ty::TypeParameterDef 
Repr			impl Repr for ty::UpvarBorrow 
Repr			impl Repr for ty::UpvarId 
Repr			impl Repr for ty::Variance 
Repr			impl Repr for ty::substs 
Repr			impl Repr for ty::t 
Repr			impl Repr for ty::ty_param_bounds_and_ty 
Repr			impl Repr for ty::vstore 
Repr			impl Repr for typeck::MethodCallee 
Repr			impl Repr for typeck::MethodObject 
Repr			impl Repr for typeck::MethodOrigin 
Repr			impl Repr for typeck::MethodParam 
Repr			pub trait Repr 
Representability			pub enum Representability 
Resolvable			impl Resolvable for @ty::TraitRef 
Resolvable			impl Resolvable for ty::t 
Resolvable			trait Resolvable 
ResolveResult			enum ResolveResult<T> 
ResolveState			pub struct ResolveState<'a> 
Resolver			fn Resolver<'a>(session: &'a Session,
Resolver			struct Resolver<'a> 
Restriction			pub struct Restriction 
RestrictionResult			pub enum RestrictionResult 
RestrictionSet			impl RestrictionSet 
RestrictionSet			pub struct RestrictionSet 
RestrictionsContext			struct RestrictionsContext<'a> 
Result			pub struct Result<'a> 
Resume			pub fn Resume(cx: &Block, exn: ValueRef) -> ValueRef 
Ret			pub fn Ret(cx: &Block, v: ValueRef) 
RetVoid			pub fn RetVoid(cx: &Block) 
Rib			impl Rib 
Rib			struct Rib 
RibKind			enum RibKind 
RootInfo			pub struct RootInfo 
Rvalue			pub fn Rvalue(m: RvalueMode) -> Rvalue 
Rvalue			pub struct Rvalue 
RvalueMode			pub enum RvalueMode 
S			struct S { f: uint }
SDiv			pub fn SDiv(cx: &Block, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
SExt			pub fn SExt(cx: &Block, val: ValueRef, dest_ty: Type) -> ValueRef 
SExtOrBitCast			pub fn SExtOrBitCast(cx: &Block, val: ValueRef, dest_ty: Type) -> ValueRef 
SIToFP			pub fn SIToFP(cx: &Block, val: ValueRef, dest_ty: Type) -> ValueRef 
SRem			pub fn SRem(cx: &Block, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
SameRegions			impl SameRegions 
SameRegions			pub struct SameRegions 
SanePrivacyVisitor			struct SanePrivacyVisitor<'a> 
ScopeChain			enum ScopeChain<'a> 
ScopeId			pub enum ScopeId 
ScopeStackEntry			    struct ScopeStackEntry 
SearchThroughModulesFlag			enum SearchThroughModulesFlag 
SectionIter			pub struct SectionIter 
SectionIterator_opaque			pub enum SectionIterator_opaque {}
Select			pub fn Select(cx: &Block, if_: ValueRef, then: ValueRef, else_: ValueRef) -> ValueRef 
SelfInfo			struct SelfInfo 
Session			impl Session 
Session			pub struct Session 
SetCleanup			pub fn SetCleanup(cx: &Block, landing_pad: ValueRef) 
SetFunctionAttribute			pub fn SetFunctionAttribute(fn_: ValueRef, attr: Attribute) 
SetFunctionCallConv			pub fn SetFunctionCallConv(fn_: ValueRef, cc: CallConv) 
SetInstructionCallConv			pub fn SetInstructionCallConv(instr: ValueRef, cc: CallConv) 
SetLinkage			pub fn SetLinkage(global: ValueRef, link: Linkage) 
SetUnnamedAddr			pub fn SetUnnamedAddr(global: ValueRef, unnamed: bool) 
Sha256			impl Sha256 
Sha256			pub struct Sha256 
Shl			pub fn Shl(cx: &Block, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
ShowSpanVisitor			struct ShowSpanVisitor<'a> 
ShuffleVector			pub fn ShuffleVector(cx: &Block, v1: ValueRef, v2: ValueRef,
SideTableEncodingIdVisitor			struct SideTableEncodingIdVisitor<'a,'b> 
SimplyUnifiable			impl SimplyUnifiable for IntVarValue 
SimplyUnifiable			impl SimplyUnifiable for ast::FloatTy 
SimplyUnifiable			pub trait SimplyUnifiable 
Snapshot			pub struct Snapshot 
SolveContext			struct SolveContext<'a> 
Specials			struct Specials 
StandardLibraryInjector			struct StandardLibraryInjector<'a> 
StandardPadding			impl <T: FixedBuffer> StandardPadding for T 
StandardPadding			trait StandardPadding 
StatRecorder			pub struct StatRecorder<'a> 
StaticInitializerCtxt			struct StaticInitializerCtxt<'a> 
StaticMethodInfo			pub struct StaticMethodInfo 
Stats			pub struct Stats 
Stats			pub struct Stats 
Status			enum Status 
Store			pub fn Store(cx: &Block, val: ValueRef, ptr: ValueRef) 
Strategy			        enum Strategy { RetValue(Type), RetPointer }
Struct			pub struct Struct 
StructBaseInfo			struct StructBaseInfo 
StructGEP			pub fn StructGEP(cx: &Block, pointer: ValueRef, idx: uint) -> ValueRef 
StructMemberDescriptionFactory			impl StructMemberDescriptionFactory 
StructMemberDescriptionFactory			struct StructMemberDescriptionFactory 
Sub			pub fn Sub(cx: &Block, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
Sub			pub struct Sub<'f>(CombineFields<'f>);  \/\/ "subtype", "subregion" etc
SubregionOrigin			impl SubregionOrigin 
SubregionOrigin			pub enum SubregionOrigin 
Subst			impl Subst for ty::BareFnTy 
Subst			impl Subst for ty::Generics 
Subst			impl Subst for ty::ParamBounds 
Subst			impl Subst for ty::Region 
Subst			impl Subst for ty::RegionParameterDef 
Subst			impl Subst for ty::RegionSubsts 
Subst			impl Subst for ty::TraitRef 
Subst			impl Subst for ty::TypeParameterDef 
Subst			impl Subst for ty::substs 
Subst			impl Subst for ty::t 
Subst			impl Subst for ty::ty_param_bounds_and_ty 
Subst			pub trait Subst 
SubstFolder			struct SubstFolder<'a> 
Svh			impl Svh 
Svh			pub struct Svh 
Switch			pub fn Switch(cx: &Block, v: ValueRef, else_: BasicBlockRef, num_cases: uint)
TC			    mod TC 
Target			impl Target 
Target			struct Target 
TargetData			pub struct TargetData 
TargetData_opaque			pub enum TargetData_opaque {}
TargetMachine_opaque			pub enum TargetMachine_opaque {}
TcxTyper			pub struct TcxTyper<'a> 
TermsContext			struct TermsContext<'a> 
Test			struct Test 
Test			    struct Test 
TestCtxt			struct TestCtxt<'a> 
TestHarnessGenerator			struct TestHarnessGenerator<'a> 
ToBits			impl ToBits for u64 
ToBits			trait ToBits 
ToTy			pub trait ToTy 
ToUres			trait ToUres 
TotalEq			impl TotalEq for intern_key {}
TpsSubst			    struct TpsSubst<'a> 
TraitDef			pub struct TraitDef 
TraitRef			pub struct TraitRef 
TraitReferenceType			enum TraitReferenceType 
TraitStore			pub enum TraitStore 
TransBindingMode			enum TransBindingMode 
TransItemVisitor			pub struct TransItemVisitor<'a> 
Trap			pub fn Trap(cx: &Block) 
Trunc			pub fn Trunc(cx: &Block, val: ValueRef, dest_ty: Type) -> ValueRef 
TruncOrBitCast			pub fn TruncOrBitCast(cx: &Block, val: ValueRef, dest_ty: Type) -> ValueRef 
TupleMemberDescriptionFactory			impl TupleMemberDescriptionFactory 
TupleMemberDescriptionFactory			struct TupleMemberDescriptionFactory 
TwoRegions			pub struct TwoRegions 
TyLatticeDir			pub trait TyLatticeDir 
TyTrait			pub struct TyTrait 
TyVid			pub struct TyVid(uint);
Type			impl Type 
Type			pub struct Type 
TypeContents			impl TypeContents 
TypeContents			pub struct TypeContents 
TypeFolder			pub trait TypeFolder 
TypeKind			pub enum TypeKind 
TypeMethods			impl TypeMethods for Type 
TypeMethods			trait TypeMethods 
TypeNames			impl TypeNames 
TypeNames			pub struct TypeNames 
TypeNormalizer			    struct TypeNormalizer<'a>(&'a ctxt);
TypeNsDef			struct TypeNsDef 
TypeOrigin			impl TypeOrigin 
TypeOrigin			pub enum TypeOrigin 
TypeParameterDef			pub struct TypeParameterDef 
TypeParameters			enum TypeParameters<'a> 
TypeTrace			impl TypeTrace 
TypeTrace			pub struct TypeTrace 
Type_opaque			pub enum Type_opaque {}
TypedAnnotation			struct TypedAnnotation 
Typer			pub trait Typer 
UDiv			pub fn UDiv(cx: &Block, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
UIToFP			pub fn UIToFP(cx: &Block, val: ValueRef, dest_ty: Type) -> ValueRef 
URem			pub fn URem(cx: &Block, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
UndoLogEntry			pub enum UndoLogEntry 
UnifyInferCtxtMethods			pub trait UnifyInferCtxtMethods 
UnifyVid			impl UnifyVid<Bounds<ty::t>> for ty::TyVid 
UnifyVid			impl UnifyVid<Option<IntVarValue>> for ty::IntVid 
UnifyVid			impl UnifyVid<Option<ast::FloatTy>> for ty::FloatVid 
UnifyVid			pub trait UnifyVid<T> 
UniversalQuantificationResult			struct UniversalQuantificationResult 
Unreachable			pub fn Unreachable(cx: &Block) 
UnsafeContext			enum UnsafeContext 
UnusedImportCheckVisitor			struct UnusedImportCheckVisitor<'a, 'b> { resolver: &'a mut Resolver<'b> }
UpvarBorrow			pub struct UpvarBorrow 
UpvarId			pub struct UpvarId 
Use			impl Use 
Use			pub struct Use(UseRef);
UseLexicalScopeFlag			enum UseLexicalScopeFlag 
UseMode			enum UseMode 
Use_opaque			pub enum Use_opaque {}
UserString			impl UserString for AbiSet 
UserString			impl UserString for ast::Ident 
UserString			impl UserString for ty::BuiltinBound 
UserString			impl UserString for ty::BuiltinBounds 
UserString			impl UserString for ty::TraitRef 
UserString			impl UserString for ty::t 
UserString			pub trait UserString 
Users			struct Users 
Users			pub struct Users 
VAArg			pub fn VAArg(cx: &Block, list: ValueRef, ty: Type) -> ValueRef 
ValsAndBindings			pub struct ValsAndBindings<V, T> 
Value			impl Value 
Value			pub struct Value(ValueRef);
ValueNsDef			struct ValueNsDef 
ValuePairs			pub enum ValuePairs 
Value_opaque			pub enum Value_opaque {}
VarData			struct VarData 
VarKind			enum VarKind 
VarValue			pub enum VarValue { NoValue, Value(Region), ErrorValue }
VarValue			pub enum VarValue<V, T> 
Variable			impl Variable 
Variable			struct Variable(uint);
VariableAccess			enum VariableAccess<'a> 
VariableKind			enum VariableKind 
Variance			impl Variance 
Variance			pub enum Variance 
VarianceTerm			enum VarianceTerm<'a> 
VariantInfo			impl VariantInfo 
VariantInfo			pub struct VariantInfo 
VecLenOpt			pub enum VecLenOpt 
VecTypes			impl VecTypes 
VecTypes			pub struct VecTypes 
VectorSplat			pub fn VectorSplat(cx: &Block, num_elts: uint, elt_val: ValueRef) -> ValueRef 
Vid			impl Vid for FloatVid 
Vid			impl Vid for IntVid 
Vid			impl Vid for RegionVid 
Vid			impl Vid for TyVid 
Vid			pub trait Vid 
Visibility			pub enum Visibility 
VisiblePrivateTypesVisitor			struct VisiblePrivateTypesVisitor<'a> 
VisitContext			struct VisitContext<'a> 
Visitor			impl Visitor<()> for LifeSeeder 
Visitor			impl Visitor<()> for AnnotateFreevarsVisitor 
Visitor			impl Visitor<int> for CollectFreevarsVisitor 
Visitor			impl Visitor<()> for ParentVisitor 
Visitor			    impl Visitor<()> for FreeLifetimeCollector 
VolatileLoad			pub fn VolatileLoad(cx: &Block, pointer_val: ValueRef) -> ValueRef 
VolatileStore			pub fn VolatileStore(cx: &Block, val: ValueRef, ptr: ValueRef) 
VtableContext			pub struct VtableContext<'a> 
WalkState			        struct WalkState 
WbCtxt			struct WbCtxt<'a> 
WriteOutputFile			pub fn WriteOutputFile(
Writer			impl Writer for FnvState 
Xform			impl Xform for ty::Variance 
Xform			trait Xform 
Xor			pub fn Xor(cx: &Block, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
ZExt			pub fn ZExt(cx: &Block, val: ValueRef, dest_ty: Type) -> ValueRef 
ZExtOrBitCast			pub fn ZExtOrBitCast(cx: &Block, val: ValueRef, dest_ty: Type) -> ValueRef 
_InsnCtxt			pub struct _InsnCtxt { _x: () }
_Undef			pub fn _Undef(val: ValueRef) -> ValueRef 
_UndefReturn			pub fn _UndefReturn(cx: &Block, fn_: ValueRef) -> ValueRef 
__test			mod __test 
_indenter			pub fn _indenter(_i: ()) -> _indenter 
_indenter			pub struct _indenter 
_match			pub mod _match;
_match			pub mod _match;
a_is_expected			    fn a_is_expected(&self) -> bool;
a_is_expected			    fn a_is_expected(&self) -> bool { self.get_ref().a_is_expected }
a_is_expected			    fn a_is_expected(&self) -> bool { self.get_ref().a_is_expected }
a_is_expected			    fn a_is_expected(&self) -> bool { self.get_ref().a_is_expected }
abbrev_ctxt			pub enum abbrev_ctxt 
abi			    pub mod abi;
abis			    fn abis(&self, a: AbiSet, b: AbiSet) -> cres<AbiSet> 
abort_if_errors			    pub fn abort_if_errors(&self) 
acc			    fn acc(&mut self, ln: LiveNode, var: Variable, acc: uint) 
access_path			    fn access_path(&mut self, expr: &Expr, succ: LiveNode, acc: uint)
add			    pub fn add(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
add			    fn add(p: &mut uint, v: uint) 
add_archive			    fn add_archive(&mut self, archive: &Path, name: &str,
add_argument_attributes			fn add_argument_attributes(tys: &ForeignTypes,
add_assignment			    pub fn add_assignment(&self,
add_bytes_to_bits			fn add_bytes_to_bits<T: Int + CheckedAdd + ToBits>(bits: T, bytes: T) -> T 
add_cached_early_exit			    fn add_cached_early_exit(&mut self,
add_child			    fn add_child(&mut self,
add_clean			    pub fn add_clean(self,
add_clean_if_rvalue			    pub fn add_clean_if_rvalue<'a>(self,
add_comment			pub fn add_comment(cx: &Block, text: &str) 
add_comment			    pub fn add_comment(&self, text: &str) 
add_constraint			    pub fn add_constraint(&self,
add_constraint			    fn add_constraint(&mut self,
add_constraints_from_crate			fn add_constraints_from_crate<'a>(terms_cx: TermsContext<'a>,
add_constraints_from_mt			    fn add_constraints_from_mt(&mut self,
add_constraints_from_region			    fn add_constraints_from_region(&mut self,
add_constraints_from_sig			    fn add_constraints_from_sig(&mut self,
add_constraints_from_substs			    fn add_constraints_from_substs(&mut self,
add_constraints_from_ty			    fn add_constraints_from_ty(&mut self,
add_constraints_from_vstore			    fn add_constraints_from_vstore(&mut self,
add_contained_edge			    fn add_contained_edge(&mut self,
add_dummy_node			    fn add_dummy_node(&mut self, preds: &[CFGIndex]) -> CFGIndex 
add_dynamic_crates			    fn add_dynamic_crates(args: &mut Vec<~str>, sess: &Session,
add_edge			    pub fn add_edge(&mut self,
add_env			    fn add_env<'a>(bcx: &'a Block<'a>,
add_existing_base_paths			    fn add_existing_base_paths(&self,
add_exiting_edge			    fn add_exiting_edge(&mut self,
add_exports_for_module			    fn add_exports_for_module(&mut self,
add_exports_of_namebindings			    fn add_exports_of_namebindings(&mut self,
add_extern_mod_stmt_cnum			    pub fn add_extern_mod_stmt_cnum(&self,
add_external_crates			    fn add_external_crates(&self) 
add_external_impl			    fn add_external_impl(&self,
add_file			    pub fn add_file(&mut self, file: &Path, has_symbols: bool) 
add_gen			    pub fn add_gen(&mut self, id: ast::NodeId, bit: uint) 
add_gen_kills			    fn add_gen_kills(&self,
add_inferred			    fn add_inferred(&mut self,
add_inherent_impl			    fn add_inherent_impl(&self, base_def_id: DefId,
add_kill			    pub fn add_kill(&mut self, id: ast::NodeId, bit: uint) 
add_lint			    pub fn add_lint(&self,
add_live_node			    fn add_live_node(&mut self, lnk: LiveNodeKind) -> LiveNode 
add_live_node_for_node			    fn add_live_node_for_node(&mut self, node_id: NodeId, lnk: LiveNodeKind) 
add_local_native_libraries			fn add_local_native_libraries(args: &mut Vec<~str>, sess: &Session) 
add_move			    pub fn add_move(&self,
add_native_library			    pub fn add_native_library(&mut self, name: &str) -> io::IoResult<()> 
add_node			    fn add_node(&mut self, id: ast::NodeId, preds: &[CFGIndex]) -> CFGIndex 
add_node			    pub fn add_node(&mut self, data: N) -> NodeIndex 
add_pat_to_id_range			fn add_pat_to_id_range(this: &mut GatherLoanCtxt,
add_rlib			    pub fn add_rlib(&mut self, rlib: &Path, name: &str,
add_rvalue_clean			fn add_rvalue_clean(mode: RvalueMode,
add_span_comment			pub fn add_span_comment(cx: &Block, sp: Span, text: &str) 
add_span_comment			    pub fn add_span_comment(&self, sp: Span, text: &str) 
add_static_crates			    fn add_static_crates(args: &mut Vec<~str>, sess: &Session, tmpdir: &Path,
add_test_module			fn add_test_module(cx: &TestCtxt, m: &ast::Mod) -> ast::Mod 
add_to_entry_set			    fn add_to_entry_set(&mut self, id: ast::NodeId, pred_bits: &[uint]) 
add_to_index			    fn add_to_index(item: &Item, ebml_w: &Encoder,
add_to_set			    fn add_to_set(tcx: &ty::ctxt, set: &mut Vec<Opt>, val: Opt) 
add_trait_impl			    fn add_trait_impl(&self, base_def_id: DefId,
add_trait_info			    fn add_trait_info(&self,
add_upstream_native_libraries			fn add_upstream_native_libraries(args: &mut Vec<~str>, sess: &Session) 
add_upstream_rust_crates			fn add_upstream_rust_crates(args: &mut Vec<~str>, sess: &Session,
add_used_crate_source			    pub fn add_used_crate_source(&self, src: CrateSource) 
add_used_library			    pub fn add_used_library(&self, lib: ~str, kind: NativeLibaryKind) 
add_used_link_args			    pub fn add_used_link_args(&self, args: &str) 
add_variable			    fn add_variable(&mut self, vk: VarKind) -> Variable 
add_veclen_to_set			    fn add_veclen_to_set(set: &mut Vec<Opt> , i: uint,
adjust_borrow_kind_for_assignment_lhs			fn adjust_borrow_kind_for_assignment_lhs(rcx: &mut Rcx,
adjust_node			        fn adjust_node(this: &RegionVarBindings,
adjust_ty			pub fn adjust_ty(cx: &ctxt,
adjust_upvar_borrow_kind			fn adjust_upvar_borrow_kind(upvar_id: ty::UpvarId,
adjust_upvar_borrow_kind_for_loan			fn adjust_upvar_borrow_kind_for_loan(upvar_id: ty::UpvarId,
adjust_upvar_borrow_kind_for_mut			fn adjust_upvar_borrow_kind_for_mut(rcx: &mut Rcx,
adjust_upvar_borrow_kind_for_unique			fn adjust_upvar_borrow_kind_for_unique(rcx: &mut Rcx,
adjustment			    fn adjustment(&mut self, id: ast::NodeId) -> Option<@ty::AutoAdjustment> 
adjustment			    fn adjustment(&mut self, id: ast::NodeId) -> Option<@ty::AutoAdjustment> 
adjustment			    fn adjustment(&mut self, node_id: ast::NodeId) -> Option<@ty::AutoAdjustment>;
adjustment			    fn adjustment(&mut self, id: ast::NodeId) -> Option<@ty::AutoAdjustment> 
adt			pub mod adt;
aggregate_ret			    pub fn aggregate_ret(&self, ret_vals: &[ValueRef]) 
align			fn align(off: uint, ty: Type) -> uint 
align			fn align(off: uint, ty: Type) -> uint 
align			    fn align(off: uint, ty: Type) -> uint 
align_to			pub fn align_to(cx: &Block, off: ValueRef, align: ValueRef) -> ValueRef 
align_up_to			fn align_up_to(off: uint, a: uint) -> uint 
align_up_to			fn align_up_to(off: uint, a: uint) -> uint 
all_edges			    pub fn all_edges<'a>(&'a self) -> &'a [Edge<E>] 
all_imports_resolved			    fn all_imports_resolved(&self) -> bool 
all_mem			    fn all_mem(cls: &mut [RegClass]) 
all_nodes			    pub fn all_nodes<'a>(&'a self) -> &'a [Node<N>] 
alloc_raw			pub fn alloc_raw<'a>(
alloc_ty			pub fn alloc_ty(bcx: &Block, t: ty::t, name: &str) -> ValueRef 
alloc_uniq_raw			pub fn alloc_uniq_raw<'a>(
alloc_uniq_vec			pub fn alloc_uniq_vec<'a>(
alloca			pub fn alloca(cx: &Block, ty: Type, name: &str) -> ValueRef 
alloca			    pub fn alloca(&self, ty: Type, name: &str) -> ValueRef 
alloca_maybe_zeroed			pub fn alloca_maybe_zeroed(cx: &Block, ty: Type, name: &str, zero: bool) -> ValueRef 
allocate_cbox			fn allocate_cbox<'a>(bcx: &'a Block<'a>,
analyze_move_out_from			    pub fn analyze_move_out_from(&self,
ancestors_of			        fn ancestors_of(this: &RegionMaps, scope: ast::NodeId)
and			                         struct and enum constructors");
and			    pub fn and(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
annotate_freevars			pub fn annotate_freevars(def_map: resolve::DefMap, krate: &ast::Crate) ->
anon_regions			    fn anon_regions(&self, span: Span, count: uint)
anon_regions			    fn anon_regions(&self,
anon_src			pub fn anon_src() -> ~str 
any_region_pat			fn any_region_pat(m: &[Match], col: uint) -> bool 
any_tup_pat			fn any_tup_pat(m: &[Match], col: uint) -> bool 
any_tuple_struct_pat			fn any_tuple_struct_pat(bcx: &Block, m: &[Match], col: uint) -> bool 
any_uniq_pat			fn any_uniq_pat(m: &[Match], col: uint) -> bool 
append_autoderefd_loan_path_to_str			    pub fn append_autoderefd_loan_path_to_str(&self,
append_configuration			pub fn append_configuration(cfg: &mut ast::CrateConfig,
append_loan_path_to_str			    pub fn append_loan_path_to_str(&self,
append_to_same_regions			        fn append_to_same_regions(same_regions: &mut Vec<SameRegions>,
apply_adjustments			fn apply_adjustments<'a>(bcx: &'a Block<'a>,
apply_gen_kill			    fn apply_gen_kill(&mut self, id: ast::NodeId, bits: &mut [uint]) 
apply_kill			    fn apply_kill(&mut self, id: ast::NodeId, bits: &mut [uint]) 
apply_lang_items			    fn apply_lang_items(cx: &ctxt,
appropriate_rvalue_mode			    pub fn appropriate_rvalue_mode(&self, ccx: &CrateContext) -> RvalueMode 
appropriate_rvalue_mode			pub fn appropriate_rvalue_mode(ccx: &CrateContext, ty: ty::t) -> RvalueMode 
appropriate_vals_and_bindings			    fn appropriate_vals_and_bindings<'v>(infcx: &'v InferCtxt)
archive			    pub mod archive;
arg_is_indirect			pub fn arg_is_indirect(ccx: &CrateContext, arg_ty: ty::t) -> bool 
arg_kind			fn arg_kind(cx: &FunctionContext, t: ty::t) -> datum::Rvalue 
arg_pos			    pub fn arg_pos(&self, arg: uint) -> uint 
args			    fn args(&self, a: ty::t, b: ty::t) -> cres<ty::t> 
argvecs			    fn argvecs<C:Combine>(this: &C, a_args: &[ty::t], b_args: &[ty::t]) -> cres<Vec<ty::t> > 
arm			    pub mod arm;
arm_pats_bindings			    fn arm_pats_bindings(&mut self,
array			    pub fn array(ty: &Type, len: u64) -> Type 
array_alloca			    pub fn array_alloca(&self, ty: Type, val: ValueRef) -> ValueRef 
array_length			    pub fn array_length(&self) -> uint 
array_malloc			    pub fn array_malloc(&self, ty: Type, val: ValueRef) -> ValueRef 
arrayalloca			pub fn arrayalloca(cx: &Block, ty: Type, v: ValueRef) -> ValueRef 
as_int			    fn as_int(&self) -> int { reader::doc_as_u64(*self) as int }
as_int			    fn as_int(&self) -> int;
as_slice			    pub fn as_slice<'a>(&'a self) -> &'a [u8] 
as_slice			    pub fn as_slice<'a>(&'a self) -> &'a [u8] { self.data }
as_store_inst			    pub fn as_store_inst(self) -> Option<Value> 
as_str			    pub fn as_str<'a>(&'a self) -> &'a str 
as_value			    pub fn as_value(self) -> Value 
ashr			    pub fn ashr(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
asm			pub mod asm;
asm_comments			    pub fn asm_comments(&self) -> bool { self.debugging_opt(ASM_COMMENTS) }
assert_by_ref			    pub fn assert_by_ref(self) -> DatumBlock<'a, Expr> 
assert_discr_in_range			fn assert_discr_in_range(ity: IntType, min: Disr, max: Disr, discr: Disr) 
assert_eq			    pub fn assert_eq(&self, a: ty::t, b: ty::t) 
assert_is_binding_or_wild			fn assert_is_binding_or_wild(bcx: &Block, p: @ast::Pat) 
assert_lvalue			    pub fn assert_lvalue(self, bcx: &Block) -> Datum<Lvalue> 
assert_not_rvar			    pub fn assert_not_rvar(&mut self, rid: RegionVid, r: ty::Region) 
assert_not_subtype			    pub fn assert_not_subtype(&self, a: ty::t, b: ty::t) 
assert_rvalue			    pub fn assert_rvalue(self, bcx: &Block) -> Datum<Rvalue> 
assert_strict_subtype			    pub fn assert_strict_subtype(&self, a: ty::t, b: ty::t) 
assert_subtype			    pub fn assert_subtype(&self, a: ty::t, b: ty::t) 
assert_type_for_node_id			fn assert_type_for_node_id(cx: &CrateContext, node_id: ast::NodeId, error_span: Span) 
assign			    fn assign(&mut self, nid: ast::NodeId, ty_opt: Option<ty::t>) 
assign_node_ids_and_map			pub fn assign_node_ids_and_map(sess: &Session, krate: ast::Crate) -> (ast::Crate, ast_map::Map) 
assign_node_ids_and_map			    pub mod assign_node_ids_and_map;
assigned_on_entry			    fn assigned_on_entry(&self, ln: LiveNode, var: Variable)
assigned_on_exit			    fn assigned_on_exit(&self, ln: LiveNode, var: Variable)
associate_type			    pub fn associate_type(&self, s: &str, t: &Type) 
ast_expr_vstore_to_vstore			pub fn ast_expr_vstore_to_vstore(fcx: &FnCtxt,
ast_mt_to_mt			    fn ast_mt_to_mt<AC:AstConv, RS:RegionScope>(
ast_node			impl ast_node for ast::Expr 
ast_node			impl ast_node for ast::Pat 
ast_node			trait ast_node 
ast_path_substs			fn ast_path_substs<AC:AstConv,RS:RegionScope>(
ast_path_to_substs_and_ty			pub fn ast_path_to_substs_and_ty<AC:AstConv,
ast_path_to_trait_ref			pub fn ast_path_to_trait_ref<AC:AstConv,RS:RegionScope>(
ast_path_to_ty			pub fn ast_path_to_ty<AC:AstConv,RS:RegionScope>(
ast_purity_constant			pub fn ast_purity_constant(purity: ast::Purity) -> uint 
ast_region_to_region			pub fn ast_region_to_region(tcx: &ty::ctxt, lifetime: &ast::Lifetime)
ast_sigil_constant			pub fn ast_sigil_constant(sigil: ast::Sigil) -> uint 
ast_ty_to_mt			    fn ast_ty_to_mt<AC:AstConv, RS:RegionScope>(
ast_ty_to_prim_ty			pub fn ast_ty_to_prim_ty(tcx: &ty::ctxt, ast_ty: &ast::Ty) -> Option<ty::t> 
ast_ty_to_ty			pub fn ast_ty_to_ty<AC:AstConv, RS:RegionScope>(
ast_ty_to_ty_cache_entry			pub enum ast_ty_to_ty_cache_entry 
ast_type_is_defined_in_local_crate			    fn ast_type_is_defined_in_local_crate(&self, original_type: &ast::Ty) -> bool 
astconv			pub mod astconv;
astencode			    pub mod astencode;
astencode_tag			impl astencode_tag 
astencode_tag			pub enum astencode_tag { \/\/ Reserves 0x32 -- 0x45
at_box			    pub fn at_box(ccx: &CrateContext, ty: Type) -> Type 
at_box_body			pub fn at_box_body(bcx: &Block, body_t: ty::t, boxptr: ValueRef) -> ValueRef 
atomic_cmpxchg			    pub fn atomic_cmpxchg(&self, dst: ValueRef,
atomic_fence			    pub fn atomic_fence(&self, order: AtomicOrdering) 
atomic_load			    pub fn atomic_load(&self, ptr: ValueRef, order: AtomicOrdering) -> ValueRef 
atomic_rmw			    pub fn atomic_rmw(&self, op: AtomicBinOp,
atomic_store			    pub fn atomic_store(&self, val: ValueRef, ptr: ValueRef, order: AtomicOrdering) 
attributes_specify_inlining			fn attributes_specify_inlining(attrs: &[ast::Attribute]) -> bool 
auto_borrow_fn			    fn auto_borrow_fn<'a>(
auto_borrow_obj			    fn auto_borrow_obj<'a>(bcx: &'a Block<'a>,
auto_ref			fn auto_ref<'a>(bcx: &'a Block<'a>,
auto_slice			    fn auto_slice<'a>(
auto_slice_and_ref			    fn auto_slice_and_ref<'a>(
autoderef			pub fn autoderef<T>(fcx: &FnCtxt, sp: Span, base_ty: ty::t,
autoderef			    pub fn autoderef(expr_id: ast::NodeId, autoderef: u32) -> MethodCall 
back			pub mod back 
bar			fn bar() 
bar			    fn bar() { ... }
bare_fn_to_str			    fn bare_fn_to_str(cx: &ctxt,
bare_fn_tys			    fn bare_fn_tys(&self, a: &ty::BareFnTy,
base			pub mod base;
basic_block			pub mod basic_block;
basic_codegen_options			    pub fn basic_codegen_options() -> CodegenOptions 
basic_options			pub fn basic_options() -> Options 
basic_type_metadata			fn basic_type_metadata(cx: &CrateContext, t: ty::t) -> DIType 
bckerr_code			pub enum bckerr_code 
bckerr_to_str			    pub fn bckerr_to_str(&self, err: BckError) -> ~str 
bench			mod bench 
bind_irrefutable_pat			fn bind_irrefutable_pat<'a>(
binding_info			struct binding_info 
binding_mode_map			    fn binding_mode_map(&mut self, pat: @Pat) -> BindingMap 
binop			    pub fn binop(&self, op: Opcode, lhs: ValueRef, rhs: ValueRef)
bit_str			fn bit_str(bit: uint) -> ~str 
bitand			    fn bitand(&self, rhs: &RestrictionSet) -> RestrictionSet 
bitand			    fn bitand(&self, other: &TypeContents) -> TypeContents 
bitcast			    pub fn bitcast(&self, val: ValueRef, dest_ty: Type) -> ValueRef 
bitor			    fn bitor(&self, rhs: &RestrictionSet) -> RestrictionSet 
bitor			    fn bitor(&self, other: &TypeContents) -> TypeContents 
bits_to_str			fn bits_to_str(words: &[uint]) -> ~str 
bitwise			fn bitwise(out_vec: &mut [uint], in_vec: &[uint], op: |uint, uint| -> uint)
blank_fn_ctxt			fn blank_fn_ctxt<'a>(ccx: &'a CrateCtxt<'a>,
blank_inherited_fields			fn blank_inherited_fields<'a>(ccx: &'a CrateCtxt<'a>) -> Inherited<'a> 
block			    fn block(&mut self, blk: &ast::Block, pred: CFGIndex) -> CFGIndex 
block_locals			pub fn block_locals(b: &ast::Block, it: |@ast::Local|) 
block_name			    fn block_name(&self, prefix: &str) -> ~str 
block_needs_anonymous_module			    fn block_needs_anonymous_module(&mut self, block: &Block) -> bool 
block_query			pub fn block_query(b: ast::P<ast::Block>, p: |&ast::Expr| -> bool) -> bool 
block_region			    pub fn block_region(&self) -> ty::Region 
block_ty			pub fn block_ty(cx: &ctxt, b: &ast::Block) -> t 
bnd			    fn bnd<T:Clone>(&self, b: &Bounds<T>) -> Option<T> { b.lb.clone() }
bnd			    fn bnd<T:Clone>(&self, b: &Bounds<T>) -> Option<T> { b.ub.clone() }
bnd			    fn bnd<T:Clone>(&self, b: &Bounds<T>) -> Option<T>;
bnds			    fn bnds<T:Clone + InferStr + LatticeValue>(
bnds			    fn bnds<T:Clone + InferStr + LatticeValue>(&self,
bool			    pub fn bool(ccx: &CrateContext) -> Type 
bool_to_i1			pub fn bool_to_i1(bcx: &Block, llval: ValueRef) -> ValueRef 
borrow_fn			    fn borrow_fn(cx: &ctxt, span: Span, r: Region, ty: ty::t) -> ty::t 
borrow_obj			    fn borrow_obj(cx: &ctxt, span: Span, r: Region,
borrow_vec			    fn borrow_vec(cx: &ctxt, span: Span,
borrowck			    pub mod borrowck;
borrowck_fn			fn borrowck_fn(this: &mut BorrowckCtxt,
borrowck_item			fn borrowck_item(this: &mut BorrowckCtxt, item: &ast::Item) 
borrowck_stats			    pub fn borrowck_stats(&self) -> bool { self.debugging_opt(BORROWCK_STATS) }
borrowed_contents			    fn borrowed_contents(region: ty::Region,
bot_ty			    pub fn bot_ty(&self, b: ty::t) -> cres<ty::t> { Ok(b) }
bound_region_ptr_to_str			pub fn bound_region_ptr_to_str(cx: &ctxt, br: BoundRegion) -> ~str 
bound_region_to_str			pub fn bound_region_to_str(cx: &ctxt,
bound_type_regions			pub fn bound_type_regions(defs: &[ty::RegionParameterDef])
bounds			    fn bounds(&self, a: BuiltinBounds, b: BuiltinBounds) -> cres<BuiltinBounds>;
bounds			    fn bounds(&self, a: BuiltinBounds, b: BuiltinBounds) -> cres<BuiltinBounds> 
bounds			    fn bounds(&self, a: BuiltinBounds, b: BuiltinBounds) -> cres<BuiltinBounds> 
bounds			    fn bounds(&self, a: BuiltinBounds, b: BuiltinBounds) -> cres<BuiltinBounds> 
bounds_usable			fn bounds_usable(cx: &CrateContext, ity: IntType, bounds: &IntBounds) -> bool 
box_layout_is_correct			    fn box_layout_is_correct(cx: &CrateContext,
boxed_type_metadata			fn boxed_type_metadata(cx: &CrateContext,
br			    pub fn br(&self, dest: BasicBlockRef) 
bracketed			    pub fn bracketed(&mut self,
branch_kind			pub enum branch_kind { no_branch, single, switch, compare, compare_vec_len, }
break_from_to			    fn break_from_to(&mut self,
bug			    pub fn bug(&self, msg: &str) -> ! 
bug			    fn bug(&self, s: &str) -> ! 
build			pub mod build;
build_closure			fn build_closure<'a>(bcx0: &'a Block<'a>,
build_codegen_options			pub fn build_codegen_options(matches: &getopts::Matches)
build_configuration			pub fn build_configuration(sess: &Session) -> ast::CrateConfig 
build_const_struct			fn build_const_struct(ccx: &CrateContext, st: &Struct, vals: &[ValueRef])
build_import_directive			    fn build_import_directive(&mut self,
build_link_meta			pub fn build_link_meta(krate: &ast::Crate, out_filestem: &str) -> LinkMeta 
build_output_filenames			pub fn build_output_filenames(input: &Input,
build_reduced_graph			    fn build_reduced_graph(&mut self, krate: &ast::Crate) 
build_reduced_graph_for_block			    fn build_reduced_graph_for_block(&mut self,
build_reduced_graph_for_external_crate			    fn build_reduced_graph_for_external_crate(&mut self,
build_reduced_graph_for_external_crate_def			    fn build_reduced_graph_for_external_crate_def(&mut self,
build_reduced_graph_for_foreign_item			    fn build_reduced_graph_for_foreign_item(&mut self,
build_reduced_graph_for_item			    fn build_reduced_graph_for_item(&mut self,
build_reduced_graph_for_variant			    fn build_reduced_graph_for_variant(&mut self,
build_reduced_graph_for_view_item			    fn build_reduced_graph_for_view_item(&mut self, view_item: &ViewItem,
build_return_block			pub fn build_return_block(fcx: &FunctionContext, ret_cx: &Block) 
build_rust_fn			    fn build_rust_fn(ccx: &CrateContext,
build_session			pub fn build_session(sopts: session::Options,
build_session_			pub fn build_session_(sopts: session::Options,
build_session_options			pub fn build_session_options(matches: &getopts::Matches) -> session::Options 
build_target_config			pub fn build_target_config(sopts: &session::Options) -> session::Config 
build_to			        fn build_to(from: ast::P<ast::Ty>,
build_wrap_fn			    unsafe fn build_wrap_fn(ccx: &CrateContext,
builder			    pub fn builder<'a>(&'a self) -> Builder<'a> 
builder			pub mod builder;
building_library			pub fn building_library(options: &Options, krate: &ast::Crate) -> bool 
bytes_to_bits			fn bytes_to_bits(bytes: u64) -> c_ulonglong 
c_bool			    pub fn c_bool(&mut self, b: bool) -> ValueRef 
c_int			    pub fn c_int(&mut self, i: int) -> ValueRef 
c_mt			    pub fn c_mt(&mut self, mt: &ty::mt) -> Vec<ValueRef> 
c_size_and_align			    pub fn c_size_and_align(&mut self, t: ty::t) -> Vec<ValueRef> 
c_slice			    pub fn c_slice(&mut self, s: InternedString) -> ValueRef 
c_tydesc			    pub fn c_tydesc(&mut self, t: ty::t) -> ValueRef 
c_uint			    pub fn c_uint(&mut self, u: uint) -> ValueRef 
cabi			pub mod cabi;
cabi_arm			pub mod cabi_arm;
cabi_mips			pub mod cabi_mips;
cabi_x86			pub mod cabi_x86;
cabi_x86_64			pub mod cabi_x86_64;
cache_entry			struct cache_entry 
cache_id_for_type			fn cache_id_for_type(t: ty::t) -> uint 
cached_early_exit			    fn cached_early_exit(&self,
calculate			    pub fn calculate(krate: &ast::Crate) -> Svh 
call			    fn call(&mut self,
call			    pub fn call(&self, llfn: ValueRef, args: &[ValueRef],
call_memcpy			pub fn call_memcpy(cx: &Block, dst: ValueRef, src: ValueRef, n_bytes: ValueRef, align: u32) 
call_site			    fn call_site(&self) -> Span 
call_site			    fn call_site(&self) -> Span;
call_visit_glue			pub fn call_visit_glue(bcx: &Block, v: ValueRef, tydesc: ValueRef,
call_with_conv			    pub fn call_with_conv(&self, llfn: ValueRef, args: &[ValueRef],
callee			pub mod callee;
can_mk_assignty			    pub fn can_mk_assignty(&self, sub: ty::t, sup: ty::t)
can_mk_coercety			pub fn can_mk_coercety(cx: &InferCtxt, a: ty::t, b: ty::t) -> ures 
can_mk_subty			    pub fn can_mk_subty(&self, sub: ty::t, sup: ty::t)
can_mk_subty			pub fn can_mk_subty(cx: &InferCtxt, a: ty::t, b: ty::t) -> ures 
can_unify_universally_quantified			    fn can_unify_universally_quantified<'a>(&self,
canonicalize			    fn canonicalize(path: Option<Path>) -> Option<Path> 
capture_var_helper			trait capture_var_helper 
cast			    pub fn cast(&self, op: Opcode, val: ValueRef, dest_ty: Type) -> ValueRef 
cast_kind			pub enum cast_kind 
cast_shift_const_rhs			pub fn cast_shift_const_rhs(op: ast::BinOp,
cast_shift_expr_rhs			pub fn cast_shift_expr_rhs<'a>(
cast_shift_rhs			pub fn cast_shift_rhs(op: ast::BinOp,
cast_type_kind			pub fn cast_type_kind(t: ty::t) -> cast_kind 
cat_captured_var			    pub fn cat_captured_var(&self,
cat_def			    pub fn cat_def(&self,
cat_def			    pub fn cat_def(&mut self,
cat_deref			    fn cat_deref<N:ast_node>(&mut self,
cat_deref_common			    fn cat_deref_common<N:ast_node>(&mut self,
cat_deref_fn_or_obj			    pub fn cat_deref_fn_or_obj<N:ast_node>(&mut self,
cat_discr			    pub fn cat_discr(&self, cmt: mc::cmt, match_id: ast::NodeId) -> mc::cmt 
cat_downcast			    pub fn cat_downcast<N:ast_node>(&mut self,
cat_expr			    pub fn cat_expr(&self, expr: &ast::Expr) -> mc::cmt 
cat_expr			    pub fn cat_expr(&mut self, expr: &ast::Expr) -> McResult<cmt> 
cat_expr_autoderefd			    pub fn cat_expr_autoderefd(&self,
cat_expr_autoderefd			    pub fn cat_expr_autoderefd(&mut self, expr: &ast::Expr, autoderefs: uint)
cat_expr_unadjusted			    pub fn cat_expr_unadjusted(&self, expr: &ast::Expr) -> mc::cmt 
cat_expr_unadjusted			    pub fn cat_expr_unadjusted(&mut self, expr: &ast::Expr) -> McResult<cmt> 
cat_field			    pub fn cat_field<N:ast_node>(&mut self,
cat_imm_interior			    pub fn cat_imm_interior<N:ast_node>(&mut self,
cat_index			    pub fn cat_index<N:ast_node>(&mut self,
cat_pattern			    pub fn cat_pattern(&self,
cat_pattern			    pub fn cat_pattern(&mut self,
cat_rvalue			    pub fn cat_rvalue(&mut self,
cat_rvalue_node			    pub fn cat_rvalue_node(&mut self,
cat_slice_pattern			    pub fn cat_slice_pattern(&mut self,
cat_upvar			    fn cat_upvar(&mut self,
categorization			pub enum categorization 
ccx			    pub fn ccx(&self) -> &'a CrateContext { self.fcx.ccx }
ccx			    pub fn ccx(&self) -> &'a CrateContext 
cfg			    pub mod cfg;
cfg			    fn cfg(&self) -> ast::CrateConfig 
cfg			    fn cfg(&self) -> ast::CrateConfig;
cgsetters			    mod cgsetters 
ch			        fn ch(x: u32, y: u32, z: u32) -> u32 
char			    pub fn char(ccx: &CrateContext) -> Type 
check			    fn check(&self, cmt: mc::cmt, discr_scope: Option<ast::NodeId>) -> R 
check			    fn check(&self, krate: &Crate) 
check			pub mod check;
check_aliasability			fn check_aliasability(bccx: &BorrowckCtxt,
check_all_inherited			    fn check_all_inherited(&self, item: &ast::Item) 
check_argument_types			    fn check_argument_types(fcx: &FnCtxt,
check_arm			fn check_arm(this: &mut Liveness, arm: &Arm) 
check_arms			fn check_arms(cx: &MatchCheckCtxt, arms: &[Arm]) 
check_assignment			    pub fn check_assignment(&self, expr: &ast::Expr) 
check_attrs_usage			fn check_attrs_usage(cx: &Context, attrs: &[ast::Attribute]) 
check_bare_fn			fn check_bare_fn(ccx: &CrateCtxt,
check_binop			    fn check_binop(fcx: &FnCtxt,
check_block			pub fn check_block(fcx0: &FnCtxt, blk: &ast::Block)  
check_block_no_value			pub fn check_block_no_value(fcx: &FnCtxt, blk: &ast::Block)  
check_block_with_expected			pub fn check_block_with_expected(fcx: &FnCtxt,
check_bounds_are_used			pub fn check_bounds_are_used(ccx: &CrateCtxt,
check_builtin_bounds			pub fn check_builtin_bounds(cx: &Context,
check_by_move_capture			        fn check_by_move_capture(this: &CheckLoanCtxt,
check_call			    pub fn check_call(&self,
check_call			    fn check_call(fcx: &FnCtxt,
check_captured_variables			    fn check_captured_variables(&self,
check_case			    fn check_case(cx: &Context, sort: &str, ident: ast::Ident, span: Span) 
check_cast_for_escaping_regions			pub fn check_cast_for_escaping_regions(
check_coherence			pub fn check_coherence(crate_context: &CrateCtxt, krate: &Crate) 
check_consistent_bindings			    fn check_consistent_bindings(&mut self, arm: &Arm) 
check_const			    pub mod check_const;
check_const			pub fn check_const(ccx: &CrateCtxt,
check_const_with_ty			pub fn check_const_with_ty(fcx: &FnCtxt,
check_copy			fn check_copy(cx: &Context, ty: ty::t, sp: Span, reason: &str) 
check_crate			pub fn check_crate(sess: &Session, krate: &ast::Crate) 
check_crate			pub fn check_crate(tcx: &ty::ctxt,
check_crate			pub fn check_crate(krate: &Crate,
check_crate			pub fn check_crate(tcx: &ty::ctxt, krate: &ast::Crate) 
check_crate			pub fn check_crate(tcx: &ty::ctxt,
check_crate			pub fn check_crate(tcx: &ty::ctxt, krate: &ast::Crate) 
check_crate			pub fn check_crate(tcx: &ty::ctxt,
check_crate			pub fn check_crate(tcx: &ty::ctxt, method_map: MethodMap, krate: &ast::Crate) 
check_crate			pub fn check_crate(tcx: &ty::ctxt,
check_crate			pub fn check_crate(tcx: &ty::ctxt,
check_crate			pub fn check_crate(tcx: &ty::ctxt,
check_crate			pub fn check_crate(tcx: &ty::ctxt,
check_crate			pub fn check_crate(tcx: &ty::ctxt,
check_crate_attrs_usage			fn check_crate_attrs_usage(cx: &Context, attrs: &[ast::Attribute]) 
check_decl_initializer			pub fn check_decl_initializer(fcx: &FnCtxt,
check_decl_local			pub fn check_decl_local(fcx: &FnCtxt, local: &ast::Local)  
check_def_id			    fn check_def_id(&mut self, def_id: ast::DefId) 
check_deprecated_owned_vector			fn check_deprecated_owned_vector(cx: &Context, e: &ast::Expr) 
check_enum_variants			pub fn check_enum_variants(ccx: &CrateCtxt,
check_exhaustive			fn check_exhaustive(cx: &MatchCheckCtxt, sp: Span, pats: Vec<@Pat> ) 
check_expr			fn check_expr(v: &mut CheckCrateVisitor, e: &Expr, is_const: bool) 
check_expr			fn check_expr(cx: &mut MatchCheckCtxt, ex: &Expr) 
check_expr			pub fn check_expr(cx: &mut Context, e: &Expr) 
check_expr			fn check_expr(this: &mut Liveness, expr: &Expr) 
check_expr			fn check_expr(fcx: &FnCtxt, expr: &ast::Expr)  
check_expr_coercable_to_type			fn check_expr_coercable_to_type(fcx: &FnCtxt, expr: &ast::Expr, expected: ty::t) 
check_expr_fn			    fn check_expr_fn(fcx: &FnCtxt,
check_expr_fn_block			fn check_expr_fn_block(rcx: &mut Rcx,
check_expr_has_type			pub fn check_expr_has_type(
check_expr_with_hint			fn check_expr_with_hint(fcx: &FnCtxt, expr: &ast::Expr, expected: ty::t) 
check_expr_with_lvalue_pref			fn check_expr_with_lvalue_pref(fcx: &FnCtxt, expr: &ast::Expr,
check_expr_with_opt_hint			fn check_expr_with_opt_hint(fcx: &FnCtxt, expr: &ast::Expr,
check_expr_with_opt_hint_and_lvalue_pref			fn check_expr_with_opt_hint_and_lvalue_pref(fcx: &FnCtxt,
check_expr_with_unifier			fn check_expr_with_unifier(fcx: &FnCtxt,
check_field			    fn check_field(&mut self, span: Span, id: ast::DefId, ident: ast::Ident) 
check_field			    fn check_field(fcx: &FnCtxt,
check_fn			fn check_fn(cx: &mut MatchCheckCtxt,
check_fn			fn check_fn(
check_fn			fn check_fn(_v: &Liveness,
check_fn			fn check_fn<'a>(ccx: &'a CrateCtxt<'a>,
check_for_aliasability_violation			        fn check_for_aliasability_violation(this: &CheckLoanCtxt,
check_for_aliasable_mutable_writes			        fn check_for_aliasable_mutable_writes(this: &CheckLoanCtxt,
check_for_assignment_to_restricted_or_frozen_location			        fn check_for_assignment_to_restricted_or_frozen_location(
check_for_bare			    fn check_for_bare(cx: &Context, fv: @freevar_entry) 
check_for_block			    fn check_for_block(cx: &Context, fv: &freevar_entry,
check_for_conflicting_loans			    pub fn check_for_conflicting_loans(&self, scope_id: ast::NodeId) 
check_for_entry_fn			fn check_for_entry_fn(ccx: &CrateCtxt) 
check_for_item_unused_imports			    fn check_for_item_unused_imports(&mut self, vi: &ViewItem) 
check_for_uniq			    fn check_for_uniq(cx: &Context, fv: &freevar_entry, bounds: ty::BuiltinBounds) 
check_for_unused_imports			    fn check_for_unused_imports(&mut self, krate: &ast::Crate) 
check_foreign_fn			    fn check_foreign_fn(cx: &Context, decl: &ast::FnDecl) 
check_freevar_bounds			pub fn check_freevar_bounds(cx: &Context, sp: Span, ty: ty::t,
check_glb			    pub fn check_glb(&self, t1: ty::t, t2: ty::t, t_glb: ty::t) 
check_heap_expr			fn check_heap_expr(cx: &Context, e: &ast::Expr) 
check_heap_item			fn check_heap_item(cx: &Context, it: &ast::Item) 
check_heap_type			fn check_heap_type(cx: &Context, span: Span, ty: ty::t) 
check_if_path_is_moved			    pub fn check_if_path_is_moved(&self,
check_impl_methods_against_trait			fn check_impl_methods_against_trait(ccx: &CrateCtxt,
check_impl_of_trait			fn check_impl_of_trait(cx: &mut Context, it: &Item, trait_ref: &TraitRef, self_type: &Ty) 
check_implementation			    fn check_implementation(&self, item: &Item,
check_implementation_coherence			    fn check_implementation_coherence(&self) 
check_implementation_coherence_of			    fn check_implementation_coherence_of(&self, trait_def_id: DefId) 
check_instantiable			pub fn check_instantiable(tcx: &ty::ctxt,
check_intrinsic_type			pub fn check_intrinsic_type(ccx: &CrateCtxt, it: &ast::ForeignItem) 
check_is_legal_to_move_from			fn check_is_legal_to_move_from(bccx: &BorrowckCtxt,
check_item			fn check_item(v: &mut CheckCrateVisitor, it: &Item, _is_const: bool) 
check_item			fn check_item(cx: &mut Context, item: &Item) 
check_item			pub fn check_item(ccx: &CrateCtxt, it: &ast::Item) 
check_item_ctypes			fn check_item_ctypes(cx: &Context, it: &ast::Item) 
check_item_non_camel_case_types			fn check_item_non_camel_case_types(cx: &Context, it: &ast::Item) 
check_item_non_uppercase_statics			fn check_item_non_uppercase_statics(cx: &Context, it: &ast::Item) 
check_item_recursion			pub fn check_item_recursion<'a>(sess: &'a Session,
check_item_types			pub fn check_item_types(ccx: &CrateCtxt, krate: &ast::Crate) 
check_legality_of_move_bindings			fn check_legality_of_move_bindings(cx: &MatchCheckCtxt,
check_lifetime_names			    fn check_lifetime_names(&self, lifetimes: &Vec<ast::Lifetime>) 
check_limits			    fn check_limits(tcx: &ty::ctxt, binop: ast::BinOp,
check_lit			pub fn check_lit(fcx: &FnCtxt, lit: &ast::Lit) -> ty::t 
check_loans			pub fn check_loans(bccx: &BorrowckCtxt,
check_loans			pub mod check_loans;
check_loans_in_block			fn check_loans_in_block<'a>(this: &mut CheckLoanCtxt<'a>,
check_loans_in_expr			fn check_loans_in_expr<'a>(this: &mut CheckLoanCtxt<'a>,
check_loans_in_local			fn check_loans_in_local<'a>(this: &mut CheckLoanCtxt<'a>,
check_loans_in_pat			fn check_loans_in_pat<'a>(this: &mut CheckLoanCtxt<'a>,
check_local			fn check_local(cx: &mut MatchCheckCtxt, loc: &Local) 
check_local			fn check_local(this: &mut Liveness, local: &Local) 
check_loop			    pub mod check_loop;
check_lub			    pub fn check_lub(&self, t1: ty::t, t2: ty::t, t_lub: ty::t) 
check_lvalue			    fn check_lvalue(&mut self, expr: &Expr) 
check_main_fn_ty			fn check_main_fn_ty(ccx: &CrateCtxt,
check_match			    pub mod check_match;
check_match			pub fn check_match(fcx: &FnCtxt,
check_method			    fn check_method(&mut self, span: Span, origin: MethodOrigin,
check_method_argument_types			    fn check_method_argument_types(
check_method_body			fn check_method_body(ccx: &CrateCtxt,
check_method_call			    fn check_method_call(fcx: &FnCtxt,
check_missing_doc_attrs			fn check_missing_doc_attrs(cx: &Context,
check_missing_doc_item			fn check_missing_doc_item(cx: &Context, it: &ast::Item) 
check_missing_doc_method			fn check_missing_doc_method(cx: &Context, m: &ast::Method) 
check_missing_doc_struct_field			fn check_missing_doc_struct_field(cx: &Context, sf: &ast::StructField) 
check_missing_doc_ty_method			fn check_missing_doc_ty_method(cx: &Context, tm: &ast::TypeMethod) 
check_missing_doc_variant			fn check_missing_doc_variant(cx: &Context, v: &ast::Variant) 
check_move_out_from_expr			    fn check_move_out_from_expr(&self, expr: &ast::Expr) 
check_move_out_from_id			    fn check_move_out_from_id(&self, id: ast::NodeId, span: Span) 
check_mutability			        fn check_mutability(bccx: &BorrowckCtxt,
check_no_duplicate_fields			pub fn check_no_duplicate_fields(tcx: &ty::ctxt,
check_no_glb			    pub fn check_no_glb(&self, t1: ty::t, t2: ty::t) 
check_no_lub			    pub fn check_no_lub(&self, t1: ty::t, t2: ty::t) 
check_node			        fn check_node(this: &RegionVarBindings,
check_not_terminated			pub fn check_not_terminated(cx: &Block) 
check_pat			fn check_pat(v: &mut CheckCrateVisitor, p: &Pat, _is_const: bool) 
check_pat			pub fn check_pat(pcx: &pat_ctxt, pat: &ast::Pat, expected: ty::t) 
check_pat_non_uppercase_statics			fn check_pat_non_uppercase_statics(cx: &Context, p: &ast::Pat) 
check_pat_uppercase_variable			fn check_pat_uppercase_variable(cx: &Context, p: &ast::Pat) 
check_pat_variant			pub fn check_pat_variant(pcx: &pat_ctxt, pat: &ast::Pat, path: &ast::Path,
check_path			    fn check_path(&mut self, span: Span, path_id: ast::NodeId, path: &ast::Path) 
check_path_args			fn check_path_args(tcx: &ty::ctxt,
check_path_statement			fn check_path_statement(cx: &Context, s: &ast::Stmt) 
check_pointer_pat			pub fn check_pointer_pat(pcx: &pat_ctxt,
check_privileged_scopes			    fn check_privileged_scopes(&self, krate: &Crate) 
check_raw_ptr_deriving			fn check_raw_ptr_deriving(cx: &Context, item: &ast::Item) 
check_representable			pub fn check_representable(tcx: &ty::ctxt,
check_ret			    fn check_ret(&self,
check_root			    fn check_root(&self,
check_sane_privacy			    fn check_sane_privacy(&self, item: &ast::Item) 
check_scope			    fn check_scope(&self, max_scope: ty::Region) -> R 
check_send			pub fn check_send(cx: &Context, ty: ty::t, sp: Span) -> bool 
check_simd			pub fn check_simd(tcx: &ty::ctxt, sp: Span, id: ast::NodeId) 
check_stability			fn check_stability(cx: &Context, e: &ast::Expr) 
check_start_fn_ty			fn check_start_fn_ty(ccx: &CrateCtxt,
check_static			    pub mod check_static;
check_static			pub fn check_static(tcx: &ty::ctxt, ty: ty::t, sp: Span) -> bool 
check_static_method			    fn check_static_method(&mut self, span: Span, method_id: ast::DefId,
check_stmt			pub fn check_stmt(fcx: &FnCtxt, stmt: &ast::Stmt)  
check_str_index			    fn check_str_index(&mut self, e: @ast::Expr) 
check_struct			pub fn check_struct(ccx: &CrateCtxt, id: ast::NodeId, span: Span) 
check_struct_constructor			    fn check_struct_constructor(fcx: &FnCtxt,
check_struct_enum_variant			    fn check_struct_enum_variant(fcx: &FnCtxt,
check_struct_like_enum_variant_pat			pub fn check_struct_like_enum_variant_pat(pcx: &pat_ctxt,
check_struct_or_variant_fields			    fn check_struct_or_variant_fields(fcx: &FnCtxt,
check_struct_pat			pub fn check_struct_pat(pcx: &pat_ctxt, pat_id: ast::NodeId, span: Span,
check_struct_pat_fields			pub fn check_struct_pat_fields(pcx: &pat_ctxt,
check_struct_safe_for_destructor			fn check_struct_safe_for_destructor(cx: &mut Context,
check_struct_uppercase_variable			fn check_struct_uppercase_variable(cx: &Context, s: &ast::StructDef) 
check_then_else			    fn check_then_else(fcx: &FnCtxt,
check_trait_cast			fn check_trait_cast(cx: &mut Context, source_ty: ty::t, target_ty: ty::t, span: Span) 
check_trait_cast_bounds			pub fn check_trait_cast_bounds(cx: &Context, sp: Span, ty: ty::t,
check_ty			fn check_ty(cx: &mut Context, aty: &Ty) 
check_ty			    fn check_ty(cx: &Context, ty: &ast::Ty) 
check_typaram_bounds			pub fn check_typaram_bounds(cx: &Context,
check_type_limits			fn check_type_limits(cx: &Context, e: &ast::Expr) 
check_type_parameter_positions_in_path			fn check_type_parameter_positions_in_path(function_context: &FnCtxt,
check_unnecessary_allocation			fn check_unnecessary_allocation(cx: &Context, e: &ast::Expr) 
check_unnecessary_parens_core			fn check_unnecessary_parens_core(cx: &Context, value: &ast::Expr, msg: &str) 
check_unnecessary_parens_expr			fn check_unnecessary_parens_expr(cx: &Context, e: &ast::Expr) 
check_unnecessary_parens_stmt			fn check_unnecessary_parens_stmt(cx: &Context, s: &ast::Stmt) 
check_unsafe_block			fn check_unsafe_block(cx: &Context, e: &ast::Expr) 
check_unused_casts			fn check_unused_casts(cx: &Context, e: &ast::Expr) 
check_unused_mut_pat			fn check_unused_mut_pat(cx: &Context, p: &ast::Pat) 
check_unused_result			fn check_unused_result(cx: &Context, s: &ast::Stmt) 
check_unused_unsafe			fn check_unused_unsafe(cx: &Context, e: &ast::Expr) 
check_user_binop			    fn check_user_binop(fcx: &FnCtxt,
check_user_unop			    fn check_user_unop(fcx: &FnCtxt,
check_while_true_expr			fn check_while_true_expr(cx: &Context, e: &ast::Expr) 
classify			    fn classify(&mut self, e: &Expr) -> constness 
classify			    fn classify(ty: Type,
classify_arg_ty			fn classify_arg_ty(ccx: &CrateContext, ty: Type) -> ArgType 
classify_arg_ty			fn classify_arg_ty(ccx: &CrateContext, ty: Type, offset: &mut uint) -> ArgType 
classify_ret_ty			fn classify_ret_ty(ccx: &CrateContext, ty: Type) -> ArgType 
classify_ret_ty			fn classify_ret_ty(ty: Type) -> ArgType 
classify_struct			    fn classify_struct(tys: &[Type],
classify_ty			fn classify_ty(ty: Type) -> Vec<RegClass> 
clean			    pub fn clean<'a>(self,
clean_on_unwind			    fn clean_on_unwind(&self) -> bool 
clean_on_unwind			    fn clean_on_unwind(&self) -> bool;
cleanup			    pub fn cleanup(&self) 
cleanup			pub mod cleanup;
cleanup_is_suitable_for			fn cleanup_is_suitable_for(c: &Cleanup,
clear_cached_exits			    fn clear_cached_exits(&mut self) 
clear_source_location			pub fn clear_source_location(fcx: &FunctionContext) 
clone			    fn clone(&self) -> LoanDataFlowOperator 
clone			    fn clone(&self) -> AssignDataFlowOperator 
clone			    fn clone(&self) -> MoveDataFlowOperator 
clone			    fn clone(&self) -> MovePathIndex 
clone			    fn clone(&self) -> LiveNode 
clone			    fn clone(&self) -> ArmData<'a, 'b> { *self }
closure			pub mod closure;
closure_contents			    fn closure_contents(cx: &ctxt, cty: &ClosureTy) -> TypeContents 
closure_to_str			    fn closure_to_str(cx: &ctxt, cty: &ty::ClosureTy) -> ~str 
closure_tys			    fn closure_tys(&self, a: &ty::ClosureTy,
cmp			impl cmp::Eq for InferRegion 
cmp			impl cmp::Eq for intern_key 
cmt_			impl cmt_ 
cmt_			pub struct cmt_ 
cmt_to_str			    pub fn cmt_to_str(&self, cmt: mc::cmt) -> ~str 
cmt_to_str			    pub fn cmt_to_str(&self, cmt: cmt) -> ~str 
codemap			    pub fn codemap<'a>(&'a self) -> &'a codemap::CodeMap 
coerce			pub fn coerce(fcx: &FnCtxt, sp: Span, expected: ty::t, expr: &ast::Expr) 
coerce_borrowed_fn			    pub fn coerce_borrowed_fn(&self,
coerce_borrowed_object			    fn coerce_borrowed_object(&self,
coerce_borrowed_pointer			    pub fn coerce_borrowed_pointer(&self,
coerce_borrowed_string			    pub fn coerce_borrowed_string(&self,
coerce_borrowed_vector			    pub fn coerce_borrowed_vector(&self,
coerce_from_bare_fn			    fn coerce_from_bare_fn(&self, a: ty::t, fn_ty_a: &ty::BareFnTy, b: ty::t)
coerce_object			    pub fn coerce_object(&self,
coerce_to_int			fn coerce_to_int(ccx: &CrateContext, size: uint) -> Vec<Type> 
coerce_unsafe_ptr			    pub fn coerce_unsafe_ptr(&self,
coercion			pub mod coercion;
coherence			pub mod coherence;
collect			    pub fn collect(&mut self, krate: &ast::Crate) 
collect			pub mod collect;
collect_concrete_region_errors			    fn collect_concrete_region_errors(
collect_concrete_regions			    fn collect_concrete_regions(&self,
collect_crate_types			pub fn collect_crate_types(session: &Session,
collect_error_for_contracting_node			    fn collect_error_for_contracting_node(
collect_error_for_expanding_node			    fn collect_error_for_expanding_node(
collect_external_language_items			    pub fn collect_external_language_items(&mut self) 
collect_freevars			fn collect_freevars(def_map: resolve::DefMap, blk: &ast::Block) -> freevar_info 
collect_intrinsic_type			    fn collect_intrinsic_type(ccx: &CrateCtxt,
collect_item			    pub fn collect_item(&mut self, item_index: uint, item_def_id: ast::DefId) 
collect_item_types			pub fn collect_item_types(ccx: &CrateCtxt, krate: &ast::Crate) 
collect_language_items			pub fn collect_language_items(krate: &ast::Crate,
collect_local_language_items			    pub fn collect_local_language_items(&mut self, krate: &ast::Crate) 
collect_record_or_struct_fields			fn collect_record_or_struct_fields<'a>(
combine			pub mod combine;
combine_fields			    fn combine_fields<'a>(&'a self) -> CombineFields<'a> { *self.get_ref() }
combine_fields			    fn combine_fields<'a>(&'a self) -> CombineFields<'a>;
combine_fields			    pub fn combine_fields<'a>(&'a self, a_is_expected: bool, trace: TypeTrace)
combine_impl_and_methods_tps			fn combine_impl_and_methods_tps(bcx: &Block,
combine_map			    fn combine_map<'a>(&'a self, t: CombineMapType)
combine_vars			    pub fn combine_vars(&self,
commit			    pub fn commit<T,E>(&self, f: || -> Result<T,E>) -> Result<T,E> 
commit			    pub fn commit(&self) 
common			    pub mod common;
common			pub mod common;
common			pub mod common;
common_supertype			pub fn common_supertype(cx: &InferCtxt,
compare			    fn compare(&self, t: T, f: || -> ty::type_err) -> cres<T> 
compare			    fn compare(&self, t: T, f: || -> ty::type_err) -> cres<T>;
compare_const_vals			pub fn compare_const_vals(a: &const_val, b: &const_val) -> Option<int> 
compare_impl_method			fn compare_impl_method(tcx: &ty::ctxt,
compare_lit_exprs			pub fn compare_lit_exprs(tcx: &ty::ctxt, a: &Expr, b: &Expr) -> Option<int> 
compare_scalar_types			pub fn compare_scalar_types<'a>(
compare_scalar_values			pub fn compare_scalar_values<'a>(
compare_vals			fn compare_vals<T: Ord>(a: T, b: T) -> Option<int> 
compare_values			fn compare_values<'a>(
compile_guard			fn compile_guard<'r,
compile_input			pub fn compile_input(sess: Session, cfg: ast::CrateConfig, input: &Input,
compile_submatch			fn compile_submatch<'r,
compile_submatch_continue			fn compile_submatch_continue<'r,
compile_unit_metadata			fn compile_unit_metadata(cx: &CrateContext) 
composite_type_metadata			fn composite_type_metadata(cx: &CrateContext,
compute			    fn compute(&mut self, decl: &FnDecl, body: &Block) -> LiveNode 
compute_abi_info			pub fn compute_abi_info(ccx: &CrateContext,
compute_abi_info			pub fn compute_abi_info(ccx: &CrateContext,
compute_abi_info			pub fn compute_abi_info(ccx: &CrateContext,
compute_abi_info			pub fn compute_abi_info(ccx: &CrateContext,
compute_abi_info			pub fn compute_abi_info(ccx: &CrateContext,
compute_bounds			    fn compute_bounds(
compute_captures			    pub fn compute_captures(&mut self, fn_expr_id: NodeId) -> Rc<Vec<CaptureVar> > 
compute_gen_scope			    pub fn compute_gen_scope(&self,
compute_id_range			    fn compute_id_range(&mut self, id: ast::NodeId) -> (uint, uint) 
compute_id_range_frozen			    fn compute_id_range_frozen(&self, id: ast::NodeId) -> (uint, uint) 
compute_kill_scope			    pub fn compute_kill_scope(&self, loan_scope: ast::NodeId, lp: @LoanPath)
compute_modes_for_expr			fn compute_modes_for_expr(cx: &mut VisitContext,
compute_modes_for_fn			fn compute_modes_for_fn(cx: &mut VisitContext,
compute_modes_for_local			fn compute_modes_for_local<'a>(cx: &mut VisitContext,
compute_moves			pub fn compute_moves(tcx: &ty::ctxt,
compute_restrictions			pub fn compute_restrictions(bccx: &BorrowckCtxt,
cond_br			    pub fn cond_br(&self, cond: ValueRef, then_llbb: BasicBlockRef, else_llbb: BasicBlockRef) 
config			    pub mod config;
configure_llvm			    unsafe fn configure_llvm(sess: &Session) 
configure_main			fn configure_main(this: &mut EntryContext) 
confirm_candidate			    fn confirm_candidate(&self, rcvr_ty: ty::t, candidate: &Candidate)
connect_trait_tps			fn connect_trait_tps(vcx: &VtableContext,
consider_adding_edge			        fn consider_adding_edge(result_set: Vec<Region> ,
consider_candidates			    fn consider_candidates(&self, rcvr_ty: ty::t,
consider_reborrow			    fn consider_reborrow(&self,
const_addr_of			fn const_addr_of(cx: &CrateContext, cv: ValueRef) -> ValueRef 
const_deref			fn const_deref(cx: &CrateContext, v: ValueRef, t: ty::t, explicit: bool)
const_deref_newtype			fn const_deref_newtype(cx: &CrateContext, v: ValueRef, t: ty::t)
const_deref_ptr			fn const_deref_ptr(cx: &CrateContext, v: ValueRef) -> ValueRef 
const_eval			    pub mod const_eval;
const_expr			pub fn const_expr(cx: &CrateContext, e: &ast::Expr, is_local: bool) -> (ValueRef, bool) 
const_expr_unadjusted			fn const_expr_unadjusted(cx: &CrateContext, e: &ast::Expr,
const_get_discrim			pub fn const_get_discrim(ccx: &CrateContext, r: &Repr, val: ValueRef)
const_get_elt			pub fn const_get_elt(cx: &CrateContext, v: ValueRef, us: &[c_uint])
const_get_field			pub fn const_get_field(ccx: &CrateContext, r: &Repr, val: ValueRef,
const_inbounds_gepi			    pub fn const_inbounds_gepi(&self,
const_lit			pub fn const_lit(cx: &CrateContext, e: &ast::Expr, lit: ast::Lit)
const_ptrcast			pub fn const_ptrcast(cx: &CrateContext, a: ValueRef, t: Type) -> ValueRef 
const_struct_field			fn const_struct_field(ccx: &CrateContext, val: ValueRef, ix: uint)
const_to_int			pub fn const_to_int(v: ValueRef) -> c_longlong 
const_to_uint			pub fn const_to_uint(v: ValueRef) -> c_ulonglong 
const_val			pub enum const_val 
const_vec			fn const_vec(cx: &CrateContext, e: &ast::Expr,
constant_term			    fn constant_term(&self, v: ty::Variance) -> VarianceTermPtr<'a> 
constness			pub enum constness 
constrain_autoderefs			fn constrain_autoderefs(rcx: &mut Rcx,
constrain_bindings_in_pat			fn constrain_bindings_in_pat(pat: &ast::Pat, rcx: &mut Rcx) 
constrain_call			fn constrain_call(rcx: &mut Rcx,
constrain_callee			fn constrain_callee(rcx: &mut Rcx,
constrain_free_variables			    fn constrain_free_variables(rcx: &mut Rcx,
constrain_index			fn constrain_index(rcx: &mut Rcx,
constrain_regions_in_type			fn constrain_regions_in_type(
constrain_regions_in_type_of_node			fn constrain_regions_in_type_of_node(
construct			pub fn construct(tcx: &ty::ctxt,
construct			mod construct;
construct_graph			    fn construct_graph(&self) -> RegionGraph 
construct_parameter_environment			pub fn construct_parameter_environment(
construct_transformed_self_ty_for_object			fn construct_transformed_self_ty_for_object(
construct_var_data			    fn construct_var_data(&self) -> Vec<VarData> 
consts			pub mod consts;
consume			    fn consume(x: ~Foo) -> uint 
consume_arm			    pub fn consume_arm(&mut self, arm: &Arm) 
consume_block			    pub fn consume_block(&mut self, blk: &Block) 
consume_expr			    pub fn consume_expr(&mut self, expr: &Expr) 
consume_exprs			    pub fn consume_exprs(&mut self, exprs: &[@Expr]) 
container_id			    pub fn container_id(&self) -> ast::DefId 
contains			    pub fn contains(&self, other: &BoundRegion) -> bool 
contains_all			    pub fn contains_all(&self, restr: RestrictionSet) -> bool 
contains_error			    fn contains_error(&self) -> bool 
contains_error			    fn contains_error(&self) -> bool;
contains_lint			pub fn contains_lint(attrs: &[ast::Attribute],
context			pub mod context;
contract_node			    fn contract_node(&self,
contraction			    fn contraction(&self,
contraregions			    fn contraregions(&self, a: ty::Region, b: ty::Region)
contraregions			    fn contraregions(&self, a: ty::Region, b: ty::Region)
contraregions			    fn contraregions(&self, a: ty::Region, b: ty::Region)
contraregions			    fn contraregions(&self, a: ty::Region, b: ty::Region)
contratys			    fn contratys(&self, a: ty::t, b: ty::t) -> cres<ty::t>;
contratys			    fn contratys(&self, a: ty::t, b: ty::t) -> cres<ty::t> 
contratys			    fn contratys(&self, a: ty::t, b: ty::t) -> cres<ty::t> 
contratys			    fn contratys(&self, a: ty::t, b: ty::t) -> cres<ty::t> 
contravariant			    fn contravariant(&mut self,
contravariant_region_ptr			fn contravariant_region_ptr() 
controlflow			pub mod controlflow;
conv_builtin_bounds			fn conv_builtin_bounds(tcx: &ty::ctxt, ast_bounds: &Option<OwnedSlice<ast::TyParamBound>>,
convert			pub fn convert(ccx: &CrateCtxt, it: &ast::Item) 
convertAll			    fn convertAll<A,T:ConvertTo<A>>(v: &[T]) 
convertTo			        fn convertTo(&self) -> A;
convert_def_id			    fn convert_def_id(&mut self,
convert_field			pub fn convert_field(ccx: &CrateCtxt,
convert_foreign			pub fn convert_foreign(ccx: &CrateCtxt, i: &ast::ForeignItem) 
convert_methods			fn convert_methods(ccx: &CrateCtxt,
convert_struct			pub fn convert_struct(ccx: &CrateCtxt,
copy_args_to_allocas			fn copy_args_to_allocas<'a>(fcx: &FunctionContext<'a>,
copy_bits			fn copy_bits(in_vec: &[uint], out_vec: &mut [uint]) -> bool 
copy_if_invalid			        fn copy_if_invalid(src: LiveNode, dst: &mut LiveNode) -> bool 
copy_intrinsic			    fn copy_intrinsic(bcx: &Block, allow_overlap: bool, tp_ty: ty::t) 
copy_pointer			fn copy_pointer<'a,'b,T>(x: &'a mut &'b mut T) -> &'b mut T 
count_early_params			    fn count_early_params(&self) -> uint 
count_insn			    pub fn count_insn(&self, category: &str) 
count_llvm_insns			    pub fn count_llvm_insns(&self) -> bool 
count_traits_and_supertraits			pub fn count_traits_and_supertraits(tcx: &ctxt,
count_type_sizes			    pub fn count_type_sizes(&self) -> bool 
count_zeros_intrinsic			    fn count_zeros_intrinsic(bcx: &Block, name: &'static str) 
crate_ctxt_to_encode_parms			pub fn crate_ctxt_to_encode_parms<'r>(cx: &'r CrateContext, ie: encoder::EncodeInlinedItem<'r>)
crate_id_hash			pub fn crate_id_hash(crate_id: &CrateId) -> ~str 
crate_matches			    fn crate_matches(&mut self, crate_data: &[u8]) -> bool 
crate_metadata			impl crate_metadata 
crate_metadata			pub struct crate_metadata 
creader			pub mod creader;
creader_cache_key			pub struct creader_cache_key 
create			    pub fn create<'b>(sess: &'a Session, dst: &'b Path,
create_DIArray			fn create_DIArray(builder: DIBuilderRef, arr: &[DIDescriptor]) -> DIArray 
create_and_seed_worklist			fn create_and_seed_worklist(tcx: &ty::ctxt,
create_argument_metadata			pub fn create_argument_metadata(bcx: &Block, arg: &ast::Arg) 
create_bindings_map			fn create_bindings_map(bcx: &Block, pat: @ast::Pat) -> BindingsMap 
create_captured_var_metadata			pub fn create_captured_var_metadata(bcx: &Block,
create_datums_for_fn_args			pub fn create_datums_for_fn_args(fcx: &FunctionContext,
create_dummy_locals			    fn create_dummy_locals<'a>(mut bcx: &'a Block<'a>,
create_entry_fn			    fn create_entry_fn(ccx: &CrateContext,
create_entry_wrapper			pub fn create_entry_wrapper(ccx: &CrateContext,
create_function_debug_context			pub fn create_function_debug_context(cx: &CrateContext,
create_global_var_metadata			pub fn create_global_var_metadata(cx: &CrateContext,
create_graph			    fn create_graph() -> TestGraph 
create_impl_from_item			    fn create_impl_from_item(&self, item: &Item) -> @Impl 
create_index			fn create_index<T:Clone + Hash + 'static>(
create_local_var_metadata			pub fn create_local_var_metadata(bcx: &Block, local: &ast::Local) 
create_match_binding_metadata			pub fn create_match_binding_metadata(bcx: &Block,
create_member_descriptions			    fn create_member_descriptions(&self, cx: &CrateContext)
create_name_bindings_from_module			    fn create_name_bindings_from_module(module: @Module) -> NameBindings 
create_pointer_to_box_metadata			    fn create_pointer_to_box_metadata(cx: &CrateContext,
create_region_hierarchy			    pub fn create_region_hierarchy(&self, rh: &RH) 
create_simple_region_hierarchy			    pub fn create_simple_region_hierarchy(&self) 
create_struct_stub			fn create_struct_stub(cx: &CrateContext,
csearch			pub mod csearch;
cstore			pub mod cstore;
ctor			enum ctor 
ctor_arity			fn ctor_arity(cx: &MatchCheckCtxt, ctor: &ctor, ty: ty::t) -> uint 
ctxt			pub struct ctxt<'a> 
ctxt			pub struct ctxt 
data			    pub fn data<'a>(&'a self) -> &'a [u8] { self.data.as_slice() }
dataflow			    pub mod dataflow;
datum			pub mod datum;
datum_callee			    fn datum_callee<'a>(bcx: &'a Block<'a>, expr: &ast::Expr) -> Callee<'a> 
dead			    pub mod dead;
debug_context			fn debug_context<'a>(cx: &'a CrateContext) -> &'a CrateDebugContext 
debugging_opt			    pub fn debugging_opt(&self, opt: u64) -> bool 
debugging_opts_map			pub fn debugging_opts_map() -> Vec<(&'static str, &'static str, u64)> 
debuginfo			pub mod debuginfo 
debuginfo			pub mod debuginfo;
debuginfo_disabled_message			    fn debuginfo_disabled_message() -> &'static str 
decl			    fn decl(&mut self, decl: @ast::Decl, pred: CFGIndex) -> CFGIndex 
decl_cdecl_fn			pub fn decl_cdecl_fn(llmod: ModuleRef,
decl_fn			fn decl_fn(llmod: ModuleRef, name: &str, cc: lib::llvm::CallConv,
decl_internal_rust_fn			pub fn decl_internal_rust_fn(ccx: &CrateContext, has_env: bool,
decl_rust_fn			pub fn decl_rust_fn(ccx: &CrateContext, has_env: bool,
declare_generic_glue			fn declare_generic_glue(ccx: &CrateContext, t: ty::t, llfnty: Type,
declare_intrinsics			pub fn declare_intrinsics(ccx: &mut CrateContext) 
declare_local			fn declare_local(bcx: &Block,
declare_tydesc			pub fn declare_tydesc(ccx: &CrateContext, t: ty::t) -> @tydesc_info 
declared_variance			    fn declared_variance(&self,
decode_ast			fn decode_ast(par_doc: ebml::Doc) -> ast::InlinedItem 
decode_def			fn decode_def(xcx: &ExtendedDecodeContext, doc: ebml::Doc) -> ast::Def 
decode_exported_macro			pub fn decode_exported_macro(par_doc: ebml::Doc) -> @ast::Item 
decode_inlined_item			pub fn decode_inlined_item(cdata: @cstore::crate_metadata,
decode_item_ast			fn decode_item_ast(par_doc: ebml::Doc) -> @ast::Item 
decode_side_tables			fn decode_side_tables(xcx: &ExtendedDecodeContext,
decoder			pub mod decoder;
decr_refcnt_maybe_free			fn decr_refcnt_maybe_free<'a>(bcx: &'a Block<'a>,
def			    pub fn def(&self, nid: ast::NodeId) -> ast::Def 
def_for_namespace			    fn def_for_namespace(&self, namespace: Namespace) -> Option<Def> 
def_has_ty_params			pub fn def_has_ty_params(def: ast::Def) -> bool 
def_id_decoder_helpers			trait def_id_decoder_helpers 
def_id_encoder_helpers			trait def_id_encoder_helpers 
def_id_represents_local_inlined_item			    fn def_id_represents_local_inlined_item(&self, def_id: ast::DefId) -> bool 
def_like_to_def			pub fn def_like_to_def(def_like: DefLike) -> ast::Def 
def_privacy			    fn def_privacy(&self, did: ast::DefId) -> PrivacyResult 
def_to_str			pub fn def_to_str(did: DefId) -> ~str 
default			fn default(cx: &MatchCheckCtxt, r: &[@Pat]) -> Option<Vec<@Pat> > 
default_configuration			pub fn default_configuration(sess: &Session) ->
default_lib_output			pub fn default_lib_output() -> CrateType 
default_method_hack			        fn default_method_hack(self_mt: ty::mt) -> bool 
define			    fn define(&mut self, writer: LiveNode, var: Variable) 
define_bindings_in_arm_pats			    fn define_bindings_in_arm_pats(&mut self, pats: &[@Pat], succ: LiveNode)
define_bindings_in_pat			    fn define_bindings_in_pat(&mut self, pat: @Pat, succ: LiveNode)
define_module			    fn define_module(&self,
define_type			    fn define_type(&self, def: Def, sp: Span, is_public: bool) 
define_value			    fn define_value(&self, def: Def, sp: Span, is_public: bool) 
defined			struct defined in `middle::borrowck`. Formally, we define `LOAN` as
defined_in_namespace			    fn defined_in_namespace(&self, namespace: Namespace) -> bool 
defined_in_public_namespace			    fn defined_in_public_namespace(&self, namespace: Namespace) -> bool 
demand			pub mod demand;
deref			pub fn deref(t: t, explicit: bool) -> Option<mt> 
deref_kind			pub enum deref_kind 
deref_kind			pub fn deref_kind(tcx: &ty::ctxt, t: ty::t) -> deref_kind 
deref_multiple			fn deref_multiple<'a>(bcx: &'a Block<'a>,
deref_once			fn deref_once<'a>(bcx: &'a Block<'a>,
deref_owned_pointer			    fn deref_owned_pointer<'a>(bcx: &'a Block<'a>,
deref_ty			pub fn deref_ty(ccx: &CrateContext, r: &Repr) -> ty::t 
describe_codegen_flags			pub fn describe_codegen_flags() 
describe_debug_flags			pub fn describe_debug_flags() 
describe_enum_variant			fn describe_enum_variant(cx: &CrateContext,
describe_warnings			pub fn describe_warnings() 
determine_inherited_purity			pub fn determine_inherited_purity(parent: (ast::Purity, ast::NodeId),
determine_parameters_to_be_inferred			fn determine_parameters_to_be_inferred<'a>(tcx: &'a ty::ctxt,
diagnostic			    pub fn diagnostic<'a>(&'a self) -> &'a diagnostic::SpanHandler 
did_to_str			    fn did_to_str(&self, did: DefId) -> ~str 
die			    fn die(cx: &Block) -> ! 
direct			    pub fn direct(ty: Type, cast: option::Option<Type>,
disr_in_range			    fn disr_in_range(ccx: &CrateCtxt,
do_check			    fn do_check(ccx: &CrateCtxt,
do_spill			pub fn do_spill(bcx: &Block, v: ValueRef, t: ty::t) -> ValueRef 
do_spill_noroot			pub fn do_spill_noroot(cx: &Block, v: ValueRef) -> ValueRef 
doc			pub mod doc;
doc			pub mod doc;
doc			pub mod doc;
doc			mod doc;
doc_decoder_helpers			trait doc_decoder_helpers 
doc_method_fty			fn doc_method_fty(doc: ebml::Doc, tcx: &ty::ctxt, cdata: Cmd) -> ty::BareFnTy 
doc_trait_ref			fn doc_trait_ref(doc: ebml::Doc, tcx: &ty::ctxt, cdata: Cmd) -> ty::TraitRef 
doc_type			fn doc_type(doc: ebml::Doc, tcx: &ty::ctxt, cdata: Cmd) -> ty::t 
docstr			    fn docstr(doc: ebml::Doc, tag_: uint) -> ~str 
driver			pub mod driver;
driver			pub mod driver;
drop			    fn drop(&mut self) 
drop			    fn drop(&mut self) 
drop			    fn drop(&mut self) 
drop			    fn drop(&mut self) 
drop			    fn drop(&mut self) { }
drop			    fn drop(&mut self) { debug!("<<"); }
drop_bindings			    fn drop_bindings<'a>(bcx: &'a Block<'a>, data: &ArmData)
drop_ty			pub fn drop_ty<'a>(bcx: &'a Block<'a>, v: ValueRef, t: ty::t)
drop_ty_immediate			pub fn drop_ty_immediate<'a>(bcx: &'a Block<'a>, v: ValueRef, t: ty::t)
dummy_substs			pub fn dummy_substs(tps: Vec<ty::t> ) -> ty::substs 
dump_crates			fn dump_crates(crate_cache: &[cache_entry]) 
dump_module			    fn dump_module(&mut self, module_: @Module) 
dylibname			    fn dylibname(&self) -> (&'static str, &'static str) 
each_adjacent_edge			    pub fn each_adjacent_edge(&self,
each_adjacent_from_a			    fn each_adjacent_from_a() 
each_adjacent_from_b			    fn each_adjacent_from_b() 
each_adjacent_from_c			    fn each_adjacent_from_c() 
each_adjacent_from_d			    fn each_adjacent_from_d() 
each_applicable_move			    fn each_applicable_move(&self,
each_assignment_of			    pub fn each_assignment_of(&self,
each_attr			pub fn each_attr(tcx: &ctxt, did: DefId, f: |@MetaItem| -> bool) -> bool 
each_auxiliary_node_id			fn each_auxiliary_node_id(item: @Item, callback: |NodeId| -> bool) -> bool 
each_base_path			    fn each_base_path(&self, index: MovePathIndex, f: |MovePathIndex| -> bool)
each_bit			    fn each_bit(&self, words: &[uint], f: |uint| -> bool) -> bool 
each_bit_on_entry			    pub fn each_bit_on_entry(&mut self,
each_bit_on_entry_frozen			    pub fn each_bit_on_entry_frozen(&self,
each_bound_trait_and_supertraits			pub fn each_bound_trait_and_supertraits(tcx: &ctxt,
each_child_of_item			pub fn each_child_of_item(cstore: &cstore::CStore,
each_child_of_item			pub fn each_child_of_item(intr: Rc<IdentInterner>,
each_child_of_item_or_crate			fn each_child_of_item_or_crate(intr: Rc<IdentInterner>,
each_edge			    fn each_edge() 
each_edge			    pub fn each_edge(&self, f: |EdgeIndex, &Edge<E>| -> bool) -> bool 
each_edge_index			pub fn each_edge_index(max_edge_index: EdgeIndex, f: |EdgeIndex| -> bool) 
each_extending_path			    fn each_extending_path(&self,
each_gen_bit			    pub fn each_gen_bit(&mut self, id: ast::NodeId, f: |uint| -> bool)
each_gen_bit_frozen			    pub fn each_gen_bit_frozen(&self, id: ast::NodeId, f: |uint| -> bool)
each_impl			pub fn each_impl(cstore: &cstore::CStore,
each_impl			pub fn each_impl(cdata: Cmd, callback: |ast::DefId|) 
each_implementation_for_trait			pub fn each_implementation_for_trait(cstore: &cstore::CStore,
each_implementation_for_trait			pub fn each_implementation_for_trait(cdata: Cmd,
each_implementation_for_type			pub fn each_implementation_for_type(cstore: &cstore::CStore,
each_implementation_for_type			pub fn each_implementation_for_type(cdata: Cmd,
each_in_scope_loan			    pub fn each_in_scope_loan(&self,
each_in_scope_restriction			    pub fn each_in_scope_restriction(&self,
each_incoming_edge			    pub fn each_incoming_edge(&self,
each_inherited_builtin_bound			        fn each_inherited_builtin_bound(cx: &ctxt,
each_issued_loan			    pub fn each_issued_loan(&self, scope_id: ast::NodeId, op: |&Loan| -> bool)
each_lang_item			pub fn each_lang_item(cstore: &cstore::CStore,
each_lang_item			pub fn each_lang_item(cdata: Cmd, f: |ast::NodeId, uint| -> bool) -> bool 
each_lint			pub fn each_lint(sess: &session::Session,
each_move_of			    pub fn each_move_of(&self,
each_node			    fn each_node() 
each_node			    pub fn each_node(&self, f: |NodeIndex, &Node<N>| -> bool) -> bool 
each_outgoing_edge			    pub fn each_outgoing_edge(&self,
each_path_moved_by			    pub fn each_path_moved_by(&self,
each_reexport			fn each_reexport(d: ebml::Doc, f: |ebml::Doc| -> bool) -> bool 
each_top_level_item_of_crate			pub fn each_top_level_item_of_crate(cstore: &cstore::CStore,
each_top_level_item_of_crate			pub fn each_top_level_item_of_crate(intr: Rc<IdentInterner>,
early_bound_lifetimes			pub fn early_bound_lifetimes<'a>(generics: &'a ast::Generics) -> Vec<ast::Lifetime> 
early_error			pub fn early_error(msg: &str) -> ! 
early_exit_block			    fn early_exit_block(&self,
early_resolve_expr			pub fn early_resolve_expr(ex: &ast::Expr, fcx: &FnCtxt, is_early: bool) 
ebml_decoder_decoder_helpers			trait ebml_decoder_decoder_helpers 
ebml_decoder_helper			trait ebml_decoder_helper 
ebml_writer_helpers			trait ebml_writer_helpers 
edge			    pub fn edge<'a>(&'a self, idx: EdgeIndex) -> &'a Edge<E> 
edge_data			    pub fn edge_data<'a>(&'a self, idx: EdgeIndex) -> &'a E 
effect			    pub mod effect;
element_kind			fn element_kind(t: ty::t) -> ElementKind 
element_type			    pub fn element_type(&self) -> Type 
elements_required			pub fn elements_required(bcx: &Block, content_expr: &ast::Expr) -> uint 
emit_auto_adjustment			    fn emit_auto_adjustment(&mut self, ecx: &e::EncodeContext, adj: &ty::AutoAdjustment) 
emit_auto_adjustment			    fn emit_auto_adjustment(&mut self, ecx: &e::EncodeContext, adj: &ty::AutoAdjustment);
emit_calls_to_trait_visit_ty			pub fn emit_calls_to_trait_visit_ty<'a>(
emit_def_id			    fn emit_def_id(&mut self, did: ast::DefId) 
emit_def_id			    fn emit_def_id(&mut self, did: ast::DefId);
emit_substs			    fn emit_substs(&mut self, ecx: &e::EncodeContext, substs: &ty::substs) 
emit_substs			    fn emit_substs(&mut self, ecx: &e::EncodeContext, substs: &ty::substs);
emit_tpbt			    fn emit_tpbt(&mut self,
emit_ty			    fn emit_ty(&mut self, ecx: &e::EncodeContext, ty: ty::t) 
emit_ty			    fn emit_ty(&mut self, ecx: &e::EncodeContext, ty: ty::t);
emit_tydescs			pub fn emit_tydescs(ccx: &CrateContext) 
emit_type_param_def			    fn emit_type_param_def(&mut self,
emit_tys			    fn emit_tys(&mut self, ecx: &e::EncodeContext, tys: &[ty::t]) 
emit_tys			    fn emit_tys(&mut self, ecx: &e::EncodeContext, tys: &[ty::t]);
emit_vstore			    fn emit_vstore(&mut self, ecx: &e::EncodeContext, vstore: ty::vstore) 
emit_vstore			    fn emit_vstore(&mut self, ecx: &e::EncodeContext, vstore: ty::vstore);
emit_vtable_methods			fn emit_vtable_methods(bcx: &Block,
empty			    pub fn empty() -> substs 
empty_phi			    pub fn empty_phi(&self, ty: Type) -> ValueRef 
empty_struct			    pub fn empty_struct(ccx: &CrateContext) -> Type 
enc_abi_set			fn enc_abi_set(w: &mut MemWriter, abis: AbiSet) 
enc_bare_fn_ty			pub fn enc_bare_fn_ty(w: &mut MemWriter, cx: &ctxt, ft: &ty::BareFnTy) 
enc_bound_region			fn enc_bound_region(w: &mut MemWriter, cx: &ctxt, br: ty::BoundRegion) 
enc_bounds			fn enc_bounds(w: &mut MemWriter, cx: &ctxt, bs: &ty::ParamBounds) 
enc_closure_ty			fn enc_closure_ty(w: &mut MemWriter, cx: &ctxt, ft: &ty::ClosureTy) 
enc_fn_sig			fn enc_fn_sig(w: &mut MemWriter, cx: &ctxt, fsig: &ty::FnSig) 
enc_mt			fn enc_mt(w: &mut MemWriter, cx: &ctxt, mt: ty::mt) 
enc_mutability			fn enc_mutability(w: &mut MemWriter, mt: ast::Mutability) 
enc_onceness			fn enc_onceness(w: &mut MemWriter, o: Onceness) 
enc_opt			fn enc_opt<T>(w: &mut MemWriter, t: Option<T>, enc_f: |&mut MemWriter, T|) 
enc_purity			fn enc_purity(w: &mut MemWriter, p: Purity) 
enc_region			fn enc_region(w: &mut MemWriter, cx: &ctxt, r: ty::Region) 
enc_region_substs			fn enc_region_substs(w: &mut MemWriter, cx: &ctxt, substs: &ty::RegionSubsts) 
enc_sigil			fn enc_sigil(w: &mut MemWriter, sigil: Sigil) 
enc_sty			fn enc_sty(w: &mut MemWriter, cx: &ctxt, st: &ty::sty) 
enc_substs			pub fn enc_substs(w: &mut MemWriter, cx: &ctxt, substs: &ty::substs) 
enc_trait_ref			pub fn enc_trait_ref(w: &mut MemWriter, cx: &ctxt, s: &ty::TraitRef) 
enc_trait_store			pub fn enc_trait_store(w: &mut MemWriter, cx: &ctxt, s: ty::TraitStore) 
enc_ty			pub fn enc_ty(w: &mut MemWriter, cx: &ctxt, t: ty::t) 
enc_type_param_def			pub fn enc_type_param_def(w: &mut MemWriter, cx: &ctxt, v: &ty::TypeParameterDef) 
enc_vstore			pub fn enc_vstore(w: &mut MemWriter, cx: &ctxt, v: ty::vstore) 
encl_region			    pub fn encl_region(&self, id: ast::NodeId) -> ty::Region 
encl_scope			    pub fn encl_scope(&self, id: ast::NodeId) -> ast::NodeId 
encode_ast			fn encode_ast(ebml_w: &mut Encoder, item: ast::InlinedItem) 
encode_attributes			fn encode_attributes(ebml_w: &mut Encoder, attrs: &[Attribute]) 
encode_bounds_and_type			fn encode_bounds_and_type(ebml_w: &mut Encoder,
encode_crate_dep			fn encode_crate_dep(ebml_w: &mut Encoder,
encode_crate_deps			fn encode_crate_deps(ebml_w: &mut Encoder, cstore: &cstore::CStore) 
encode_crate_id			fn encode_crate_id(ebml_w: &mut Encoder, crate_id: &CrateId) 
encode_def_id			pub fn encode_def_id(ebml_w: &mut Encoder, id: DefId) 
encode_disr_val			fn encode_disr_val(_: &EncodeContext,
encode_enum_variant_info			fn encode_enum_variant_info(ecx: &EncodeContext,
encode_explicit_self			fn encode_explicit_self(ebml_w: &mut Encoder, explicit_self: ast::ExplicitSelf_) 
encode_exported_macro			pub fn encode_exported_macro(ebml_w: &mut Encoder, i: &ast::Item) 
encode_extension_implementations			fn encode_extension_implementations(ecx: &EncodeContext,
encode_family			fn encode_family(ebml_w: &mut Encoder, c: char) 
encode_freevar_entry			fn encode_freevar_entry(ebml_w: &mut Encoder, fv: @freevar_entry) 
encode_hash			fn encode_hash(ebml_w: &mut Encoder, hash: &Svh) 
encode_impl_type_basename			fn encode_impl_type_basename(ebml_w: &mut Encoder, name: Ident) 
encode_impl_vtables			fn encode_impl_vtables(ebml_w: &mut Encoder,
encode_impls			fn encode_impls(ecx: &EncodeContext,
encode_index			fn encode_index<T:'static>(
encode_info_for_foreign_item			fn encode_info_for_foreign_item(ecx: &EncodeContext,
encode_info_for_item			fn encode_info_for_item(ecx: &EncodeContext,
encode_info_for_items			fn encode_info_for_items(ecx: &EncodeContext,
encode_info_for_method			fn encode_info_for_method(ecx: &EncodeContext,
encode_info_for_mod			fn encode_info_for_mod(ecx: &EncodeContext,
encode_info_for_struct			fn encode_info_for_struct(ecx: &EncodeContext,
encode_info_for_struct_ctor			fn encode_info_for_struct_ctor(ecx: &EncodeContext,
encode_inherent_implementations			fn encode_inherent_implementations(ecx: &EncodeContext,
encode_inlined_item			pub fn encode_inlined_item(ecx: &e::EncodeContext,
encode_item_ast			fn encode_item_ast(ebml_w: &mut Encoder, item: @ast::Item) 
encode_item_variances			fn encode_item_variances(ebml_w: &mut Encoder,
encode_lang_items			fn encode_lang_items(ecx: &EncodeContext, ebml_w: &mut Encoder) 
encode_macro_defs			fn encode_macro_defs(ecx: &EncodeContext,
encode_macro_registrar_fn			fn encode_macro_registrar_fn(ecx: &EncodeContext, ebml_w: &mut Encoder) 
encode_meta_item			fn encode_meta_item(ebml_w: &mut Encoder, mi: @MetaItem) 
encode_metadata			pub fn encode_metadata(parms: EncodeParams, krate: &Crate) -> Vec<u8> 
encode_metadata_inner			fn encode_metadata_inner(wr: &mut MemWriter, parms: EncodeParams, krate: &Crate) 
encode_method_callee			fn encode_method_callee(ecx: &e::EncodeContext,
encode_method_fty			fn encode_method_fty(ecx: &EncodeContext,
encode_method_sort			fn encode_method_sort(ebml_w: &mut Encoder, sort: char) 
encode_method_ty_fields			fn encode_method_ty_fields(ecx: &EncodeContext,
encode_misc_info			fn encode_misc_info(ecx: &EncodeContext,
encode_mutability			    fn encode_mutability(ebml_w: &mut Encoder,
encode_name			fn encode_name(ebml_w: &mut Encoder, name: Name) 
encode_native_libraries			fn encode_native_libraries(ecx: &EncodeContext, ebml_w: &mut Encoder) 
encode_parent_item			fn encode_parent_item(ebml_w: &mut Encoder, id: DefId) 
encode_path			fn encode_path<PI: Iterator<PathElem> + Clone>(ebml_w: &mut Encoder,
encode_provided_source			fn encode_provided_source(ebml_w: &mut Encoder,
encode_reexported_static_base_methods			fn encode_reexported_static_base_methods(ecx: &EncodeContext,
encode_reexported_static_method			fn encode_reexported_static_method(ebml_w: &mut Encoder,
encode_reexported_static_methods			fn encode_reexported_static_methods(ecx: &EncodeContext,
encode_reexported_static_trait_methods			fn encode_reexported_static_trait_methods(ecx: &EncodeContext,
encode_reexports			fn encode_reexports(ecx: &EncodeContext,
encode_region_param_defs			fn encode_region_param_defs(ebml_w: &mut Encoder,
encode_side_tables_for_id			fn encode_side_tables_for_id(ecx: &e::EncodeContext,
encode_side_tables_for_ii			fn encode_side_tables_for_ii(ecx: &e::EncodeContext,
encode_struct_field_family			fn encode_struct_field_family(ebml_w: &mut Encoder,
encode_struct_fields			fn encode_struct_fields(ebml_w: &mut Encoder,
encode_symbol			fn encode_symbol(ecx: &EncodeContext,
encode_trait_ref			fn encode_trait_ref(ebml_w: &mut Encoder,
encode_ty_type_param_defs			fn encode_ty_type_param_defs(ebml_w: &mut Encoder,
encode_type			fn encode_type(ecx: &EncodeContext,
encode_variant_id			fn encode_variant_id(ebml_w: &mut Encoder, vid: DefId) 
encode_visibility			fn encode_visibility(ebml_w: &mut Encoder, visibility: Visibility) 
encode_vtable_origin			pub fn encode_vtable_origin(ecx: &e::EncodeContext,
encode_vtable_param_res			pub fn encode_vtable_param_res(ecx: &e::EncodeContext,
encode_vtable_res			pub fn encode_vtable_res(ecx: &e::EncodeContext,
encode_vtable_res_with_key			fn encode_vtable_res_with_key(ecx: &e::EncodeContext,
encoded_ty			pub fn encoded_ty(tcx: &ty::ctxt, t: ty::t) -> ~str 
encoder			pub mod encoder;
enforce_default_binding_mode			    fn enforce_default_binding_mode(&mut self,
enforce_drop_trait_limitations			    fn enforce_drop_trait_limitations(&self, candidate: &Candidate) 
enforce_object_limitations			    fn enforce_object_limitations(&self, candidate: &Candidate) 
ensure_generics_abi			fn ensure_generics_abi(ccx: &CrateCtxt,
ensure_no_ty_param_bounds			pub fn ensure_no_ty_param_bounds(ccx: &CrateCtxt,
ensure_public			    fn ensure_public(&self, span: Span, to_check: ast::DefId,
ensure_supertraits			pub fn ensure_supertraits(ccx: &CrateCtxt,
ensure_trait_methods			pub fn ensure_trait_methods(ccx: &CrateCtxt, trait_id: ast::NodeId) 
enter_default			fn enter_default<'r,'b>(
enter_match			fn enter_match<'r,'b>(
enter_opt			fn enter_opt<'r,'b>(
enter_rec_or_struct			fn enter_rec_or_struct<'r,'b>(
enter_region			fn enter_region<'r,
enter_tup			fn enter_tup<'r,'b>(
enter_tuple_struct			fn enter_tuple_struct<'r,'b>(
enter_uniq			fn enter_uniq<'r,'b>(
entry			    pub mod entry;
entry			struct entry<T> 
enum_is_univariant			pub fn enum_is_univariant(cx: &ctxt, id: ast::DefId) -> bool 
enum_variant_ids			fn enum_variant_ids(item: ebml::Doc, cdata: Cmd) -> Vec<ast::DefId> 
enum_variant_with_id			pub fn enum_variant_with_id(cx: &ctxt,
enum_variants			pub fn enum_variants(cx: &ctxt, id: ast::DefId) -> @Vec<@VariantInfo> 
env_arg_pos			    pub fn env_arg_pos(&self) -> uint 
eq			    fn eq(&self, other: &InferRegion) -> bool 
eq			    fn eq(&self, other: &intern_key) -> bool 
eq_int			            fn eq_int(a: int, b: int) -> bool { a == b }
eq_item			    fn eq_item(bytes: &[u8], item_id: ast::NodeId) -> bool 
eq_opt_regions			pub fn eq_opt_regions<C:Combine>(
eq_regions			pub fn eq_regions<C:Combine>(this: &C, a: ty::Region, b: ty::Region)
eq_tys			pub fn eq_tys<C:Combine>(this: &C, a: ty::t, b: ty::t) -> ures 
eqtype			pub fn eqtype(fcx: &FnCtxt, sp: Span, expected: ty::t, actual: ty::t) 
erase_from_parent			    pub fn erase_from_parent(self) 
err			    pub fn err(&self, msg: &str) 
err_args			    fn err_args(len: uint) -> Vec<ty::t> 
err_count			    pub fn err_count(&self) -> uint 
err_count_since_creation			    pub fn err_count_since_creation(&self) -> uint 
error_reporting			pub mod error_reporting;
estimate_sz			          fn estimate_sz(u: u64) -> u64 
eval_const_expr			pub fn eval_const_expr(tcx: &ty::ctxt, e: &Expr) -> const_val 
eval_const_expr_partial			pub fn eval_const_expr_partial<T: ty::ExprTyProvider>(tcx: &T, e: &Expr)
eval_repeat_count			pub fn eval_repeat_count<T: ExprTyProvider>(tcx: &T, count_expr: &ast::Expr) -> uint 
evaluate			    fn evaluate(&self, term: VarianceTermPtr<'a>) -> ty::Variance 
exactsdiv			    pub fn exactsdiv(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
existing_base_paths			    fn existing_base_paths(&self,
existing_match			fn existing_match(e: &Env, crate_id: &CrateId,
existing_move_path			    fn existing_move_path(&self,
expand_boxed_vec_ty			pub fn expand_boxed_vec_ty(tcx: &ty::ctxt, t: ty::t) -> ty::t 
expand_nested_bindings			fn expand_nested_bindings<'r,'b>(
expand_node			    fn expand_node(&self,
expansion			    fn expansion(&self, var_data: &mut [VarData]) 
expect			pub fn expect<T:Clone>(sess: &Session, opt: Option<T>, msg: || -> ~str) -> T 
expect_vstore			        fn expect_vstore(&self, tcx: &ty::ctxt, span: Span, ty: &str) -> ty::vstore 
expected_found			pub struct expected_found<T> 
expected_found			pub fn expected_found<C:Combine,T>(
expected_found			fn expected_found<T>(a_is_expected: bool,
expected_found_str			    fn expected_found_str<T:UserString+Resolvable>(
explain_region			pub fn explain_region(cx: &ctxt, region: ty::Region) -> ~str 
explain_region_and_span			pub fn explain_region_and_span(cx: &ctxt, region: ty::Region)
explain_span			    fn explain_span(cx: &ctxt, heading: &str, span: Span)
exported_name			pub fn exported_name(path: PathElems, hash: &str, vers: &str) -> ~str 
exported_name			fn exported_name(ccx: &CrateContext, id: ast::NodeId,
exported_trait			    fn exported_trait(&self, _id: ast::NodeId) -> bool 
expr			    fn expr(&mut self, expr: @ast::Expr, pred: CFGIndex) -> CFGIndex 
expr			pub mod expr;
expr			    pub fn expr(id: ast::NodeId) -> MethodCall 
expr_has_ty_params			pub fn expr_has_ty_params(cx: &ctxt, expr: &ast::Expr) -> bool 
expr_info			pub fn expr_info(expr: &ast::Expr) -> NodeInfo 
expr_is_lval			    pub fn expr_is_lval(&self, e: &ast::Expr) -> bool 
expr_is_lval			pub fn expr_is_lval(tcx: &ctxt,
expr_kind			    pub fn expr_kind(&self, e: &ast::Expr) -> ty::ExprKind 
expr_kind			pub fn expr_kind(tcx: &ctxt,
expr_span			pub fn expr_span(cx: &ctxt, id: NodeId) -> Span 
expr_to_str			    pub fn expr_to_str(&self, e: &ast::Expr) -> ~str 
expr_ty			    fn expr_ty(&mut self, expr: &ast::Expr) -> McResult<ty::t> 
expr_ty			pub fn expr_ty(bcx: &Block, ex: &ast::Expr) -> ty::t 
expr_ty			    fn expr_ty(&self, ex: &ast::Expr) -> t 
expr_ty			    fn expr_ty(&self, ex: &ast::Expr) -> t;
expr_ty			pub fn expr_ty(cx: &ctxt, expr: &ast::Expr) -> t 
expr_ty			    fn expr_ty(&self, ex: &ast::Expr) -> ty::t 
expr_ty			    pub fn expr_ty(&self, ex: &ast::Expr) -> ty::t 
expr_ty_adjusted			    fn expr_ty_adjusted(&mut self, expr: &ast::Expr) -> McResult<ty::t> 
expr_ty_adjusted			pub fn expr_ty_adjusted(bcx: &Block, ex: &ast::Expr) -> ty::t 
expr_ty_adjusted			pub fn expr_ty_adjusted(cx: &ctxt,
expr_ty_opt			pub fn expr_ty_opt(cx: &ctxt, expr: &ast::Expr) -> Option<t> 
expr_ty_params_and_ty			pub fn expr_ty_params_and_ty(cx: &ctxt,
exprs			    fn exprs(&mut self,
extend			    fn extend(&self,
extend			    fn extend(idents: &mut Vec<ast::Ident> , field_pats: &[ast::FieldPat]) 
extract			pub fn extract(attrs: &[ast::Attribute]) -> Option<InternedString> 
extract_all_region_names			    fn extract_all_region_names(&self) -> HashSet<ast::Name> 
extract_anon_nums_and_names			    fn extract_anon_nums_and_names(&self, same_regions: &SameRegions)
extract_crate_info			fn extract_crate_info(e: &Env, i: &ast::ViewItem) -> Option<CrateInfo> 
extract_element			    pub fn extract_element(&self, vec: ValueRef, idx: ValueRef) -> ValueRef 
extract_one			    fn extract_one(&mut self, m: HashSet<Path>, flavor: &str,
extract_value			    pub fn extract_value(&self, agg_val: ValueRef, idx: uint) -> ValueRef 
extract_values_and_collect_conflicts			    fn extract_values_and_collect_conflicts(
extract_variant_args			fn extract_variant_args<'a>(
extract_vec_elems			fn extract_vec_elems<'a>(
f32			    pub fn f32(ccx: &CrateContext) -> Type 
f64			    pub fn f64(ccx: &CrateContext) -> Type 
fadd			    pub fn fadd(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
fail_if_zero			pub fn fail_if_zero<'a>(
fake_ext_ctxt			impl fake_ext_ctxt for parse::ParseSess 
fake_ext_ctxt			trait fake_ext_ctxt 
fallback_path			    fn fallback_path(cx: &CrateContext) -> CString 
fatal			    pub fn fatal(&self, msg: &str) -> ! 
fcmp			    pub fn fcmp(&self, op: RealPredicate, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
fdiv			    pub fn fdiv(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
feature_gate			    pub mod feature_gate;
field			pub struct field 
field_expr			pub fn field_expr(f: ast::Field) -> @ast::Expr { return f.expr; }
field_exprs			pub fn field_exprs(fields: Vec<ast::Field> ) -> Vec<@ast::Expr> 
field_idx			pub fn field_idx(name: ast::Name, fields: &[field]) -> Option<uint> 
field_idx_strict			pub fn field_idx_strict(tcx: &ctxt, name: ast::Name, fields: &[field])
field_mutbl			pub fn field_mutbl(tcx: &ty::ctxt,
field_ty			pub struct field_ty 
field_types			    pub fn field_types(&self) -> Vec<Type> 
file_metadata			fn file_metadata(cx: &CrateContext, full_path: &str) -> DIFile 
filename_and_line_num_from_span			pub fn filename_and_line_num_from_span(bcx: &Block, span: Span)
filename_for_input			pub fn filename_for_input(sess: &Session, crate_type: session::CrateType,
files			    pub fn files(&self) -> Vec<~str> 
filesearch			    pub fn filesearch<'a>(&'a self) -> filesearch::FileSearch<'a> 
filesearch			pub mod filesearch;
filestem			    fn filestem(&self) -> ~str 
fill_fn_pair			fn fill_fn_pair(bcx: &Block, pair: ValueRef, llfn: ValueRef, llenvptr: ValueRef) 
fill_nested			        fn fill_nested(node: &NamespaceTreeNode, output: &mut ~str) 
filter_foreign_item			fn filter_foreign_item(cx: &Context, item: @ast::ForeignItem)
filter_view_item			fn filter_view_item<'r>(cx: &Context, view_item: &'r ast::ViewItem)
finalize			    fn finalize(&self, cx: &CrateContext) -> DICompositeType 
finalize			pub fn finalize(cx: &CrateContext) 
finalize_import			    fn finalize_import(&mut self, id: NodeId, span: Span) 
find_best_match_for_name			    fn find_best_match_for_name(&mut self, name: &str, max_distance: uint)
find_crate_id			pub fn find_crate_id(attrs: &[ast::Attribute], out_filestem: &str) -> CrateId 
find_entry_point			pub fn find_entry_point(session: &Session, krate: &Crate, ast_map: &ast_map::Map) 
find_extern_mod_stmt_cnum			    pub fn find_extern_mod_stmt_cnum(&self, emod_id: ast::NodeId)
find_item			fn find_item<'a>(item_id: ast::NodeId, items: ebml::Doc<'a>) -> ebml::Doc<'a> 
find_item			fn find_item(item: &Item, ctxt: &mut EntryContext) 
find_libdir			fn find_libdir(_sysroot: &Path) -> ~str 
find_libdir			fn find_libdir(sysroot: &Path) -> ~str 
find_library			    fn find_library(&self, name: &str) -> Path 
find_library_crate			    fn find_library_crate(&mut self) -> Option<Library> 
find_live			fn find_live(tcx: &ty::ctxt,
find_loop_scope			    fn find_loop_scope(&self,
find_nonrepresentable			    fn find_nonrepresentable<It: Iterator<t>>(cx: &ctxt, seen: &mut Vec<DefId>,
find_ptr			    fn find_ptr(&self) -> Option<uint> 
find_reachable			pub fn find_reachable(tcx: &ty::ctxt,
find_scope			    fn find_scope(&self,
find_scope			    fn find_scope<'a,'b>(
find_type			    pub fn find_type(&self, s: &str) -> Option<Type> 
find_vtable			pub fn find_vtable(tcx: &ty::ctxt,
finish			    fn finish(&mut self) 
finish_fn			pub fn finish_fn<'a>(fcx: &'a FunctionContext<'a>,
finish_register_fn			fn finish_register_fn(ccx: &CrateContext, sp: Span, sym: ~str, node_id: ast::NodeId,
finish_type_of			pub fn finish_type_of(cx: &CrateContext, r: &Repr, llty: &mut Type) 
first_adjacent			    pub fn first_adjacent(&self, node: NodeIndex, dir: Direction) -> EdgeIndex 
fixed_vec_metadata			fn fixed_vec_metadata(cx: &CrateContext,
fixup			    fn fixup(ty: Type, cls: &mut [RegClass]) 
fixup_err			pub enum fixup_err 
fixup_err_to_str			pub fn fixup_err_to_str(f: fixup_err) -> ~str 
fixup_substs			fn fixup_substs(vcx: &VtableContext,
fixup_ty			fn fixup_ty(vcx: &VtableContext,
flds			    fn flds(&self, a: ty::field, b: ty::field) -> cres<ty::field> 
float_cast			fn float_cast(bcx: &Block,
float_from_ty			    pub fn float_from_ty(ccx: &CrateContext, t: ast::FloatTy) -> Type 
float_width			    pub fn float_width(&self) -> uint 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			impl fmt::Show for Svh 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			impl fmt::Show for LiveNode 
fmt			impl fmt::Show for Variable 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result
fmt			impl fmt::Show for FloatVid 
fmt			impl fmt::Show for FnSig 
fmt			impl fmt::Show for InferTy 
fmt			impl fmt::Show for IntVarValue 
fmt			impl fmt::Show for IntVid 
fmt			impl fmt::Show for RegionVid 
fmt			impl fmt::Show for TyVid 
fmt			impl fmt::Show for TypeContents 
fmt			impl fmt::Show for t 
fmt			    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result 
fmul			    pub fn fmul(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
fn_callee			    fn fn_callee<'a>(bcx: &'a Block<'a>, llfn: ValueRef) -> Callee<'a> 
fn_input_to_str			    fn fn_input_to_str(cx: &ctxt, input: ty::t) -> ~str 
fn_is_variadic			pub fn fn_is_variadic(fty: t) -> bool 
fn_should_be_ignored			fn fn_should_be_ignored(fcx: &FunctionContext) -> bool 
fn_sig_to_str			pub fn fn_sig_to_str(cx: &ctxt, typ: &ty::FnSig) -> ~str 
fn_sigs			    fn fn_sigs(&self, a: &ty::FnSig, b: &ty::FnSig) -> cres<ty::FnSig>;
fn_sigs			    fn fn_sigs(&self, a: &ty::FnSig, b: &ty::FnSig) -> cres<ty::FnSig> 
fn_sigs			    fn fn_sigs(&self, a: &ty::FnSig, b: &ty::FnSig) -> cres<ty::FnSig> 
fn_sigs			    fn fn_sigs(&self, a: &ty::FnSig, b: &ty::FnSig) -> cres<ty::FnSig> 
fneg			    pub fn fneg(&self, v: ValueRef) -> ValueRef 
fold_bare_fn_ty			    fn fold_bare_fn_ty(&mut self,
fold_block			    fn fold_block(&mut self, block: ast::P<ast::Block>) -> ast::P<ast::Block> 
fold_block			fn fold_block(cx: &mut Context, b: ast::P<ast::Block>) -> ast::P<ast::Block> 
fold_block			    fn fold_block(&mut self, blk: ast::P<ast::Block>) -> ast::P<ast::Block> 
fold_closure_ty			    fn fold_closure_ty(&mut self,
fold_crate			    fn fold_crate(&mut self, krate: ast::Crate) -> ast::Crate 
fold_crate			    fn fold_crate(&mut self, c: ast::Crate) -> ast::Crate 
fold_foreign_mod			    fn fold_foreign_mod(&mut self, foreign_mod: &ast::ForeignMod) -> ast::ForeignMod 
fold_foreign_mod			fn fold_foreign_mod(cx: &mut Context, nm: &ast::ForeignMod) -> ast::ForeignMod 
fold_item			    fn fold_item(&mut self, item: @ast::Item) -> SmallVector<@ast::Item> 
fold_item			    fn fold_item(&mut self, i: @ast::Item) -> SmallVector<@ast::Item> 
fold_item_underscore			    fn fold_item_underscore(&mut self, item: &ast::Item_) -> ast::Item_ 
fold_item_underscore			fn fold_item_underscore(cx: &mut Context, item: &ast::Item_) -> ast::Item_ 
fold_mod			    fn fold_mod(&mut self, module: &ast::Mod) -> ast::Mod 
fold_mod			fn fold_mod(cx: &mut Context, m: &ast::Mod) -> ast::Mod 
fold_mod			    fn fold_mod(&mut self, module: &ast::Mod) -> ast::Mod 
fold_mod			    fn fold_mod(&mut self, m: &ast::Mod) -> ast::Mod 
fold_mt			    fn fold_mt(&mut self, t: &ty::mt) -> ty::mt 
fold_opt_ty			pub fn fold_opt_ty<T:TypeFolder>(this: &mut T,
fold_region			    fn fold_region(&mut self, r: ty::Region) -> ty::Region 
fold_region			        fn fold_region(&mut self, _: ty::Region) -> ty::Region 
fold_region			    fn fold_region(&mut self, r: ty::Region) -> ty::Region 
fold_region			        fn fold_region(&mut self, r: ty::Region) -> ty::Region 
fold_region			    fn fold_region(&mut self, r: ty::Region) -> ty::Region 
fold_regions			pub fn fold_regions(cx: &ctxt, ty: t, fldr: |r: Region| -> Region) -> t 
fold_regions_in_sig			pub fn fold_regions_in_sig(tcx: &ty::ctxt,
fold_sig			        fn fold_sig(&mut self,
fold_sig			    fn fold_sig(&mut self,
fold_struct			fn fold_struct(cx: &Context, def: &ast::StructDef) -> @ast::StructDef 
fold_sty			    fn fold_sty(&mut self, sty: &ty::sty) -> ty::sty 
fold_substs			        fn fold_substs(&mut self,
fold_substs			    fn fold_substs(&mut self,
fold_trait_ref			    fn fold_trait_ref(&mut self, t: &ty::TraitRef) -> ty::TraitRef 
fold_trait_store			    fn fold_trait_store(&mut self, s: ty::TraitStore) -> ty::TraitStore 
fold_ty			    fn fold_ty(&mut self, t: ty::t) -> ty::t 
fold_ty			        fn fold_ty(&mut self, t: ty::t) -> ty::t 
fold_ty			pub fn fold_ty(cx: &ctxt, t0: t, fldop: |t| -> t) -> t 
fold_ty			    fn fold_ty(&mut self, t: ty::t) -> ty::t 
fold_ty			    fn fold_ty(&mut self, ty: ty::t) -> ty::t 
fold_ty			        fn fold_ty(&mut self, ty: ty::t) -> ty::t 
fold_ty			    fn fold_ty(&mut self, t: ty::t) -> ty::t 
fold_ty_vec			pub fn fold_ty_vec<T:TypeFolder>(this: &mut T, tys: &[ty::t]) -> Vec<ty::t> 
fold_vstore			        fn fold_vstore(&mut self, vstore: vstore) -> vstore 
fold_vstore			    fn fold_vstore(&mut self, vstore: ty::vstore) -> ty::vstore 
foo			        fn foo() -> int { 3 + 4 } \/\/ first smalltalk program ever executed.
foo			        fn foo() {}
foo			        fn foo(x: uint, y: uint) -> uint 
foo			fn foo(a: ~int) 
foo			fn foo(point: &'a &'b Point) -> &'b f32 
foo			fn foo(point: &'a &'b mut Point) -> &'b f32 
foo			fn foo(point: &'a Point) -> &'static f32 
foo			fn foo(t0: & &mut int) 
foo			fn foo(t0: &mut int) 
foo			fn foo<'a>(mut t0: &'a mut int,
foo			        fn foo(_: LangItem) -> Option<ast::DefId> { None }
foo			    fn foo() -> ~int { ... }
foo			   fn foo<A>(a: A, b: A) { ... }
foo			fn foo<T>(x: T, y: T) { ... }
foo			    fn foo() { \/\/ 'foo is the function body
foo			    fn foo(x: int, y: int) { \/\/ -+
foo			      fn foo<T:quux,baz,bar>(a: T) -- a's vtable would have a
for_each_lib_search_path			    pub fn for_each_lib_search_path(&self, f: |&Path| -> FileMatch) 
foreign			pub mod foreign;
foreign_item_in_cfg			fn foreign_item_in_cfg(cx: &Context, item: &ast::ForeignItem) -> bool 
foreign_signature			fn foreign_signature(ccx: &CrateContext, fn_sig: &ty::FnSig, arg_tys: &[ty::t])
foreign_types_for_fn_ty			fn foreign_types_for_fn_ty(ccx: &CrateContext,
foreign_types_for_id			fn foreign_types_for_id(ccx: &CrateContext,
found_ast			pub enum found_ast 
fpcast			    pub fn fpcast(&self, val: ValueRef, dest_ty: Type) -> ValueRef 
fpext			    pub fn fpext(&self, val: ValueRef, dest_ty: Type) -> ValueRef 
fptosi			    pub fn fptosi(&self, val: ValueRef, dest_ty: Type) -> ValueRef 
fptoui			    pub fn fptoui(&self, val: ValueRef, dest_ty: Type) -> ValueRef 
fptrunc			    pub fn fptrunc(&self, val: ValueRef, dest_ty: Type) -> ValueRef 
free			    pub fn free(&self, ptr: ValueRef) 
free_lifetimes			pub fn free_lifetimes(ty_params: &OwnedSlice<ast::TyParam>) -> Vec<ast::Name> 
free_regions_first			        fn free_regions_first(a: &RegionAndOrigin,
free_regions_from_same_fn			        fn free_regions_from_same_fn(tcx: &ty::ctxt,
freely_aliasable			    pub fn freely_aliasable(&self, ctxt: &ty::ctxt) -> Option<AliasableReason> 
freevar_entry			pub struct freevar_entry 
freevars			    pub mod freevars;
frem			    pub fn frem(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
fresh_bound_region			    pub fn fresh_bound_region(&self, binder_id: ast::NodeId) -> ty::Region 
fresh_bound_variable			        fn fresh_bound_variable(this: &Glb, binder_id: NodeId) -> ty::Region 
from_ast_variant			    pub fn from_ast_variant(cx: &ctxt,
from_borrow_kind			    pub fn from_borrow_kind(borrow_kind: ty::BorrowKind) -> MutabilityCategory 
from_mutbl			    pub fn from_mutbl(m: ast::Mutability) -> MutabilityCategory 
from_mutbl			    pub fn from_mutbl(m: ast::Mutability) -> BorrowKind 
from_pointer_kind			    pub fn from_pointer_kind(base_mutbl: MutabilityCategory,
from_ref			    pub fn from_ref(r: TypeRef) -> Type 
from_uint			    pub fn from_uint(value : uint) -> Option<astencode_tag> 
from_uint			    fn from_uint(v: uint) -> BuiltinBound 
fromb			    fn fromb(b: bool) -> Result<const_val, ~str> { Ok(const_int(b as i64)) }
front			pub mod front 
fsub			    pub fn fsub(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
full_buffer			    fn full_buffer<'s>(&'s mut self) -> &'s [u8] 
full_buffer			    fn full_buffer<'s>(&'s mut self) -> &'s [u8];
func			    pub fn func(args: &[Type], ret: &Type) -> Type 
func_params			    pub fn func_params(&self) -> Vec<Type> 
function			    pub fn function(purity: ast::Purity, def: ast::NodeId) -> PurityState 
gate_box			    fn gate_box(&self, span: Span) 
gate_feature			    fn gate_feature(&self, feature: &str, span: Span, explain: &str) 
gather_assignment			pub fn gather_assignment(bccx: &BorrowckCtxt,
gather_captures			pub fn gather_captures(bccx: &BorrowckCtxt,
gather_decl			pub fn gather_decl(bccx: &BorrowckCtxt,
gather_fn_arg_patterns			    fn gather_fn_arg_patterns(&mut self,
gather_loans			pub mod gather_loans;
gather_loans_in_block			fn gather_loans_in_block(this: &mut GatherLoanCtxt,
gather_loans_in_expr			fn gather_loans_in_expr(this: &mut GatherLoanCtxt,
gather_loans_in_fn			pub fn gather_loans_in_fn(bccx: &BorrowckCtxt, decl: &ast::FnDecl, body: &ast::Block)
gather_loans_in_local			fn gather_loans_in_local(this: &mut GatherLoanCtxt,
gather_loans_in_static_initializer			pub fn gather_loans_in_static_initializer(bccx: &mut BorrowckCtxt, expr: &ast::Expr) 
gather_move			fn gather_move(bccx: &BorrowckCtxt,
gather_move_and_assignment			pub fn gather_move_and_assignment(bccx: &BorrowckCtxt,
gather_move_from_expr			pub fn gather_move_from_expr(bccx: &BorrowckCtxt,
gather_move_from_pat			pub fn gather_move_from_pat(bccx: &BorrowckCtxt,
gather_moves			mod gather_moves;
gather_pat			    fn gather_pat(&mut self,
general			    pub fn general(tcx: &'a ty::ctxt,
generalize_region			        fn generalize_region(this: &Glb,
generalize_region			        fn generalize_region(this: &Lub,
generate_test_harness			fn generate_test_harness(sess: &Session, krate: ast::Crate)
generate_unique_type_id			fn generate_unique_type_id(prefix: &'static str) -> ~str 
generic_glue_fn			    pub fn generic_glue_fn(cx: &CrateContext) -> Type 
generic_type_of			fn generic_type_of(cx: &CrateContext, r: &Repr, name: Option<&str>, sizing: bool) -> Type 
generics_of_static_method_container			fn generics_of_static_method_container(type_context: &ty::ctxt,
generics_require_inlining			fn generics_require_inlining(generics: &ast::Generics) -> bool 
gensym_name			pub fn gensym_name(name: &str) -> PathElem 
gep			    pub fn gep(&self, ptr: ValueRef, indices: &[ValueRef]) -> ValueRef 
gepi			    pub fn gepi(&self, base: ValueRef, ixs: &[uint]) -> ValueRef 
get			    fn get(&self) -> uint 
get			    fn get(&self) -> uint { let EdgeIndex(v) = *self; v }
get			    fn get(&self) -> uint { let NodeIndex(v) = *self; v }
get			    fn get(&self) -> uint { let LiveNode(v) = *self; v }
get			    fn get(&self) -> uint { let Variable(v) = *self; v }
get			    pub fn get(&self) -> BasicBlockRef 
get			    pub fn get(&self) -> UseRef 
get			    pub fn get(&self) -> ValueRef 
get			pub fn get(t: t) -> t_box 
get			    fn get<T:Clone,
get			    fn get(&'a self, br: ty::BoundRegion) -> ty::Region 
get			    fn get(&'a self, br: ty::BoundRegion) -> ty::Region;
getClobbers			fn getClobbers() -> ~str 
get_1			fn get_1<'a>() -> &'a int 
get_absolute_rpath			pub fn get_absolute_rpath(lib: &Path) -> ~str 
get_absolute_rpaths			fn get_absolute_rpaths(libs: &[Path]) -> Vec<~str> 
get_alloc			pub fn get_alloc(bcx: &Block, vptr: ValueRef) -> ValueRef 
get_ar_prog			pub fn get_ar_prog(sess: &Session) -> ~str 
get_arch			pub fn get_arch(triple: &str) -> Option<abi::Architecture> 
get_attributes			fn get_attributes(md: ebml::Doc) -> Vec<ast::Attribute> 
get_base_and_byte_len			pub fn get_base_and_byte_len(bcx: &Block,
get_base_and_len			pub fn get_base_and_len(bcx: &Block,
get_base_type			fn get_base_type(inference_context: &InferCtxt,
get_base_type_def_id			fn get_base_type_def_id(inference_context: &InferCtxt,
get_binding			                        fn get_binding(this: &mut Resolver,
get_cases			fn get_cases(tcx: &ty::ctxt, def_id: ast::DefId, substs: &ty::substs) -> Vec<Case> 
get_cc_prog			pub fn get_cc_prog(sess: &Session) -> ~str 
get_const_val			pub fn get_const_val(cx: &CrateContext,
get_crate_attributes			pub fn get_crate_attributes(data: &[u8]) -> Vec<ast::Attribute> 
get_crate_data			    pub fn get_crate_data(&self, cnum: ast::CrateNum) -> @crate_metadata 
get_crate_deps			pub fn get_crate_deps(data: &[u8]) -> Vec<CrateDep> 
get_crate_hash			    pub fn get_crate_hash(&self, cnum: ast::CrateNum) -> Svh 
get_crate_hash			pub fn get_crate_hash(data: &[u8]) -> Svh 
get_crate_id			    pub fn get_crate_id(&self, cnum: ast::CrateNum) -> CrateId 
get_crate_id			pub fn get_crate_id(data: &[u8]) -> CrateId 
get_dataptr			pub fn get_dataptr(bcx: &Block, vptr: ValueRef) -> ValueRef 
get_deps			    fn get_deps(cstore: &cstore::CStore,  preference: cstore::LinkagePreference)
get_did			            fn get_did(ccx: &CrateContext, did: ast::DefId)
get_dominating_store			    pub fn get_dominating_store(self, bcx: &Block) -> Option<Value> 
get_drop_glue			pub fn get_drop_glue(ccx: &CrateContext, t: ty::t) -> ValueRef 
get_drop_glue_type			fn get_drop_glue_type(ccx: &CrateContext, t: ty::t) -> ty::t 
get_element			    pub fn get_element(&self,
get_element_type			pub fn get_element_type(ty: t, i: uint) -> t 
get_enum_variant_types			pub fn get_enum_variant_types(ccx: &CrateCtxt,
get_enum_variants			pub fn get_enum_variants(tcx: &ty::ctxt, def: ast::DefId)
get_enum_variants			pub fn get_enum_variants(intr: Rc<IdentInterner>, cdata: Cmd, id: ast::NodeId,
get_explicit_self			fn get_explicit_self(item: ebml::Doc) -> ast::ExplicitSelf_ 
get_exported_macros			    fn get_exported_macros(&mut self, cnum: ast::CrateNum) -> Vec<~str> 
get_exported_macros			pub fn get_exported_macros(cstore: &cstore::CStore,
get_exported_macros			pub fn get_exported_macros(cdata: Cmd) -> Vec<~str> 
get_extern_const			pub fn get_extern_const(externs: &mut ExternMap, llmod: ModuleRef,
get_extern_fn			pub fn get_extern_fn(externs: &mut ExternMap, llmod: ModuleRef,
get_extern_rust_fn			fn get_extern_rust_fn(ccx: &CrateContext, inputs: &[ty::t], output: ty::t,
get_field			    pub fn get_field(&self, idx: uint) -> Type 
get_field_type			pub fn get_field_type(tcx: &ty::ctxt, class_id: ast::DefId,
get_fill			pub fn get_fill(bcx: &Block, vptr: ValueRef) -> ValueRef 
get_first_use			    pub fn get_first_use(self) -> Option<Use> 
get_freevars			pub fn get_freevars(tcx: &ty::ctxt, fid: ast::NodeId) -> freevar_info 
get_function_signature			    fn get_function_signature(cx: &CrateContext,
get_generated_lifetimes			    fn get_generated_lifetimes(&self) -> Vec<ast::Lifetime> 
get_i			    fn get_i(x: &'a Bar) -> &'a int 
get_impl			pub fn get_impl(tcx: &ty::ctxt, impl_def_id: ast::DefId)
get_impl			pub fn get_impl(intr: Rc<IdentInterner>, cdata: Cmd, impl_id: ast::NodeId,
get_impl_method			pub fn get_impl_method(cstore: &cstore::CStore,
get_impl_method			pub fn get_impl_method(intr: Rc<IdentInterner>, cdata: Cmd, id: ast::NodeId,
get_impl_trait			pub fn get_impl_trait(tcx: &ty::ctxt,
get_impl_trait			pub fn get_impl_trait(cdata: Cmd,
get_impl_vtables			pub fn get_impl_vtables(tcx: &ty::ctxt,
get_impl_vtables			pub fn get_impl_vtables(cdata: Cmd,
get_install_prefix_rpath			pub fn get_install_prefix_rpath(sysroot: &Path, target_triple: &str) -> ~str 
get_item_attrs			pub fn get_item_attrs(cstore: &cstore::CStore,
get_item_attrs			pub fn get_item_attrs(cdata: Cmd,
get_item_path			pub fn get_item_path(tcx: &ty::ctxt, def: ast::DefId) -> Vec<ast_map::PathElem> 
get_item_path			pub fn get_item_path(cdata: Cmd, id: ast::NodeId) -> Vec<ast_map::PathElem> 
get_item_ty			    fn get_item_ty(&self, id: ast::DefId) -> ty::ty_param_bounds_and_ty 
get_item_ty			    fn get_item_ty(&self, id: ast::DefId) -> ty::ty_param_bounds_and_ty;
get_item_ty			    fn get_item_ty(&self, id: ast::DefId) -> ty::ty_param_bounds_and_ty 
get_item_ty			    fn get_item_ty(&self, id: ast::DefId) -> ty::ty_param_bounds_and_ty 
get_item_val			pub fn get_item_val(ccx: &CrateContext, id: ast::NodeId) -> ValueRef 
get_item_variances			pub fn get_item_variances(cstore: &cstore::CStore,
get_item_variances			pub fn get_item_variances(cdata: Cmd, id: ast::NodeId) -> ty::ItemVariances 
get_item_visibility			pub fn get_item_visibility(cstore: &cstore::CStore,
get_item_visibility			pub fn get_item_visibility(cdata: Cmd, id: ast::NodeId)
get_landing_pad			    fn get_landing_pad(&'a self) -> BasicBlockRef 
get_landing_pad			    fn get_landing_pad(&'a self) -> BasicBlockRef;
get_level			    fn get_level(&self, lint: Lint) -> level 
get_lint_dict			pub fn get_lint_dict() -> LintDict 
get_llreturn			    pub fn get_llreturn(&self) -> BasicBlockRef 
get_macro_registrar_fn			pub fn get_macro_registrar_fn(cstore: &cstore::CStore,
get_macro_registrar_fn			pub fn get_macro_registrar_fn(cdata: Cmd) -> Option<ast::DefId> 
get_meta_items			fn get_meta_items(md: ebml::Doc) -> Vec<@ast::MetaItem> 
get_metadata_section			fn get_metadata_section(os: Os, filename: &Path) -> Result<MetadataBlob, ~str> 
get_metadata_section_imp			fn get_metadata_section_imp(os: Os, filename: &Path) -> Result<MetadataBlob, ~str> 
get_method			pub fn get_method(tcx: &ty::ctxt, def: ast::DefId) -> ty::Method 
get_method			pub fn get_method(intr: Rc<IdentInterner>, cdata: Cmd, id: ast::NodeId,
get_method_index			fn get_method_index(tcx: &ty::ctxt,
get_method_name_and_explicit_self			pub fn get_method_name_and_explicit_self(cstore: &cstore::CStore,
get_method_name_and_explicit_self			pub fn get_method_name_and_explicit_self(
get_module			    fn get_module(&self) -> @Module 
get_module_from_parent			    fn get_module_from_parent(&mut self,
get_module_if_available			    fn get_module_if_available(&self) -> Option<@Module> 
get_mutability			    fn get_mutability(ch: u8) -> ast::Mutability 
get_namespace_and_span_for_item			fn get_namespace_and_span_for_item(cx: &CrateContext, def_id: ast::DefId)
get_native_libraries			pub fn get_native_libraries(cstore: &cstore::CStore,
get_native_libraries			pub fn get_native_libraries(cdata: Cmd) -> Vec<(cstore::NativeLibaryKind, ~str)> 
get_nearest_normal_module_parent			    fn get_nearest_normal_module_parent(&mut self, module_: @Module)
get_nearest_normal_module_parent_or_self			    fn get_nearest_normal_module_parent_or_self(&mut self, module_: @Module)
get_next_use			    pub fn get_next_use(self) -> Option<Use> 
get_opaque_ty			pub fn get_opaque_ty(tcx: &ctxt) -> Result<t, ~str> 
get_operand			    pub fn get_operand(self, i: uint) -> Option<Value> 
get_options			fn get_options(bcx: &Block, m: &[Match], col: uint) -> Vec<Opt> 
get_or_create_landing_pad			    fn get_or_create_landing_pad(&'a self) -> BasicBlockRef 
get_or_create_landing_pad			    fn get_or_create_landing_pad(&'a self) -> BasicBlockRef;
get_or_default_sysroot			pub fn get_or_default_sysroot() -> Path 
get_ordered_deps			    fn get_ordered_deps(cstore: &cstore::CStore) -> Vec<decoder::CrateDep> 
get_os			pub fn get_os(triple: &str) -> Option<abi::Os> 
get_param			pub fn get_param(fndecl: ValueRef, param: uint) -> ValueRef 
get_parent			    pub fn get_parent(self) -> Option<BasicBlock> 
get_parent_link			    fn get_parent_link(&mut self, parent: ReducedGraphParent, name: Ident)
get_provided_source			fn get_provided_source(d: ebml::Doc, cdata: Cmd) -> Option<ast::DefId> 
get_provided_trait_methods			pub fn get_provided_trait_methods(tcx: &ty::ctxt,
get_provided_trait_methods			pub fn get_provided_trait_methods(intr: Rc<IdentInterner>, cdata: Cmd,
get_ref			    fn get_ref<'a>(&'a self, cx: &CrateContext, span: Span) -> &'a FunctionDebugContextData 
get_ref			    pub fn get_ref<'a>(&'a self) -> &'a CombineFields<'f> 
get_ref			    pub fn get_ref<'a>(&'a self) -> &'a CombineFields<'f> { let Glb(ref v) = *self; v }
get_ref			    pub fn get_ref<'a>(&'a self) -> &'a CombineFields<'f> { let Lub(ref v) = *self; v }
get_ref			    pub fn get_ref<'a>(&'a self) -> &'a CombineFields<'f> { let Sub(ref v) = *self; v }
get_region			trait get_region<'a, T:'static> 
get_registrar_symbol			    fn get_registrar_symbol(&mut self, cnum: ast::CrateNum) -> Option<~str> 
get_res_dtor			pub fn get_res_dtor(ccx: &CrateContext,
get_rpath_flags			pub fn get_rpath_flags(sess: &Session, out_filename: &Path) -> Vec<~str> 
get_rpath_relative_to_output			pub fn get_rpath_relative_to_output(os: abi::Os,
get_rpaths			fn get_rpaths(os: abi::Os,
get_rpaths_relative_to_output			fn get_rpaths_relative_to_output(os: abi::Os,
get_rust_path			pub fn get_rust_path() -> Option<~str> 
get_self_type_for_implementation			    fn get_self_type_for_implementation(&self, implementation: @Impl)
get_simple_intrinsic			pub fn get_simple_intrinsic(ccx: &CrateContext, item: &ast::ForeignItem) -> Option<ValueRef> 
get_single_predecessor			    pub fn get_single_predecessor(self) -> Option<BasicBlock> 
get_single_user			    pub fn get_single_user(self) -> Option<Value> 
get_source			    fn get_source(&self, lint: Lint) -> LintSource 
get_static_methods_if_impl			pub fn get_static_methods_if_impl(cstore: &cstore::CStore,
get_static_methods_if_impl			pub fn get_static_methods_if_impl(intr: Rc<IdentInterner>,
get_struct_ctor_id			fn get_struct_ctor_id(item: &ast::Item) -> Option<ast::NodeId> 
get_struct_fields			pub fn get_struct_fields(cstore: &cstore::CStore,
get_struct_fields			pub fn get_struct_fields(intr: Rc<IdentInterner>, cdata: Cmd, id: ast::NodeId)
get_supertraits			pub fn get_supertraits(tcx: &ty::ctxt, def: ast::DefId) -> Vec<@ty::TraitRef> 
get_supertraits			pub fn get_supertraits(cdata: Cmd, id: ast::NodeId, tcx: &ty::ctxt)
get_symbol			pub fn get_symbol(cstore: &cstore::CStore, def: ast::DefId) -> ~str 
get_symbol			pub fn get_symbol(data: &[u8], id: ast::NodeId) -> ~str 
get_symbol_hash			fn get_symbol_hash(ccx: &CrateContext, t: ty::t) -> ~str 
get_sysroot_absolute_rt_lib			fn get_sysroot_absolute_rt_lib(sess: &Session) -> Path 
get_system_tool			fn get_system_tool(sess: &Session, tool: &str) -> ~str 
get_target_lib_file_path			    pub fn get_target_lib_file_path(&self, file: &Path) -> Path 
get_target_lib_path			    pub fn get_target_lib_path(&self) -> Path 
get_target_strs			pub fn get_target_strs(target_triple: ~str, target_os: abi::Os) -> target_strs::t 
get_target_strs			pub fn get_target_strs(target_triple: ~str, target_os: abi::Os) -> target_strs::t 
get_target_strs			pub fn get_target_strs(target_triple: ~str, target_os: abi::Os) -> target_strs::t 
get_target_strs			pub fn get_target_strs(target_triple: ~str, target_os: abi::Os) -> target_strs::t 
get_template_parameters			    fn get_template_parameters(cx: &CrateContext,
get_trait_def			pub fn get_trait_def(tcx: &ty::ctxt, def: ast::DefId) -> ty::TraitDef 
get_trait_def			pub fn get_trait_def(cdata: Cmd,
get_trait_def			    fn get_trait_def(&self, id: ast::DefId) -> @ty::TraitDef 
get_trait_def			    fn get_trait_def(&self, id: ast::DefId) -> @ty::TraitDef;
get_trait_def			    fn get_trait_def(&self, id: ast::DefId) -> @ty::TraitDef 
get_trait_def			    fn get_trait_def(&self, id: ast::DefId) -> @ty::TraitDef 
get_trait_def			fn get_trait_def(ccx: &CrateCtxt, trait_id: ast::DefId) -> @ty::TraitDef 
get_trait_method_def_ids			pub fn get_trait_method_def_ids(cstore: &cstore::CStore,
get_trait_method_def_ids			pub fn get_trait_method_def_ids(cdata: Cmd,
get_trait_of_method			pub fn get_trait_of_method(cstore: &cstore::CStore,
get_trait_of_method			pub fn get_trait_of_method(cdata: Cmd, id: ast::NodeId, tcx: &ty::ctxt)
get_tuple_struct_definition_if_ctor			pub fn get_tuple_struct_definition_if_ctor(cdata: Cmd,
get_ty_str_ctxt			trait get_ty_str_ctxt 
get_tydesc			pub fn get_tydesc(ccx: &CrateContext, t: ty::t) -> @tydesc_info 
get_tydesc_simple			pub fn get_tydesc_simple(ccx: &CrateContext, t: ty::t) -> ValueRef 
get_tydesc_ty			pub fn get_tydesc_ty(tcx: &ctxt) -> Result<t, ~str> 
get_type			pub fn get_type(tcx: &ty::ctxt,
get_type			pub fn get_type(cdata: Cmd, id: ast::NodeId, tcx: &ty::ctxt)
get_type_name_if_impl			pub fn get_type_name_if_impl(cstore: &cstore::CStore, def: ast::DefId)
get_type_name_if_impl			pub fn get_type_name_if_impl(cdata: Cmd,
get_type_param_count			pub fn get_type_param_count(cstore: &cstore::CStore, def: ast::DefId)
get_type_param_count			pub fn get_type_param_count(data: &[u8], id: ast::NodeId) -> uint 
get_used_crate_source			    pub fn get_used_crate_source(&self, cnum: ast::CrateNum)
get_used_crates			    pub fn get_used_crates(&self, prefer: LinkagePreference)
get_used_libraries			    pub fn get_used_libraries<'a>(&'a self)
get_used_link_args			    pub fn get_used_link_args<'a>(&'a self) -> &'a RefCell<Vec<~str> > 
get_user			    pub fn get_user(self) -> Value 
get_val			            fn get_val<'a>(bcx: &'a Block<'a>, did: ast::DefId, const_ty: ty::t)
get_vec_base_and_len			    pub fn get_vec_base_and_len<'a>(&self, bcx: &'a Block<'a>) -> (ValueRef, ValueRef) 
get_vtable			pub fn get_vtable(bcx: &Block,
get_wrapper_for_bare_fn			pub fn get_wrapper_for_bare_fn(ccx: &CrateContext,
give_expl_lifetime_param			    fn give_expl_lifetime_param(&self,
give_lifetime			    fn give_lifetime(&self) -> ast::Lifetime 
give_suggestion			    fn give_suggestion(&self, same_regions: &[SameRegions]) 
give_suggestion			    fn give_suggestion(&self, same_regions: &[SameRegions]);
glb			    fn glb<'a>(&'a self) -> Glb<'a>;
glb			    fn glb<'a>(&'a self) -> Glb<'a> { Glb(*self.get_ref()) }
glb			    fn glb(cf: &CombineFields, a: &Self, b: &Self) -> cres<Self>;
glb			    fn glb(cf: &CombineFields, a: &ty::t, b: &ty::t) -> cres<ty::t> 
glb			    fn glb<'a>(&'a self) -> Glb<'a> { Glb(*self.get_ref()) }
glb			pub mod glb;
glb			    fn glb<'a>(&'a self) -> Glb<'a> { Glb(*self.get_ref()) }
glb			    pub fn glb() -> Glb { Glb(self.infcx.combine_fields(true, DUMMY_SP)) }
glb			fn glb(v1: ty::Variance, v2: ty::Variance) -> ty::Variance 
glb_bound_bound			fn glb_bound_bound() 
glb_bound_free			fn glb_bound_free() 
glb_bound_static			fn glb_bound_static() 
glb_concrete_regions			    fn glb_concrete_regions(&self,
glb_free_free_with_common_scope			fn glb_free_free_with_common_scope() 
glb_free_regions			    fn glb_free_regions(&self,
glb_regions			    pub fn glb_regions(&self,
global_string			    pub fn global_string(&self, _str: *c_char) -> ValueRef 
global_string_ptr			    pub fn global_string_ptr(&self, _str: *c_char) -> ValueRef 
glue			pub mod glue;
glue_fn			    pub fn glue_fn(ccx: &CrateContext, t: Type) -> Type 
graph			    pub mod graph;
guarantee_adjustments			    pub fn guarantee_adjustments(&mut self,
guarantee_autoderefs			    pub fn guarantee_autoderefs(&mut self,
guarantee_captures			    fn guarantee_captures(&mut self,
guarantee_lifetime			pub fn guarantee_lifetime(bccx: &BorrowckCtxt,
guarantee_valid			    pub fn guarantee_valid(&mut self,
guarantee_valid_kind			    fn guarantee_valid_kind(&mut self,
guarantor			    pub fn guarantor(self) -> cmt 
handle_external_def			    fn handle_external_def(&mut self,
handle_fail			    fn handle_fail(&self) -> BasicBlockRef 
has_allow_dead_code_or_lang_attr			fn has_allow_dead_code_or_lang_attr(attrs: &[ast::Attribute]) -> bool 
has_attr			pub fn has_attr(tcx: &ctxt, did: DefId, attr: &str) -> bool 
has_drop_flag			    pub fn has_drop_flag(&self) -> bool 
has_dtor			                    fn has_dtor(tcx: &ty::ctxt, ty: ty::t) -> bool 
has_dtor			    pub fn has_dtor(&self) -> bool 
has_dtor			pub fn has_dtor(cx: &ctxt, struct_id: DefId) -> bool 
has_errors			    pub fn has_errors(&self) -> bool 
has_feature			    fn has_feature(&self, feature: &str) -> bool 
has_freevars			pub fn has_freevars(tcx: &ty::ctxt, fid: ast::NodeId) -> bool 
has_nested_bindings			fn has_nested_bindings(m: &[Match], col: uint) -> bool 
has_no_uses			    pub fn has_no_uses(self) -> bool 
has_test_signature			    fn has_test_signature(i: @ast::Item) -> bool 
has_trait_bounds			fn has_trait_bounds(type_param_defs: &[ty::TypeParameterDef]) -> bool 
has_type_params			    pub fn has_type_params(&self) -> bool 
hash			    fn hash(&self, s: &mut W) 
hash			    fn hash<T: Hash<FnvState>>(&self, t: &T) -> u64 
hash_crate_independent			pub fn hash_crate_independent(tcx: &ctxt, t: t, svh: &Svh) -> u64 
have_crate_data			    pub fn have_crate_data(&self, cnum: ast::CrateNum) -> bool 
heap			pub enum heap 
helper			        fn helper(this: &RegionVarBindings,
helper			        fn helper<T:Clone, V:Clone+Eq+Vid>(
hex			        fn hex(b: u64) -> char 
host_triple			pub fn host_triple() -> ~str 
i1			    pub fn i1(ccx: &CrateContext) -> Type 
i16			    pub fn i16(ccx: &CrateContext) -> Type 
i32			    pub fn i32(ccx: &CrateContext) -> Type 
i64			    pub fn i64(ccx: &CrateContext) -> Type 
i8			    pub fn i8(ccx: &CrateContext) -> Type 
i8p			    pub fn i8p(ccx: &CrateContext) -> Type 
icmp			    pub fn icmp(&self, op: IntPredicate, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
id			    fn id(&mut self, id: ast::NodeId) 
id			    fn id(&mut self, id: ast::NodeId);
id			    fn id(&self) -> ast::NodeId { self.id }
id			    fn id(&self) -> ast::NodeId;
id			    fn id(&self, namespace: Namespace) -> NodeId 
ident			    pub fn ident(&self, ident: Ident) -> ~str 
ident_of			    fn ident_of(&self, st: &str) -> ast::Ident 
ident_of			    fn ident_of(&self, st: &str) -> ast::Ident;
identify			    fn identify<T>(x: T) -> T { x }
idents_to_str			    fn idents_to_str(&mut self, idents: &[Ident]) -> ~str 
idx			    fn idx(&self, ln: LiveNode, var: Variable) -> uint 
ignore			    pub fn ignore(ty: Type) -> ArgType 
ignore_lhs			pub fn ignore_lhs(_bcx: &Block, local: &ast::Local) -> bool 
immediate_rvalue			pub fn immediate_rvalue(val: ValueRef, ty: ty::t) -> Datum<Rvalue> 
immediate_rvalue_bcx			pub fn immediate_rvalue_bcx<'a>(bcx: &'a Block<'a>,
impl_res			pub struct impl_res 
impl_self_ty			pub fn impl_self_ty(vcx: &VtableContext,
impl_trait_ref			pub fn impl_trait_ref(cx: &ctxt, id: ast::DefId) -> Option<@TraitRef> 
import_directive_subclass_to_str			    fn import_directive_subclass_to_str(&mut self,
import_path_to_str			    fn import_path_to_str(&mut self,
impossible_case			    pub fn impossible_case(&self, sp: Span, msg: &str) -> ! 
in			                                                        struct in scope",
in_cfg			fn in_cfg(cfg: &[@ast::MetaItem], attrs: &[ast::Attribute]) -> bool 
in_snapshot			    pub fn in_snapshot(&self) -> bool 
in_snapshot			    pub fn in_snapshot(&self) -> bool 
inbounds_gep			    pub fn inbounds_gep(&self, ptr: ValueRef, indices: &[ValueRef]) -> ValueRef 
inc			    fn inc(p: &mut uint) -> uint 
inc_and_get			fn inc_and_get<'a>(p: &'a mut Point) -> &'a int 
inc_and_offset_cur_anon			    fn inc_and_offset_cur_anon(&self, n: uint) 
inc_counter			    fn inc_counter(&self) 
inc_cur_anon			    fn inc_cur_anon(&self, n: uint) 
incomplete_type_of			pub fn incomplete_type_of(cx: &CrateContext, r: &Repr, name: &str) -> Type 
incr_refcnt_of_boxed			fn incr_refcnt_of_boxed<'a>(bcx: &'a Block<'a>,
indent			pub fn indent<R>(op: || -> R) -> R 
indenter			pub fn indenter() -> _indenter 
indeterminate			    fn indeterminate(&self) -> bool 
index			pub fn index(t: t) -> Option<mt> 
indices2			    fn indices2(&mut self,
indirect			    pub fn indirect(ty: Type, attr: option::Option<Attribute>) -> ArgType 
indirect_br			    pub fn indirect_br(&self, addr: ValueRef, num_dests: uint) 
inf_str			    fn inf_str(&self, _cx: &InferCtxt) -> ~str 
inf_str			    fn inf_str(&self, cx: &InferCtxt) -> ~str 
inf_str			    fn inf_str(&self, cx: &InferCtxt) -> ~str;
infcx			    fn infcx(&'a self) -> &'a infer::InferCtxt<'a> 
infcx			    pub fn infcx<'b>(&'b self) -> &'b infer::InferCtxt<'a> 
infcx			    fn infcx<'a>(&'a self) -> &'a InferCtxt<'a>;
infcx			    fn infcx<'a>(&'a self) -> &'a InferCtxt<'a> { self.get_ref().infcx }
infcx			    fn infcx<'a>(&'a self) -> &'a InferCtxt<'a> { self.get_ref().infcx }
infcx			    fn infcx<'a>(&'a self) -> &'a InferCtxt<'a> { self.get_ref().infcx }
infer			pub mod infer;
infer_variable_values			    fn infer_variable_values(&self,
infer_variance			pub fn infer_variance(tcx: &ty::ctxt,
inferred_index			    fn inferred_index(&self, param_id: ast::NodeId) -> InferredIndex 
inherit			    pub fn inherit(&self) -> MutabilityCategory 
inherited_mutability			    pub fn inherited_mutability(&mut self,
init_empty			    fn init_empty(&mut self, ln: LiveNode, succ_ln: LiveNode) 
init_from_succ			    fn init_from_succ(&mut self, ln: LiveNode, succ_ln: LiveNode) 
init_function			pub fn init_function<'a>(
init_insn_ctxt			pub fn init_insn_ctxt() 
init_local			pub fn init_local<'a>(bcx: &'a Block<'a>, local: &ast::Local)
initial_value			    fn initial_value(&self) -> bool 
initial_value			    fn initial_value(&self) -> bool 
initial_value			    fn initial_value(&self) -> bool;
inject_crates_ref			fn inject_crates_ref(sess: &Session, krate: ast::Crate) -> ast::Crate 
inject_prelude			fn inject_prelude(sess: &Session, krate: ast::Crate) -> ast::Crate 
inline			pub mod inline;
inline_asm_call			    pub fn inline_asm_call(&self, asm: *c_char, cons: *c_char,
input			    fn input(&mut self, d: &[u8]) 
input			    fn input(&mut self, input: &[u8]) 
input			    fn input(&mut self, input: &[u8]);
input			    fn input(&mut self, input: &[u8], func: |&[u8]|) 
input			    fn input(&mut self, input: &[u8], func: |&[u8]|);
input_str			    fn input_str(&mut self, input: &str) 
insert_element			    pub fn insert_element(&self, vec: ValueRef, elt: ValueRef, idx: ValueRef) -> ValueRef 
insert_lifetime			    fn insert_lifetime(&mut self,
insert_lllocals			fn insert_lllocals<'a>(bcx: &'a Block<'a>,
insert_value			    pub fn insert_value(&self, agg_val: ValueRef, elt: ValueRef,
insert_vtables			fn insert_vtables(fcx: &FnCtxt, vtable_key: MethodCall, vtables: vtable_res) 
instance			trait instance, such as a value of type `@ToStr`, then the trait
instantiate_default_methods			    fn instantiate_default_methods(&self, impl_id: ast::DefId,
instantiate_path			pub fn instantiate_path(fcx: &FnCtxt,
instantiate_trait_ref			pub fn instantiate_trait_ref(ccx: &CrateCtxt,
int			    pub fn int(ccx: &CrateContext) -> Type 
int_cast			fn int_cast(bcx: &Block,
int_from_ty			    pub fn int_from_ty(ccx: &CrateContext, t: ast::IntTy) -> Type 
int_in_range			        fn int_in_range(ccx: &CrateCtxt, ty: ast::IntTy, disr: ty::Disr) -> bool 
int_ty_range			    fn int_ty_range(int_ty: ast::IntTy) -> (i64, i64) 
intcast			    pub fn intcast(&self, val: ValueRef, dest_ty: Type) -> ValueRef 
interior			        fn interior<N: ast_node>(elt: &N,
interior_unsafe			    pub fn interior_unsafe(&self) -> bool 
intern			    fn intern(&mut self, string: &str, primitive_type: PrimTy) 
intern_key			pub struct intern_key 
intersect_scopes			    fn intersect_scopes(&self,
intersects			    pub fn intersects(&self, restr: RestrictionSet) -> bool 
intersects			    pub fn intersects(&self, tc: TypeContents) -> bool 
intrinsic			pub mod intrinsic;
inttoptr			    pub fn inttoptr(&self, val: ValueRef, dest_ty: Type) -> ValueRef 
invalid_node			fn invalid_node() -> LiveNode { LiveNode(uint::MAX) }
invalid_users			fn invalid_users() -> Users 
invariant			    fn invariant(&mut self,
inverse			    pub fn inverse(&self) -> TypeContents 
invoke			pub fn invoke<'a>(
invoke			    pub fn invoke(&self,
is_ReScope			    fn is_ReScope(r: ty::Region) -> bool 
is_a_terminator_inst			    pub fn is_a_terminator_inst(self) -> bool 
is_assignee			    pub fn is_assignee(&self,
is_ast_with_id			    fn is_ast_with_id(&self, id: ast::NodeId) -> bool 
is_bench_fn			fn is_bench_fn(cx: &TestCtxt, i: @ast::Item) -> bool 
is_binding_pat			    fn is_binding_pat(pat: &ast::Pat) -> bool 
is_binopable			pub fn is_binopable(cx: &ctxt, ty: t, op: ast::BinOp) -> bool 
is_borrowed_ty			    fn is_borrowed_ty(ty: &ast::Ty) -> bool 
is_bound			    pub fn is_bound(&self) -> bool 
is_by_ref			    fn is_by_ref(&self) -> bool 
is_by_ref			    fn is_by_ref(&self) -> bool;
is_by_ref			    pub fn is_by_ref(&self) -> bool 
is_by_value_type			pub fn is_by_value_type(ccx: &CrateContext, ty: ty::t) -> bool 
is_camel_case			    fn is_camel_case(ident: ast::Ident) -> bool 
is_comparison			    fn is_comparison(binop: ast::BinOp) -> bool 
is_const			pub fn is_const(v: ValueRef) -> bool 
is_copy			    pub fn is_copy(&self, _: &ctxt) -> bool 
is_direct			    pub fn is_direct(&self) -> bool 
is_entry_fn			pub fn is_entry_fn(sess: &Session, node_id: ast::NodeId) -> bool 
is_fallible			    fn is_fallible(&self) -> bool 
is_ffi_safe			pub fn is_ffi_safe(tcx: &ty::ctxt, def_id: ast::DefId) -> bool 
is_fn_ty			pub fn is_fn_ty(fty: t) -> bool 
is_ignore			    pub fn is_ignore(&self) -> bool 
is_ignored			fn is_ignored(cx: &TestCtxt, i: @ast::Item) -> bool 
is_immutable			    pub fn is_immutable(&self) -> bool 
is_indirect			    pub fn is_indirect(&self) -> bool 
is_infallible			    fn is_infallible(&self) -> bool 
is_instantiable			pub fn is_instantiable(cx: &ctxt, r_ty: t) -> bool 
is_last			    fn is_last(b: char, c: char) -> bool { return c == b; }
is_local_variable			    pub fn is_local_variable(&self, cmt: mc::cmt) -> bool 
is_loop_with_id			    fn is_loop_with_id(&self, id: ast::NodeId) -> bool 
is_method_call			    fn is_method_call(&mut self, id: ast::NodeId) -> bool 
is_method_call			    fn is_method_call(&self, expr: &ast::Expr) -> bool 
is_method_call			    fn is_method_call(&self, expr: &ast::Expr) -> bool 
is_method_call			    fn is_method_call(&mut self, id: ast::NodeId) -> bool;
is_method_call			    fn is_method_call(&mut self, id: ast::NodeId) -> bool 
is_move			    pub fn is_move(&self, id: ast::NodeId) -> bool 
is_moved			    fn is_moved(&self, cmt: mc::cmt) -> bool 
is_mutable			    pub fn is_mutable(&self) -> bool 
is_newtypeish			pub fn is_newtypeish(r: &Repr) -> bool 
is_node_local_to_unit			fn is_node_local_to_unit(cx: &CrateContext, node_id: ast::NodeId) -> bool
is_not_null			    pub fn is_not_null(&self, val: ValueRef) -> ValueRef 
is_not_present			    pub fn is_not_present(&self) -> bool 
is_null			    pub fn is_null(&self, val: ValueRef) -> ValueRef 
is_null			pub fn is_null(val: ValueRef) -> bool 
is_overloaded_deref			    fn is_overloaded_deref(&self) -> bool 
is_packed			    pub fn is_packed(&self) -> bool 
is_pass_byval			    fn is_pass_byval(&self) -> bool 
is_pass_byval			    fn is_pass_byval(&self) -> bool;
is_present			    pub fn is_present(&self) -> bool 
is_refutable			fn is_refutable(cx: &MatchCheckCtxt, pat: &Pat) -> bool 
is_reg_ty			fn is_reg_ty(ty: Type) -> bool 
is_reg_ty			fn is_reg_ty(ty: Type) -> bool 
is_reg_ty			    fn is_reg_ty(&self) -> bool 
is_reg_ty			    fn is_reg_ty(&self) -> bool;
is_relevant			    fn is_relevant(&self, rcvr_ty: ty::t, candidate: &Candidate) -> bool 
is_ret_bysret			    fn is_ret_bysret(&self) -> bool 
is_ret_bysret			    fn is_ret_bysret(&self) -> bool;
is_rvalue_or_immutable			    fn is_rvalue_or_immutable(&self,
is_sendable			    pub fn is_sendable(&self, _: &ctxt) -> bool 
is_sharable			    pub fn is_sharable(&self, _: &ctxt) -> bool 
is_sized			    pub fn is_sized(&self, _: &ctxt) -> bool 
is_sse			    fn is_sse(&self) -> bool 
is_static			    pub fn is_static(&self, _: &ctxt) -> bool 
is_str			    fn is_str(e: &Expr) -> bool 
is_subregion_of			    pub fn is_subregion_of(&self, r_sub: ty::Region, r_sup: ty::Region)
is_subregion_of			    pub fn is_subregion_of(&self,
is_subregion_of			    fn is_subregion_of(&self, sub: Region, sup: Region) -> bool 
is_subscope_of			    pub fn is_subscope_of(&self, r_sub: ast::NodeId, r_sup: ast::NodeId)
is_subscope_of			    pub fn is_subscope_of(&self,
is_subtype			    pub fn is_subtype(&self, a: ty::t, b: ty::t) -> bool 
is_temp			    fn is_temp(&self) -> bool 
is_test_crate			fn is_test_crate(krate: &ast::Crate) -> bool 
is_test_fn			fn is_test_fn(cx: &TestCtxt, i: @ast::Item) -> bool 
is_type_representable			pub fn is_type_representable(cx: &ctxt, ty: t) -> Representability 
is_undef			pub fn is_undef(val: ValueRef) -> bool 
is_unknown			    fn is_unknown(&self) -> bool 
is_unwind			    fn is_unwind(&self) -> bool 
is_useful			fn is_useful(cx: &MatchCheckCtxt, m: &matrix, v: &[@Pat]) -> useful 
is_useful_specialized			fn is_useful_specialized(cx: &MatchCheckCtxt,
is_valid			    fn is_valid<T:cmp::Ord>(binop: ast::BinOp, v: T,
is_valid			    fn is_valid(&self) -> bool 
is_valid_custom_scope			    fn is_valid_custom_scope(&self, custom_scope: CustomScopeIndex) -> bool 
is_valid_custom_scope			    fn is_valid_custom_scope(&self, custom_scope: CustomScopeIndex) -> bool;
is_valid_to_pop_custom_scope			    fn is_valid_to_pop_custom_scope(&self, custom_scope: CustomScopeIndex) -> bool 
is_valid_to_pop_custom_scope			    fn is_valid_to_pop_custom_scope(&self, custom_scope: CustomScopeIndex) -> bool;
is_var_in_set			pub fn is_var_in_set(new_vars: &[RegionVid], r: ty::Region) -> bool 
is_var_path			    fn is_var_path(&self, index: MovePathIndex) -> bool 
is_vec			                        fn is_vec(t: ty::t) -> bool 
is_wild			fn is_wild(cx: &MatchCheckCtxt, p: @Pat) -> bool 
is_writeable			fn is_writeable(p: &Path) -> bool 
is_zerolen			    fn is_zerolen(&self, cx: &CrateContext) -> bool 
item_def_id			fn item_def_id(d: ebml::Doc, cdata: Cmd) -> ast::DefId 
item_family			fn item_family(item: ebml::Doc) -> Family 
item_impl_methods			fn item_impl_methods(intr: Rc<IdentInterner>, cdata: Cmd, item: ebml::Doc,
item_in_cfg			fn item_in_cfg(cx: &Context, item: &ast::Item) -> bool 
item_method_sort			fn item_method_sort(item: ebml::Doc) -> char 
item_might_be_inlined			fn item_might_be_inlined(item: &ast::Item) -> bool 
item_name			fn item_name(intr: &IdentInterner, item: ebml::Doc) -> ast::Ident 
item_name			    pub fn item_name(index: uint) -> &'static str 
item_parent_item			fn item_parent_item(d: ebml::Doc) -> Option<ast::DefId> 
item_path			fn item_path(item_doc: ebml::Doc) -> Vec<ast_map::PathElem> 
item_path_str			pub fn item_path_str(cx: &ctxt, id: ast::DefId) -> ~str 
item_region_param_defs			fn item_region_param_defs(item_doc: ebml::Doc, cdata: Cmd)
item_reqd_and_translated_parent_item			fn item_reqd_and_translated_parent_item(cnum: ast::CrateNum,
item_symbol			fn item_symbol(item: ebml::Doc) -> ~str 
item_to_def_like			fn item_to_def_like(item: ebml::Doc, did: ast::DefId, cnum: ast::CrateNum)
item_trait_ref			fn item_trait_ref(doc: ebml::Doc, tcx: &ty::ctxt, cdata: Cmd) -> ty::TraitRef 
item_ty_param_count			fn item_ty_param_count(item: ebml::Doc) -> uint 
item_ty_param_defs			fn item_ty_param_defs(item: ebml::Doc,
item_type			pub fn item_type(_item_id: ast::DefId, item: ebml::Doc,
item_variances			pub fn item_variances(tcx: &ctxt, item_id: ast::DefId) -> @ItemVariances 
item_visibility			fn item_visibility(item: ebml::Doc) -> ast::Visibility 
items			  impl items contain tag_item_impl_method elements, and classes
items			  trait items contain tag_item_trait_method elements,
items			    pub fn items<'a>(&'a self) -> Enumerate<slice::Items<'a, Option<ast::DefId>>> 
iter_crate_data			    pub fn iter_crate_data(&self, i: |ast::CrateNum, @crate_metadata|) 
iter_impls_of_trait			    fn iter_impls_of_trait(&self, trait_def_id: DefId, f: |@Impl|) 
iter_impls_of_trait_local			    fn iter_impls_of_trait_local(&self, trait_def_id: DefId, f: |@Impl|) 
iter_structural_ty			pub fn iter_structural_ty<'r,
iter_variant			    fn iter_variant<'r,
iter_vec_loop			pub fn iter_vec_loop<'r,
iter_vec_raw			pub fn iter_vec_raw<'r,
iter_vec_unboxed			pub fn iter_vec_unboxed<'r,
iter_vec_uniq			pub fn iter_vec_uniq<'r,
iterate_until_fixed_point			    pub fn iterate_until_fixed_point(&self,
iterate_until_fixed_point			    fn iterate_until_fixed_point(&self,
join			    fn join(&self, succ: uint, pred: uint) -> uint 
join			    fn join(&self, succ: uint, pred: uint) -> uint 
join			pub fn join(a: constness, b: constness) -> constness 
join			    fn join(&self, succ: uint, pred: uint) -> uint;
join_all			pub fn join_all<It: Iterator<constness>>(mut cs: It) -> constness 
join_bits			fn join_bits<O:DataFlowOperator>(oper: &O,
join_blocks			    pub fn join_blocks(&'a self,
kill_moves			    fn kill_moves(&self,
kind			    pub mod kind;
kind			    pub fn kind(&self) -> TypeKind 
kind_bounds_to_contents			    fn kind_bounds_to_contents(cx: &ctxt,
krate			pub fn krate(sess: &Session, krate: &ast::Crate) -> NamedRegionMap 
landing_pad			    pub fn landing_pad(&self, ty: Type, pers_fn: ValueRef, num_clauses: uint) -> ValueRef 
lang_items			    pub mod lang_items;
langcall			pub fn langcall(bcx: &Block,
last_loop_scope			    fn last_loop_scope(&self) -> NodeId 
lattice			pub mod lattice;
lattice_var_and_t			pub fn lattice_var_and_t<L:LatticeDir + Combine,
lattice_vars			pub fn lattice_vars<L:LatticeDir + Combine,
lazily_emit_visit_glue			pub fn lazily_emit_visit_glue(ccx: &CrateContext, ti: @tydesc_info) 
lazy_binop_ty			enum lazy_binop_ty 
leaf			    pub fn leaf(&mut self, name: &str) 
level			pub enum level 
level_to_str			pub fn level_to_str(lv: level) -> &'static str 
lib			pub mod lib 
lifetime			mod lifetime;
lifetime_show			fn lifetime_show(lt_name: &ast::Name) -> token::InternedString 
like			impl like `impl Foo` are inherent methods.  Nothing needs to be
link			    pub mod link;
link_addr_of			fn link_addr_of(rcx: &mut Rcx, expr: &ast::Expr,
link_args			fn link_args(sess: &Session,
link_autoref			fn link_autoref(rcx: &mut Rcx,
link_binary			pub fn link_binary(sess: &Session,
link_binary_output			fn link_binary_output(sess: &Session,
link_by_ref			fn link_by_ref(rcx: &mut Rcx,
link_local			fn link_local(rcx: &mut Rcx, local: &ast::Local) 
link_match			fn link_match(rcx: &mut Rcx, discr: &ast::Expr, arms: &[ast::Arm]) 
link_name			pub fn link_name(i: &ast::ForeignItem) -> InternedString 
link_natively			fn link_natively(sess: &Session, dylib: bool, obj_filename: &Path,
link_pattern			fn link_pattern(mc: &mut mc::MemCategorizationContext<&mut Rcx>,
link_region			fn link_region(rcx: &mut Rcx,
link_region_from_node_type			fn link_region_from_node_type(rcx: &mut Rcx,
link_rlib			fn link_rlib<'a>(sess: &'a Session,
link_staticlib			fn link_staticlib(sess: &Session, obj_filename: &Path, out_filename: &Path) 
link_upvar_borrow_kind_for_nested_closures			fn link_upvar_borrow_kind_for_nested_closures(rcx: &mut Rcx,
lint			    pub mod lint;
lint_to_str			    fn lint_to_str(&self, lint: Lint) -> &'static str 
list_crate_attributes			fn list_crate_attributes(md: ebml::Doc, hash: &Svh,
list_crate_deps			fn list_crate_deps(data: &[u8], out: &mut io::Writer) -> io::IoResult<()> 
list_crate_metadata			pub fn list_crate_metadata(bytes: &[u8], out: &mut io::Writer) -> io::IoResult<()> 
list_file_metadata			pub fn list_file_metadata(os: Os, path: &Path,
list_metadata			pub fn list_metadata(sess: &Session, path: &Path,
lit_eq			pub fn lit_eq(a: &Lit, b: &Lit) -> Option<bool> 
lit_expr_eq			pub fn lit_expr_eq(tcx: &ty::ctxt, a: &Expr, b: &Expr) -> Option<bool> 
lit_to_const			pub fn lit_to_const(lit: &Lit) -> const_val 
lit_to_expr			fn lit_to_expr(tcx: &ty::ctxt, a: &Lit) -> @ast::Expr 
live_node			    fn live_node(&self, node_id: NodeId, span: Span) -> LiveNode 
live_node_kind_to_str			fn live_node_kind_to_str(lnk: LiveNodeKind, cx: &ty::ctxt) -> ~str 
live_on_entry			    fn live_on_entry(&self, ln: LiveNode, var: Variable)
live_on_exit			    fn live_on_exit(&self, ln: LiveNode, var: Variable)
liveness			    pub mod liveness;
ll_inttype			pub fn ll_inttype(cx: &CrateContext, ity: IntType) -> Type 
llalign_of			pub fn llalign_of(cx: &CrateContext, ty: Type) -> ValueRef 
llalign_of_min			pub fn llalign_of_min(cx: &CrateContext, ty: Type) -> u64 
llalign_of_pref			pub fn llalign_of_pref(cx: &CrateContext, ty: Type) -> u64 
llbitsize_of_real			pub fn llbitsize_of_real(cx: &CrateContext, ty: Type) -> u64 
llelement_offset			pub fn llelement_offset(cx: &CrateContext, struct_ty: Type, element: uint) -> u64 
llreg_ty			fn llreg_ty(ccx: &CrateContext, cls: &[RegClass]) -> Type 
llrepr			    fn llrepr(&self, ccx: &CrateContext) -> ~str 
llrepr			    fn llrepr(&self, ccx: &CrateContext) -> ~str;
llrepr			pub mod llrepr;
llsize_of			pub fn llsize_of(cx: &CrateContext, ty: Type) -> ValueRef 
llsize_of_alloc			pub fn llsize_of_alloc(cx: &CrateContext, ty: Type) -> u64 
llsize_of_real			pub fn llsize_of_real(cx: &CrateContext, ty: Type) -> u64 
llsize_of_store			pub fn llsize_of_store(cx: &CrateContext, ty: Type) -> u64 
llty_str			    pub fn llty_str(&self, ty: Type) -> ~str 
lltype_for_fn_from_foreign_types			fn lltype_for_fn_from_foreign_types(ccx: &CrateContext, tys: &ForeignTypes) -> Type 
lltype_for_foreign_fn			pub fn lltype_for_foreign_fn(ccx: &CrateContext, ty: ty::t) -> Type 
llvec_len			    fn llvec_len(cls: &[RegClass]) -> uint 
llvm			    pub mod llvm;
llvm			pub mod llvm 
llvm_calling_convention			pub fn llvm_calling_convention(ccx: &CrateContext,
llvm_err			pub fn llvm_err(sess: &Session, msg: ~str) -> ! 
llvm_linkage_by_name			pub fn llvm_linkage_by_name(name: &str) -> Option<Linkage> 
llvm_type_name			pub fn llvm_type_name(cx: &CrateContext,
llvmdeps			    pub mod llvmdeps;
ln_str			    fn ln_str(&self, ln: LiveNode) -> ~str 
lnk			    fn lnk(&self, ln: LiveNode) -> LiveNodeKind 
load			    pub fn load(&self, ptr: ValueRef) -> ValueRef 
load			fn load<'a>(bcx: &'a Block<'a>, llptr: ValueRef, ty: ty::t) -> ValueRef 
load_crate			    fn load_crate(&mut self, krate: &ast::ViewItem) -> MacroCrate 
load_discr			fn load_discr(bcx: &Block, ity: IntType, ptr: ValueRef, min: Disr, max: Disr)
load_environment			fn load_environment<'a>(bcx: &'a Block<'a>, cdata_ty: ty::t,
load_if_immediate			pub fn load_if_immediate(cx: &Block, v: ValueRef, t: ty::t) -> ValueRef 
load_inbounds			pub fn load_inbounds<'a>(cx: &'a Block<'a>, p: ValueRef, idxs: &[uint])
load_library_crate			    pub fn load_library_crate(&mut self, root_ident: Option<&str>) -> Library 
load_range_assert			    pub fn load_range_assert(&self, ptr: ValueRef, lo: c_ulonglong,
loader			pub mod loader;
loan_path_to_str			    pub fn loan_path_to_str(&self, loan_path: &LoanPath) -> ~str 
loans_generated_by			    pub fn loans_generated_by(&self, scope_id: ast::NodeId) -> Vec<uint> 
local_rhs_span			pub fn local_rhs_span(l: &ast::Local, def: Span) -> Span 
local_ty			    pub fn local_ty(&self, span: Span, nid: ast::NodeId) -> ty::t 
local_var_name_str			pub fn local_var_name_str(cx: &ctxt, id: NodeId) -> InternedString 
log_rpaths			    fn log_rpaths(desc: &str, rpaths: &[~str]) 
lookup			pub fn lookup<'a>(
lookup_and_handle_definition			    fn lookup_and_handle_definition(&mut self, id: &ast::NodeId) 
lookup_and_handle_method			    fn lookup_and_handle_method(&mut self, id: ast::NodeId,
lookup_const			pub fn lookup_const(tcx: &ty::ctxt, e: &Expr) -> Option<@Expr> 
lookup_const_by_id			pub fn lookup_const_by_id(tcx: &ty::ctxt, def_id: ast::DefId)
lookup_constness			    fn lookup_constness(&self, e: &Expr) -> constness 
lookup_def			pub fn lookup_def(fcx: &FnCtxt, sp: Span, id: ast::NodeId) -> ast::Def 
lookup_def_ccx			pub fn lookup_def_ccx(ccx: &CrateCtxt, sp: Span, id: ast::NodeId)
lookup_def_tcx			pub fn lookup_def_tcx(tcx:&ty::ctxt, sp: Span, id: ast::NodeId) -> ast::Def 
lookup_field_ty			pub fn lookup_field_ty(tcx: &ty::ctxt,
lookup_field_type			pub fn lookup_field_type(tcx: &ctxt,
lookup_hash			fn lookup_hash<'a>(d: ebml::Doc<'a>, eq_fn: |&[u8]| -> bool,
lookup_impl_vtables			pub fn lookup_impl_vtables(cx: &ctxt,
lookup_in_trait			pub fn lookup_in_trait<'a>(
lookup_item			fn lookup_item<'a>(item_id: ast::NodeId, data: &'a [u8]) -> ebml::Doc<'a> 
lookup_item			    pub fn lookup_item(&self, names: &[~str]) -> ast::node_id 
lookup_item_type			pub fn lookup_item_type(cx: &ctxt,
lookup_locally_or_in_crate_store			fn lookup_locally_or_in_crate_store<V:Clone>(
lookup_op_method			    fn lookup_op_method(fcx: &FnCtxt,
lookup_packed			pub fn lookup_packed(tcx: &ctxt, did: DefId) -> bool 
lookup_repr_hint			pub fn lookup_repr_hint(tcx: &ctxt, did: DefId) -> attr::ReprAttr 
lookup_simd			pub fn lookup_simd(tcx: &ctxt, did: DefId) -> bool 
lookup_struct_field			pub fn lookup_struct_field(cx: &ctxt,
lookup_struct_fields			pub fn lookup_struct_fields(cx: &ctxt, did: ast::DefId) -> Vec<field_ty> 
lookup_trait_def			pub fn lookup_trait_def(cx: &ctxt, did: ast::DefId) -> @ty::TraitDef 
lookup_variant_by_id			pub fn lookup_variant_by_id(tcx: &ty::ctxt,
lookup_vtable			fn lookup_vtable(vcx: &VtableContext,
lookup_vtable_from_bounds			fn lookup_vtable_from_bounds(vcx: &VtableContext,
lookup_vtables			fn lookup_vtables(vcx: &VtableContext,
lookup_vtables_for_param			fn lookup_vtables_for_param(vcx: &VtableContext,
loop_query			pub fn loop_query(b: &ast::Block, p: |&ast::Expr_| -> bool) -> bool 
lshr			    pub fn lshr(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
lto			    pub fn lto(&self) -> bool 
lto			    pub mod lto;
lub			    fn lub<'a>(&'a self) -> Lub<'a>;
lub			    fn lub<'a>(&'a self) -> Lub<'a> { Lub(*self.get_ref()) }
lub			    fn lub(cf: &CombineFields, a: &Self, b: &Self) -> cres<Self>;
lub			    fn lub(cf: &CombineFields, a: &ty::t, b: &ty::t) -> cres<ty::t> 
lub			    fn lub<'a>(&'a self) -> Lub<'a> { Lub(*self.get_ref()) }
lub			    pub fn lub<'a>(&'a self, a_is_expected: bool, trace: TypeTrace) -> Lub<'a> 
lub			pub mod lub;
lub			    fn lub<'a>(&'a self) -> Lub<'a> { Lub(*self.get_ref()) }
lub			    pub fn lub() -> Lub { Lub(self.infcx.combine_fields(true, DUMMY_SP)) }
lub_bound_bound			fn lub_bound_bound() 
lub_bound_bound_inverse_order			fn lub_bound_bound_inverse_order() 
lub_bound_free			fn lub_bound_free() 
lub_bound_static			fn lub_bound_static() 
lub_concrete_regions			    fn lub_concrete_regions(&self, a: Region, b: Region) -> Region 
lub_free_free			fn lub_free_free() 
lub_free_regions			    fn lub_free_regions(&self,
lub_regions			    pub fn lub_regions(&self,
lub_returning_scope			fn lub_returning_scope() 
lvalue_scratch_datum			pub fn lvalue_scratch_datum<'a, A>(bcx: &'a Block<'a>,
machine			pub mod machine;
macros			pub mod macros;
macros			pub mod macros;
main			        pub fn main() 
main			  fn main() 
main			pub fn main() 
main			fn main() 
main_args			pub fn main_args(args: &[~str]) -> int 
maj			        fn maj(x: u32, y: u32, z: u32) -> u32 
make_closure_from_bare_fn			pub fn make_closure_from_bare_fn<'a>(bcx: &'a Block<'a>,
make_drop_glue			fn make_drop_glue<'a>(bcx: &'a Block<'a>, v0: ValueRef, t: ty::t) -> &'a Block<'a> 
make_drop_glue_unboxed			pub fn make_drop_glue_unboxed<'a>(
make_generic_glue			fn make_generic_glue(ccx: &CrateContext,
make_mono_id			pub fn make_mono_id(ccx: &CrateContext,
make_return_pointer			pub fn make_return_pointer(fcx: &FunctionContext, output_type: ty::t)
make_rustpkg_target_lib_path			fn make_rustpkg_target_lib_path(sysroot: &Path,
make_stat			    fn make_stat(bccx: &mut BorrowckCtxt, stat: uint) -> ~str 
make_static_method_ty			    fn make_static_method_ty(ccx: &CrateCtxt,
make_subregion			    pub fn make_subregion(&self,
make_substs_for_receiver_types			pub fn make_substs_for_receiver_types(tcx: &ty::ctxt,
make_target_lib_path			fn make_target_lib_path(sysroot: &Path,
make_visit_glue			fn make_visit_glue<'a>(bcx: &'a Block<'a>, v: ValueRef, t: ty::t)
make_vtable			pub fn make_vtable(ccx: &CrateContext,
malloc			    pub fn malloc(&self, ty: Type) -> ValueRef 
malloc_general			pub fn malloc_general<'a>(bcx: &'a Block<'a>, t: ty::t, heap: heap)
malloc_general_dyn			pub fn malloc_general_dyn<'a>(
malloc_raw			pub fn malloc_raw<'a>(bcx: &'a Block<'a>, t: ty::t, heap: heap)
malloc_raw_dyn			pub fn malloc_raw_dyn<'a>(
managed_pointer			    pub fn managed_pointer(&self) -> TypeContents 
mangle			pub fn mangle<PI: Iterator<PathElem>>(mut path: PI,
mangle_exported_name			pub fn mangle_exported_name(ccx: &CrateContext, path: PathElems,
mangle_internal_name_by_path_and_seq			pub fn mangle_internal_name_by_path_and_seq(path: PathElems, flav: &str) -> ~str 
mangle_internal_name_by_type_and_seq			pub fn mangle_internal_name_by_type_and_seq(ccx: &CrateContext,
mangle_internal_name_by_type_only			pub fn mangle_internal_name_by_type_only(ccx: &CrateContext,
mangled_name_of_contained_item			    fn mangled_name_of_contained_item(&self, item_name: &str) -> ~str 
map_region			    pub fn map_region(&self, f: |Region| -> Region) -> AutoRef 
mark_as_terminating_scope			    pub fn mark_as_terminating_scope(&self, scope_id: ast::NodeId) 
mark_destructors_reachable			    fn mark_destructors_reachable(&mut self) 
mark_live_symbols			    fn mark_live_symbols(&mut self) 
mark_loan_path_as_mutated			    pub fn mark_loan_path_as_mutated(&self, loan_path: @LoanPath) 
mark_variable_as_used_mut			        fn mark_variable_as_used_mut(this: &CheckLoanCtxt,
match_datum			fn match_datum(bcx: &Block,
match_kind			    fn match_kind<R>(self,
may_break			pub fn may_break(cx: &ty::ctxt, id: ast::NodeId, b: ast::P<ast::Block>) -> bool 
maybe_find_item			pub fn maybe_find_item<'a>(item_id: ast::NodeId,
maybe_get_crate_hash			pub fn maybe_get_crate_hash(data: &[u8]) -> Option<Svh> 
maybe_get_crate_id			pub fn maybe_get_crate_id(data: &[u8]) -> Option<CrateId> 
maybe_get_item_ast			pub fn maybe_get_item_ast(tcx: &ty::ctxt, def: ast::DefId,
maybe_get_item_ast			pub fn maybe_get_item_ast(cdata: Cmd, tcx: &ty::ctxt, id: ast::NodeId,
maybe_inject_crates_ref			pub fn maybe_inject_crates_ref(sess: &Session, krate: ast::Crate)
maybe_inject_prelude			pub fn maybe_inject_prelude(sess: &Session, krate: ast::Crate) -> ast::Crate 
maybe_instantiate_inline			pub fn maybe_instantiate_inline(ccx: &CrateContext, fn_id: ast::DefId)
maybe_name_value			pub fn maybe_name_value(cx: &CrateContext, v: ValueRef, s: &str) 
maybe_walk_ty			pub fn maybe_walk_ty(ty: t, f: |t| -> bool) 
mc			    pub fn mc(&self) -> mc::MemCategorizationContext<TcxTyper<'a>> 
meets_bound			    pub fn meets_bound(&self, cx: &ctxt, bb: BuiltinBound) -> bool 
meets_bounds			    pub fn meets_bounds(&self, cx: &ctxt, bbs: BuiltinBounds) -> bool 
mem_categorization			    pub mod mem_categorization;
memcpy_ty			pub fn memcpy_ty(bcx: &Block, dst: ValueRef, src: ValueRef, t: ty::t) 
memset_intrinsic			    fn memset_intrinsic(bcx: &Block, tp_ty: ty::t) 
memzero			fn memzero(b: &Builder, llptr: ValueRef, ty: Type) 
merge_bnd			    fn merge_bnd<T:Clone + InferStr + LatticeValue>(
merge_candidates			    fn merge_candidates(&self, candidates: &[Candidate]) -> Vec<Candidate> 
merge_from_succ			    fn merge_from_succ(&mut self,
merge_import_resolution			    fn merge_import_resolution(&mut self,
merge_with_entry_set			    fn merge_with_entry_set(&mut self,
meta_section_name			pub fn meta_section_name(os: Os) -> &'static str 
meta_stats			    pub fn meta_stats(&self) -> bool { self.debugging_opt(META_STATS) }
metadata			pub mod metadata;
metadata			    pub fn metadata(ccx: &CrateContext) -> Type 
meth			pub mod meth;
method			                          trait method '{}'",
method			pub fn method(cx: &ctxt, id: ast::DefId) -> @Method 
method			pub mod method;
method_call_type_param_defs			pub fn method_call_type_param_defs(tcx: &ctxt, origin: typeck::MethodOrigin)
method_idx			pub fn method_idx(id: ast::Ident, meths: &[@Method]) -> Option<uint> 
method_in_cfg			fn method_in_cfg(cx: &Context, meth: &ast::Method) -> bool 
method_might_be_inlined			fn method_might_be_inlined(tcx: &ty::ctxt, method: &ast::Method,
method_ty_substs			    pub fn method_ty_substs(&self, id: ast::NodeId) -> ty::substs 
method_with_name			pub fn method_with_name(ccx: &CrateContext,
middle			pub mod middle 
minimize_rpaths			pub fn minimize_rpaths(rpaths: &[~str]) -> Vec<~str> 
mips			    pub mod mips;
missing_ctor			fn missing_ctor(cx: &MatchCheckCtxt,
mk_assignty			    pub fn mk_assignty(&self,
mk_bare_fn			pub fn mk_bare_fn(cx: &ctxt, fty: BareFnTy) -> t 
mk_binding_alloca			fn mk_binding_alloca<'a,A>(bcx: &'a Block<'a>,
mk_bool			pub fn mk_bool() -> t { mk_prim_t(&primitives::TY_BOOL) }
mk_bot			pub fn mk_bot() -> t { mk_prim_t(&primitives::TY_BOT) }
mk_box			pub fn mk_box(cx: &ctxt, ty: t) -> t { mk_t(cx, ty_box(ty)) }
mk_cenum			fn mk_cenum(cx: &CrateContext, hint: Hint, bounds: &IntBounds) -> Repr 
mk_char			pub fn mk_char() -> t { mk_prim_t(&primitives::TY_CHAR) }
mk_closure			pub fn mk_closure(cx: &ctxt, fty: ClosureTy) -> t 
mk_closure_tys			pub fn mk_closure_tys(tcx: &ty::ctxt,
mk_coercety			pub fn mk_coercety(cx: &InferCtxt,
mk_ctor_fn			pub fn mk_ctor_fn(cx: &ctxt,
mk_ctxt			fn mk_ctxt() -> parse::ParseSess 
mk_ctxt			pub fn mk_ctxt(s: Session,
mk_enum			pub fn mk_enum(cx: &ctxt, did: ast::DefId, substs: substs) -> t 
mk_eqty			    pub fn mk_eqty(&self,
mk_eqty			pub fn mk_eqty(cx: &InferCtxt,
mk_err			pub fn mk_err() -> t { mk_prim_t(&primitives::TY_ERR) }
mk_err			pub fn mk_err<T:SimplyUnifiable>(a_is_expected: bool,
mk_f32			pub fn mk_f32() -> t { mk_prim_t(&primitives::TY_F32) }
mk_f64			pub fn mk_f64() -> t { mk_prim_t(&primitives::TY_F64) }
mk_float_var			pub fn mk_float_var(cx: &ctxt, v: FloatVid) -> t { mk_infer(cx, FloatVar(v)) }
mk_i16			pub fn mk_i16() -> t { mk_prim_t(&primitives::TY_I16) }
mk_i32			pub fn mk_i32() -> t { mk_prim_t(&primitives::TY_I32) }
mk_i64			pub fn mk_i64() -> t { mk_prim_t(&primitives::TY_I64) }
mk_i8			pub fn mk_i8() -> t { mk_prim_t(&primitives::TY_I8) }
mk_imm_ptr			pub fn mk_imm_ptr(cx: &ctxt, ty: t) -> t 
mk_imm_rptr			pub fn mk_imm_rptr(cx: &ctxt, r: Region, ty: t) -> t 
mk_infer			pub fn mk_infer(cx: &ctxt, it: InferTy) -> t { mk_t(cx, ty_infer(it)) }
mk_int			pub fn mk_int() -> t { mk_prim_t(&primitives::TY_INT) }
mk_int_var			pub fn mk_int_var(cx: &ctxt, v: IntVid) -> t { mk_infer(cx, IntVar(v)) }
mk_item_substs			pub fn mk_item_substs(ccx: &CrateCtxt,
mk_mach_float			pub fn mk_mach_float(tm: ast::FloatTy) -> t 
mk_mach_int			pub fn mk_mach_int(tm: ast::IntTy) -> t 
mk_mach_uint			pub fn mk_mach_uint(tm: ast::UintTy) -> t 
mk_mut_ptr			pub fn mk_mut_ptr(cx: &ctxt, ty: t) -> t 
mk_mut_rptr			pub fn mk_mut_rptr(cx: &ctxt, r: Region, ty: t) -> t 
mk_mut_unboxed_vec			pub fn mk_mut_unboxed_vec(cx: &ctxt, ty: t) -> t 
mk_nil			pub fn mk_nil() -> t { mk_prim_t(&primitives::TY_NIL) }
mk_nil_ptr			pub fn mk_nil_ptr(cx: &ctxt) -> t 
mk_param			pub fn mk_param(cx: &ctxt, n: uint, k: DefId) -> t 
mk_pass_manager			pub fn mk_pass_manager() -> PassManager 
mk_pointer			    fn mk_pointer<AC:AstConv,
mk_prim_t			pub fn mk_prim_t(primitive: &'static t_box_) -> t 
mk_ptr			pub fn mk_ptr(cx: &ctxt, tm: mt) -> t { mk_t(cx, ty_ptr(tm)) }
mk_rptr			pub fn mk_rptr(cx: &ctxt, r: Region, tm: mt) -> t { mk_t(cx, ty_rptr(r, tm)) }
mk_section_iter			pub fn mk_section_iter(llof: ObjectFileRef) -> SectionIter 
mk_self			pub fn mk_self(cx: &ctxt, did: ast::DefId) -> t { mk_t(cx, ty_self(did)) }
mk_std			fn mk_std(cx: &TestCtxt) -> ast::ViewItem 
mk_str			pub fn mk_str(cx: &ctxt, t: vstore) -> t 
mk_struct			fn mk_struct(cx: &CrateContext, tys: &[ty::t], packed: bool) -> Struct 
mk_struct			pub fn mk_struct(cx: &ctxt, struct_id: ast::DefId, substs: substs) -> t 
mk_sub_trait_refs			pub fn mk_sub_trait_refs(cx: &InferCtxt,
mk_subr			    pub fn mk_subr(&self,
mk_subr			pub fn mk_subr(cx: &InferCtxt,
mk_subregion_due_to_dereference			pub fn mk_subregion_due_to_dereference(rcx: &mut Rcx,
mk_subty			    pub fn mk_subty(&self,
mk_subty			pub fn mk_subty(cx: &InferCtxt,
mk_t			pub fn mk_t(cx: &ctxt, st: sty) -> t 
mk_target_data			pub fn mk_target_data(string_rep: &str) -> TargetData 
mk_test_desc_and_fn_rec			fn mk_test_desc_and_fn_rec(cx: &TestCtxt, test: &Test) -> @ast::Expr 
mk_test_descs			fn mk_test_descs(cx: &TestCtxt) -> @ast::Expr 
mk_test_module			fn mk_test_module(cx: &TestCtxt) -> @ast::Item 
mk_tests			fn mk_tests(cx: &TestCtxt) -> @ast::Item 
mk_trait			pub fn mk_trait(cx: &ctxt,
mk_tup			pub fn mk_tup(cx: &ctxt, ts: Vec<t>) -> t { mk_t(cx, ty_tup(ts)) }
mk_u16			pub fn mk_u16() -> t { mk_prim_t(&primitives::TY_U16) }
mk_u32			pub fn mk_u32() -> t { mk_prim_t(&primitives::TY_U32) }
mk_u64			pub fn mk_u64() -> t { mk_prim_t(&primitives::TY_U64) }
mk_u8			pub fn mk_u8() -> t { mk_prim_t(&primitives::TY_U8) }
mk_uint			pub fn mk_uint() -> t { mk_prim_t(&primitives::TY_UINT) }
mk_unboxed_vec			pub fn mk_unboxed_vec(cx: &ctxt, tm: mt) -> t 
mk_uniq			pub fn mk_uniq(cx: &ctxt, ty: t) -> t { mk_t(cx, ty_uniq(ty)) }
mk_var			pub fn mk_var(cx: &ctxt, v: TyVid) -> t { mk_infer(cx, TyVar(v)) }
mk_vec			pub fn mk_vec(cx: &ctxt, tm: mt, t: vstore) -> t 
modify_for_testing			pub fn modify_for_testing(sess: &Session,
module			    fn module(&self) -> @Module 
module_to_str			    fn module_to_str(&mut self, module_: @Module) -> ~str 
monitor			pub fn monitor(f: proc:Send()) 
mono_data_classify			pub fn mono_data_classify(t: ty::t) -> MonoDataClass 
mono_id_			pub struct mono_id_ 
mono_param_id			pub enum mono_param_id 
monomorphic_fn			pub fn monomorphic_fn(ccx: &CrateContext,
monomorphize			pub mod monomorphize;
monomorphize_type			pub fn monomorphize_type(bcx: &Block, t: ty::t) -> ty::t 
move_data			pub mod move_data;
move_next_move			    fn move_next_move(&self, index: MoveIndex) -> MoveIndex 
move_path			    pub fn move_path(&self,
move_suggestion			        fn move_suggestion(tcx: &ty::ctxt, ty: ty::t, default_msg: &'static str)
moved_variable_node_id_from_def			pub fn moved_variable_node_id_from_def(def: Def) -> Option<NodeId> 
moves			    pub mod moves;
moves_by_default			    pub fn moves_by_default(&self, _: &ctxt) -> bool 
mt			pub struct mt 
mt_to_str			pub fn mt_to_str(cx: &ctxt, m: &mt) -> ~str 
mt_to_str_wrapped			pub fn mt_to_str_wrapped(cx: &ctxt, before: &str, m: &mt, after: &str) -> ~str 
mts			    fn mts(&self, a: &ty::mt, b: &ty::mt) -> cres<ty::mt>;
mts			    fn mts(&self, a: &ty::mt, b: &ty::mt) -> cres<ty::mt> 
mts			    fn mts(&self, a: &ty::mt, b: &ty::mt) -> cres<ty::mt> 
mts			    fn mts(&self, a: &ty::mt, b: &ty::mt) -> cres<ty::mt> 
mul			    pub fn mul(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
mut_bits_to_str			fn mut_bits_to_str(words: &mut [uint]) -> ~str 
mut_edge_data			    pub fn mut_edge_data<'a>(&'a mut self, idx: EdgeIndex) -> &'a mut E 
mut_node_data			    pub fn mut_node_data<'a>(&'a mut self, idx: NodeIndex) -> &'a mut N 
mut_to_keyword			    pub fn mut_to_keyword(&self, mutbl: ast::Mutability) -> &'static str 
mut_to_str			    pub fn mut_to_str(&self, mutbl: ast::Mutability) -> ~str 
mut_to_str			    pub fn mut_to_str(&mut self, mutbl: ast::Mutability) -> ~str 
mutability_allowed			              fn mutability_allowed(a_mutbl: ast::Mutability,
mutability_matches			        fn mutability_matches(self_mutbl: ast::Mutability,
mutability_to_str			pub fn mutability_to_str(m: ast::Mutability) -> ~str 
my_visit_expr			fn my_visit_expr(_e: &Expr) { }
my_visit_foreign_item			fn my_visit_foreign_item(ni: &ForeignItem,
my_visit_item			fn my_visit_item(i: &Item,
mywrite			fn mywrite(w: &mut MemWriter, fmt: &fmt::Arguments) 
name			struct name and we assume structs are declared like so:
named_struct			    pub fn named_struct(ccx: &CrateContext, name: &str) -> Type 
named_ty			pub enum named_ty { a_struct, an_enum }
namespace_error_to_str			fn namespace_error_to_str(ns: NamespaceError) -> &'static str 
namespace_for_item			fn namespace_for_item(cx: &CrateContext, def_id: ast::DefId) -> @NamespaceTreeNode 
ne			    fn ne(&self, other: &InferRegion) -> bool 
ne			    fn ne(&self, other: &intern_key) -> bool 
nearest_common_ancestor			    pub fn nearest_common_ancestor(&self,
need_invoke			pub fn need_invoke(bcx: &Block) -> bool 
needs_drop			    pub fn needs_drop(&self, _: &ctxt) -> bool 
needs_invoke			    fn needs_invoke(&self) -> bool 
needs_invoke			    fn needs_invoke(&self) -> bool;
neg			    pub fn neg(&self, v: ValueRef) -> ValueRef 
new			    pub fn new(hash: &str) -> Svh 
new			    pub fn new() -> Features 
new			    pub fn new() -> TypeNames 
new			    pub fn new(llmb: MemoryBufferRef) -> Option<ObjectFile> 
new			    pub fn new(sess: &'a Session) -> Loader<'a> 
new			    pub fn new(intr: Rc<IdentInterner>) -> CStore 
new			    pub fn new(sysroot: &'a Path,
new			    fn new(ar: ArchiveRO) -> Option<ArchiveMetadata> 
new			    pub fn new() -> MoveData 
new			    pub fn new(move_data: MoveData,
new			    pub fn new(tcx: &ty::ctxt,
new			    pub fn new(tcx: &'a ty::ctxt,
new			    fn new(tcx: &'a ty::ctxt,
new			    pub fn new() -> Graph<N,E> 
new			    pub fn new() -> LanguageItems 
new			    pub fn new(session: &'a Session) -> LanguageItemCollector<'a> 
new			    fn new(tcx: &'a ty::ctxt, method_map: typeck::MethodMap) -> ReachableContext<'a> 
new			    fn new(id: NodeId, is_public: bool) -> ImportResolution 
new			    fn new(kind: RibKind) -> Rib 
new			    fn new(module_path: Vec<Ident> ,
new			    fn new(parent_link: ParentLink,
new			    fn new(target_module: @Module, bindings: @NameBindings) -> Target 
new			    pub fn new(ccx: &'a CrateContext, name: ~str) -> StatRecorder<'a> 
new			    pub fn new(ccx: &'a CrateContext) -> Builder<'a> 
new			    fn new(kind: CleanupScopeKind<'a>) -> CleanupScope<'a> 
new			    pub fn new<'a>(
new			    pub fn new(name: &str,
new			    fn new(scope: DIScope, line: uint, col: uint) -> DebugLocation 
new			    pub fn new(llmod: ModuleRef) -> CrateDebugContext 
new			    pub fn new(ident: ast::Ident,
new			    fn new(tcx: &'a ty::ctxt,
new			    fn new(tcx: &'a ty::ctxt,
new			    pub fn new(binder_id: ast::NodeId) -> BindingRscope 
new			    pub fn new() -> super::DefIdSet 
new			    pub fn new() -> super::NodeSet 
new			    pub fn new<K: Hash<super::FnvState> + TotalEq, V>() -> super::FnvHashMap<K, V> 
new			    pub fn new<T>() -> super::DefIdMap<T> 
new			    pub fn new<T>() -> super::NodeMap<T> 
new			    fn new() -> FixedBuffer64 
new			    fn new(h: &[u32, ..8]) -> Engine256 
new			    fn new(h: &[u32, ..8]) -> Engine256State 
new			    pub fn new() -> Sha256 
new_ValsAndBindings			fn new_ValsAndBindings<V:Clone,T:Clone>() -> ValsAndBindings<V, T> 
new_block			    pub fn new_block(&'a self,
new_bound			    pub fn new_bound(&self, binder_id: ast::NodeId) -> Region 
new_fn_ctxt			pub fn new_fn_ctxt<'a>(ccx: &'a CrateContext,
new_id			    fn new_id(&self, old_id: ast::NodeId) -> ast::NodeId 
new_id			    fn new_id(&self, id: ast::NodeId) -> ast::NodeId 
new_id_block			    pub fn new_id_block(&'a self,
new_infer_ctxt			pub fn new_infer_ctxt<'a>(tcx: &'a ty::ctxt) -> InferCtxt<'a> 
new_int_alist			        fn new_int_alist<B>() -> alist<int, B> 
new_region_var			    pub fn new_region_var(&self, origin: RegionVariableOrigin) -> RegionVid 
new_skolemized			    pub fn new_skolemized(&self, br: ty::BoundRegion) -> Region 
new_span			    fn new_span(&self, span: Span) -> Span 
new_temp_block			    pub fn new_temp_block(&'a self,
next			fn next(st: &mut PState) -> char 
next			    fn next(&mut self) -> Option<Value> 
next			    fn next<'s>(&'s mut self, len: uint) -> &'s mut [u8] 
next			    fn next<'s>(&'s mut self, len: uint) -> &'s mut [u8];
next_adjacent			    pub fn next_adjacent(&self, edge: EdgeIndex, dir: Direction) -> EdgeIndex 
next_byte			fn next_byte(st: &mut PState) -> u8 
next_edge_index			    pub fn next_edge_index(&self) -> EdgeIndex 
next_float_var			    pub fn next_float_var(&self) -> ty::t 
next_float_var_id			    pub fn next_float_var_id(&self) -> FloatVid 
next_int_var			    pub fn next_int_var(&self) -> ty::t 
next_int_var_id			    pub fn next_int_var_id(&self) -> IntVid 
next_node_id			    pub fn next_node_id(&self) -> ast::NodeId 
next_node_index			    pub fn next_node_index(&self) -> NodeIndex 
next_region_var			    pub fn next_region_var(&self, origin: RegionVariableOrigin) -> ty::Region 
next_region_vars			    pub fn next_region_vars(&self,
next_simple_var			fn next_simple_var<V:Clone,T:Clone>(counter: &mut uint,
next_ty_var			    pub fn next_ty_var(&self) -> ty::t 
next_ty_var_id			    pub fn next_ty_var_id(&self) -> TyVid 
next_ty_vars			    pub fn next_ty_vars(&self, n: uint) -> Vec<ty::t> 
nil			    fn nil<'a>(bcx: &'a Block<'a>, ty: ty::t) -> DatumBlock<'a, Expr> 
nil			    pub fn nil(ccx: &CrateContext) -> Type 
no_landing_pads			    pub fn no_landing_pads(&self) -> bool 
no_params			pub fn no_params(t: ty::t) -> ty::ty_param_bounds_and_ty 
no_prelude			fn no_prelude(attrs: &[ast::Attribute]) -> bool 
no_verify			    pub fn no_verify(&self) -> bool { self.debugging_opt(NO_VERIFY) }
node			    pub fn node<'a>(&'a self, idx: NodeIndex) -> &'a Node<N> 
node_data			    pub fn node_data<'a>(&'a self, idx: NodeIndex) -> &'a N 
node_id			    pub fn node_id(&self) -> ast::NodeId 
node_id_has_type_params			fn node_id_has_type_params(cx: &ctxt, id: ast::NodeId) -> bool 
node_id_to_str			    pub fn node_id_to_str(&self, id: ast::NodeId) -> ~str 
node_id_to_trait_ref			pub fn node_id_to_trait_ref(cx: &ctxt, id: ast::NodeId) -> @ty::TraitRef 
node_id_to_type			pub fn node_id_to_type(cx: &ctxt, id: ast::NodeId) -> t 
node_id_to_type_opt			pub fn node_id_to_type_opt(cx: &ctxt, id: ast::NodeId) -> Option<t> 
node_id_to_type_params			pub fn node_id_to_type_params(cx: &ctxt, id: ast::NodeId) -> Vec<t> 
node_id_type			pub fn node_id_type(bcx: &Block, id: ast::NodeId) -> ty::t 
node_id_type_params			pub fn node_id_type_params(bcx: &Block, node: ExprOrMethodCall) -> Vec<ty::t> 
node_method_ty			    fn node_method_ty(&self, method_call: typeck::MethodCall) -> Option<ty::t> 
node_method_ty			    fn node_method_ty(&self, method_call: typeck::MethodCall) -> Option<ty::t>;
node_method_ty			    fn node_method_ty(&self, method_call: MethodCall) -> Option<ty::t> 
node_ty			    fn node_ty(&mut self, id: ast::NodeId) -> mc::McResult<ty::t> 
node_ty			    fn node_ty(&mut self, id: ast::NodeId) -> McResult<ty::t> 
node_ty			    fn node_ty(&mut self, id: ast::NodeId) -> McResult<ty::t>;
node_ty			    pub fn node_ty(&self, id: ast::NodeId) -> ty::t 
node_ty			    fn node_ty(&mut self, id: ast::NodeId) -> mc::McResult<ty::t> 
node_ty_substs			    pub fn node_ty_substs(&self, id: ast::NodeId) -> ty::substs 
node_vtables			pub fn node_vtables(bcx: &Block, id: typeck::MethodCall)
nodemap			    pub mod nodemap;
nodestr			    fn nodestr(&self, id: ast::NodeId) -> ~str 
nomain			        fn nomain(cx: &TestCtxt, item: @ast::Item) -> @ast::Item 
noname			pub fn noname() -> *c_char 
nonzero_llsize_of			pub fn nonzero_llsize_of(cx: &CrateContext, ty: Type) -> ValueRef 
noop			        fn noop(t: ty::t) -> ty::t { t }
normal_exit_block			    fn normal_exit_block(&'a self,
normalize_ty			pub fn normalize_ty(cx: &ctxt, t: t) -> t 
nospan			fn nospan<T>(t: T) -> codemap::Spanned<T> 
not			    pub fn not(&self, v: ValueRef) -> ValueRef 
not_win32			fn not_win32(os: abi::Os) -> bool 
note			    pub fn note(&self, msg: &str) 
note_and_explain_bckerr			    pub fn note_and_explain_bckerr(&self, err: BckError) 
note_and_explain_region			pub fn note_and_explain_region(cx: &ctxt,
note_and_explain_type_err			pub fn note_and_explain_type_err(cx: &ctxt, err: &type_err) 
note_crateid_attr			pub fn note_crateid_attr(diag: &SpanHandler, crateid: &CrateId) 
note_region_origin			    fn note_region_origin(&self, origin: SubregionOrigin) 
note_region_origin			    fn note_region_origin(&self,
note_unique_llvm_symbol			pub fn note_unique_llvm_symbol(ccx: &CrateContext, sym: ~str) 
nswadd			    pub fn nswadd(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
nswmul			    pub fn nswmul(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
nswneg			    pub fn nswneg(&self, v: ValueRef) -> ValueRef 
nswsub			    pub fn nswsub(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
nullable_bitdiscr			fn nullable_bitdiscr(bcx: &Block, nonnull: &Struct, nndiscr: Disr, ptrfield: uint,
num_args			pub fn num_args(r: &Repr, discr: Disr) -> uint 
num_inferred			    fn num_inferred(&self) -> uint 
num_to_str			        fn num_to_str(counter: uint) -> ~str 
num_vars			    pub fn num_vars(&self) -> uint 
nuwadd			    pub fn nuwadd(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
nuwmul			    pub fn nuwmul(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
nuwneg			    pub fn nuwneg(&self, v: ValueRef) -> ValueRef 
nuwsub			    pub fn nuwsub(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
object_contents			    fn object_contents(cx: &ctxt,
offset_cur_anon			    fn offset_cur_anon(&self) 
offsetof_gep			    pub fn offsetof_gep(&self,
oncenesses			    fn oncenesses(&self, a: Onceness, b: Onceness) -> cres<Onceness>;
oncenesses			    fn oncenesses(&self, a: Onceness, b: Onceness) -> cres<Onceness> 
oncenesses			    fn oncenesses(&self, a: Onceness, b: Onceness) -> cres<Onceness> 
oncenesses			    fn oncenesses(&self, a: Onceness, b: Onceness) -> cres<Onceness> 
opaque_trait			    pub fn opaque_trait(ccx: &CrateContext) -> Type 
opaque_vec			    pub fn opaque_vec(ccx: &CrateContext) -> Type 
opcat			    fn opcat(op: ast::BinOp) -> int 
open			    pub fn open(dst: &Path) -> Option<ArchiveRO> 
open			    pub fn open(sess: &'a Session, dst: Path) -> Archive<'a> 
ops			impl ops::BitAnd<TypeContents,TypeContents> for TypeContents 
ops			impl ops::BitOr<TypeContents,TypeContents> for TypeContents 
ops			impl ops::Sub<TypeContents,TypeContents> for TypeContents 
opt_ast_region_to_region			fn opt_ast_region_to_region<AC:AstConv,RS:RegionScope>(
opt_child			    fn opt_child(&self, tag: c::astencode_tag) -> Option<Self>;
opt_child			    fn opt_child(&self, tag: c::astencode_tag) -> Option<ebml::Doc<'a>> 
opt_deref_kind			pub fn opt_deref_kind(t: ty::t) -> Option<deref_kind> 
opt_encl_scope			    pub fn opt_encl_scope(&self, id: ast::NodeId) -> Option<ast::NodeId> 
opt_eq			fn opt_eq(tcx: &ty::ctxt, a: &Opt, b: &Opt) -> bool 
opt_expr			    fn opt_expr(&mut self,
opt_loan_path			pub fn opt_loan_path(cmt: mc::cmt) -> Option<@LoanPath> 
opt_node_ty_substs			    pub fn opt_node_ty_substs(&self,
opt_overlap			fn opt_overlap(tcx: &ty::ctxt, a: &Opt, b: &Opt) -> bool 
opt_result			pub enum opt_result<'a> 
optgroups			pub fn optgroups() -> Vec<getopts::OptGroup> 
or			                                    struct or enum variant",
or			    fn or(self, other: LastPrivate) -> LastPrivate 
or			    pub fn or(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
out_arg_pos			    pub fn out_arg_pos(&self) -> uint 
output_bits			    fn output_bits(&self) -> uint { 256 }
output_bits			    fn output_bits(&self) -> uint;
output_lib_filename			pub fn output_lib_filename(id: &CrateId) -> ~str 
owned_pointer			    pub fn owned_pointer(&self) -> TypeContents 
owns_managed			    pub fn owns_managed(&self) -> bool 
owns_owned			    pub fn owns_owned(&self) -> bool 
p2i			pub fn p2i(ccx: &CrateContext, v: ValueRef) -> ValueRef 
padded			    fn padded(max: uint, s: &str) -> ~str 
padding			fn padding(ccx: &CrateContext, size: u64) -> ValueRef 
padding_ty			fn padding_ty(ccx: &CrateContext, align: uint, offset: uint) -> Option<Type> 
param			    fn param(ccx: &CrateCtxt, n: uint) -> ty::t 
param_index			pub enum param_index 
param_substs			impl param_substs 
param_substs			pub struct param_substs 
param_substs_to_str			fn param_substs_to_str(this: &param_substs, tcx: &ty::ctxt) -> ~str 
param_ty			pub struct param_ty 
param_tys_in_type			pub fn param_tys_in_type(ty: t) -> Vec<param_ty> 
parameterized			pub fn parameterized(cx: &ctxt,
parse_abi_set			fn parse_abi_set(st: &mut PState) -> AbiSet 
parse_bare_fn_ty			fn parse_bare_fn_ty(st: &mut PState, conv: conv_did) -> ty::BareFnTy 
parse_bare_fn_ty_data			pub fn parse_bare_fn_ty_data(data: &[u8], crate_num: ast::CrateNum, pos: uint, tcx: &ty::ctxt,
parse_bool			        fn parse_bool(slot: &mut bool, v: Option<&str>) -> bool 
parse_bound_region			fn parse_bound_region(st: &mut PState, conv: conv_did) -> ty::BoundRegion 
parse_bounds			fn parse_bounds(st: &mut PState, conv: conv_did) -> ty::ParamBounds 
parse_cfgspecs			fn parse_cfgspecs(cfgspecs: Vec<~str> )
parse_closure_ty			fn parse_closure_ty(st: &mut PState, conv: conv_did) -> ty::ClosureTy 
parse_crate_attrs			fn parse_crate_attrs(sess: &session::Session, input: &d::Input) ->
parse_def			fn parse_def(st: &mut PState, source: DefIdSource,
parse_def_id			pub fn parse_def_id(buf: &[u8]) -> ast::DefId 
parse_hex			fn parse_hex(st: &mut PState) -> uint 
parse_ident			pub fn parse_ident(st: &mut PState, last: char) -> ast::Ident 
parse_ident_			fn parse_ident_(st: &mut PState, is_last: |char| -> bool) -> ast::Ident 
parse_list			        fn parse_list(slot: &mut Vec<~str>, v: Option<&str>)
parse_mt			fn parse_mt(st: &mut PState, conv: conv_did) -> ty::mt 
parse_mutability			fn parse_mutability(st: &mut PState) -> ast::Mutability 
parse_onceness			fn parse_onceness(c: char) -> ast::Onceness 
parse_opt			fn parse_opt<T>(st: &mut PState, f: |&mut PState| -> T) -> Option<T> 
parse_opt_string			        fn parse_opt_string(slot: &mut Option<~str>, v: Option<&str>) -> bool 
parse_pretty			pub fn parse_pretty(sess: &Session, name: &str) -> PpMode 
parse_purity			fn parse_purity(c: char) -> Purity 
parse_region			fn parse_region(st: &mut PState, conv: conv_did) -> ty::Region 
parse_region_substs			fn parse_region_substs(st: &mut PState, conv: conv_did) -> ty::RegionSubsts 
parse_sess			    fn parse_sess<'a>(&'a self) -> &'a parse::ParseSess { self }
parse_sess			    fn parse_sess<'a>(&'a self) -> &'a parse::ParseSess;
parse_sig			fn parse_sig(st: &mut PState, conv: conv_did) -> ty::FnSig 
parse_sigil			fn parse_sigil(st: &mut PState) -> ast::Sigil 
parse_state_from_data			pub fn parse_state_from_data<'a>(data: &'a [u8], crate_num: ast::CrateNum,
parse_str			fn parse_str(st: &mut PState, term: char) -> ~str 
parse_string			        fn parse_string(slot: &mut ~str, v: Option<&str>) -> bool 
parse_substs			fn parse_substs(st: &mut PState, conv: conv_did) -> ty::substs 
parse_substs_data			pub fn parse_substs_data(data: &[u8], crate_num: ast::CrateNum, pos: uint, tcx: &ty::ctxt,
parse_trait_ref			fn parse_trait_ref(st: &mut PState, conv: conv_did) -> ty::TraitRef 
parse_trait_ref_data			pub fn parse_trait_ref_data(data: &[u8], crate_num: ast::CrateNum, pos: uint, tcx: &ty::ctxt,
parse_trait_store			fn parse_trait_store(st: &mut PState, conv: conv_did) -> ty::TraitStore 
parse_ty			fn parse_ty(st: &mut PState, conv: conv_did) -> ty::t 
parse_ty_data			pub fn parse_ty_data(data: &[u8], crate_num: ast::CrateNum, pos: uint, tcx: &ty::ctxt,
parse_type_param_def			fn parse_type_param_def(st: &mut PState, conv: conv_did) -> ty::TypeParameterDef 
parse_type_param_def_data			pub fn parse_type_param_def_data(data: &[u8], start: uint,
parse_uint			fn parse_uint(st: &mut PState) -> uint 
parse_vstore			fn parse_vstore(st: &mut PState, conv: conv_did) -> ty::vstore 
pass_manager_res			pub fn pass_manager_res(pm: PassManagerRef) -> pass_manager_res 
pass_manager_res			pub struct pass_manager_res 
pat			    fn pat(&mut self, pat: @ast::Pat, pred: CFGIndex) -> CFGIndex 
pat_binding_ids			pub fn pat_binding_ids(dm: resolve::DefMap, pat: &Pat) -> Vec<NodeId> 
pat_bindings			    fn pat_bindings(&mut self,
pat_bindings			pub fn pat_bindings(dm: resolve::DefMap,
pat_contains_bindings			pub fn pat_contains_bindings(dm: resolve::DefMap, pat: &Pat) -> bool 
pat_ctor_id			fn pat_ctor_id(cx: &MatchCheckCtxt, p: @Pat) -> Option<ctor> 
pat_ctxt			pub struct pat_ctxt<'a> 
pat_id_map			pub fn pat_id_map(dm: resolve::DefMap, pat: &Pat) -> PatIdMap 
pat_is_binding			    pub fn pat_is_binding(&self, pat: &ast::Pat) -> bool 
pat_is_binding			pub fn pat_is_binding(dm: resolve::DefMap, pat: &Pat) -> bool 
pat_is_binding_or_wild			pub fn pat_is_binding_or_wild(dm: resolve::DefMap, pat: &Pat) -> bool 
pat_is_const			pub fn pat_is_const(dm: resolve::DefMap, pat: &Pat) -> bool 
pat_is_variant_or_struct			pub fn pat_is_variant_or_struct(dm: resolve::DefMap, pat: &Pat) -> bool 
pat_to_str			    pub fn pat_to_str(&self, pat: &ast::Pat) -> ~str 
pat_ty			    fn pat_ty(&mut self, pat: @ast::Pat) -> McResult<ty::t> 
pat_ty			pub fn pat_ty(cx: &ctxt, pat: &ast::Pat) -> t 
pat_util			    pub mod pat_util;
path			    pub fn path(&self, flavor: link::OutputType) -> Path 
path_first_child			    fn path_first_child(&self, index: MovePathIndex) -> MovePathIndex 
path_first_move			    fn path_first_move(&self, index: MovePathIndex) -> MoveIndex 
path_idents_to_str			    fn path_idents_to_str(&mut self, path: &Path) -> ~str 
path_is_private_type			    fn path_is_private_type(&self, path_id: ast::NodeId) -> bool 
path_loan_path			    fn path_loan_path(&self, index: MovePathIndex) -> @LoanPath 
path_next_sibling			    fn path_next_sibling(&self, index: MovePathIndex) -> MovePathIndex 
path_node			fn path_node(ids: Vec<ast::Ident> ) -> ast::Path 
path_node_global			fn path_node_global(ids: Vec<ast::Ident> ) -> ast::Path 
path_parent			    fn path_parent(&self, index: MovePathIndex) -> MovePathIndex 
pats_all			    fn pats_all<I: Iterator<@ast::Pat>>(&mut self,
pats_any			    fn pats_any(&mut self,
pats_require_rooting			fn pats_require_rooting(bcx: &Block, m: &[Match], col: uint) -> bool 
peek			fn peek(st: &PState) -> char 
phase_1_parse_input			pub fn phase_1_parse_input(sess: &Session, cfg: ast::CrateConfig, input: &Input)
phase_2_configure_and_expand			pub fn phase_2_configure_and_expand(sess: &Session,
phase_3_run_analysis_passes			pub fn phase_3_run_analysis_passes(sess: Session,
phase_4_translate_to_llvm			pub fn phase_4_translate_to_llvm(krate: ast::Crate,
phase_5_run_llvm_passes			pub fn phase_5_run_llvm_passes(sess: &Session,
phase_6_link_output			pub fn phase_6_link_output(sess: &Session,
phi			    pub fn phi(&self, ty: Type, vals: &[ValueRef], bbs: &[BasicBlockRef]) -> ValueRef 
pick_col			fn pick_col(m: &[Match]) -> uint 
pluralize			pub fn pluralize(n: uint, s: ~str) -> ~str 
pointer_add_byte			pub fn pointer_add_byte(bcx: &Block, ptr: ValueRef, bytes: ValueRef) -> ValueRef 
pointer_type_metadata			fn pointer_type_metadata(cx: &CrateContext,
pointercast			    pub fn pointercast(&self, val: ValueRef, dest_ty: Type) -> ValueRef 
polytypes_unify			    fn polytypes_unify(&self,
pop_and_trans_ast_cleanup_scope			    fn pop_and_trans_ast_cleanup_scope(&self,
pop_and_trans_custom_cleanup_scope			    fn pop_and_trans_custom_cleanup_scope(&self,
pop_custom_cleanup_scope			    fn pop_custom_cleanup_scope(&self,
pop_loop_cleanup_scope			    fn pop_loop_cleanup_scope(&self,
pop_repeating_id			    pub fn pop_repeating_id(&mut self, id: ast::NodeId) 
pop_scope			    fn pop_scope(&self) -> CleanupScope<'a> 
pop_scope			    fn pop_scope(&self) -> CleanupScope<'a>;
pop_scopes			    fn pop_scopes(&mut self,
populate_destructor_table			    fn populate_destructor_table(&self) 
populate_external_module			    fn populate_external_module(&mut self, module: @Module) 
populate_implementations_for_trait_if_necessary			pub fn populate_implementations_for_trait_if_necessary(
populate_implementations_for_type_if_necessary			pub fn populate_implementations_for_type_if_necessary(tcx: &ctxt,
populate_llvm_passes			    unsafe fn populate_llvm_passes(fpm: lib::llvm::PassManagerRef,
populate_module_if_necessary			    fn populate_module_if_necessary(&mut self, module: @Module) 
populate_scope_map			fn populate_scope_map(cx: &CrateContext,
position			    fn position(&self) -> uint { self.buffer_idx }
position			    fn position(&self) -> uint;
position_at_end			    pub fn position_at_end(&self, llbb: BasicBlockRef) 
position_before			    pub fn position_before(&self, insn: ValueRef) 
post			    fn post(&self,
post_store			    fn post_store<'a>(&self,
ppaux			    pub mod ppaux;
pprust			impl pprust::PpAnn for IdentifiedAnnotation 
pprust			impl pprust::PpAnn for TypedAnnotation 
pre			    fn pre(&self,
pre			    fn pre(&self,
pred_iter			    pub fn pred_iter(self) -> Preds 
prepare_enum_metadata			fn prepare_enum_metadata(cx: &CrateContext,
prepare_struct_metadata			fn prepare_struct_metadata(cx: &CrateContext,
prepare_tuple_metadata			fn prepare_tuple_metadata(cx: &CrateContext,
pretty_print_input			pub fn pretty_print_input(sess: Session,
pretty_print_to			    fn pretty_print_to(&self, wr: ~io::Writer,
primary_libdir_name			    fn primary_libdir_name() -> ~str { ~"lib32" }
primary_libdir_name			    fn primary_libdir_name() -> ~str { ~"lib64" }
primitives			mod primitives 
print_llvm_passes			    pub fn print_llvm_passes(&self) -> bool 
privacy			    pub mod privacy;
private_accessible			    fn private_accessible(&self, id: ast::NodeId) -> bool 
probe			    pub fn probe<T,E>(&self, f: || -> Result<T,E>) -> Result<T,E> 
process_block			    fn process_block(&mut self, data: &[u8]) 
process_crate			pub fn process_crate(krate: &ast::Crate,
process_edges			        fn process_edges(this: &RegionVarBindings,
process_errors			    fn process_errors(&self, errors: &Vec<RegionResolutionError>)
propagate			    pub fn propagate(&mut self, blk: &ast::Block) 
propagate			    fn propagate(&mut self) 
propagate_node			    fn propagate_node(&mut self, node: &ast_map::Node,
propagate_through_block			    fn propagate_through_block(&mut self, blk: &Block, succ: LiveNode)
propagate_through_decl			    fn propagate_through_decl(&mut self, decl: &Decl, succ: LiveNode)
propagate_through_expr			    fn propagate_through_expr(&mut self, expr: &Expr, succ: LiveNode)
propagate_through_exprs			    fn propagate_through_exprs(&mut self, exprs: &[@Expr], succ: LiveNode)
propagate_through_fn_block			    fn propagate_through_fn_block(&mut self, _: &FnDecl, blk: &Block)
propagate_through_local			    fn propagate_through_local(&mut self, local: &Local, succ: LiveNode)
propagate_through_loop			    fn propagate_through_loop(&mut self,
propagate_through_lvalue_components			    fn propagate_through_lvalue_components(&mut self,
propagate_through_opt_expr			    fn propagate_through_opt_expr(&mut self,
propagate_through_stmt			    fn propagate_through_stmt(&mut self, stmt: &Stmt, succ: LiveNode)
propagate_upupvar_borrow_kind			    fn propagate_upupvar_borrow_kind(rcx: &mut Rcx,
provided_source			pub fn provided_source(cx: &ctxt, id: ast::DefId) -> Option<ast::DefId> 
provided_trait_methods			pub fn provided_trait_methods(cx: &ctxt, id: ast::DefId) -> Vec<@Method> 
ptr			    pub fn ptr(ty: Type) -> Type 
ptr_sigil			pub fn ptr_sigil(ptr: PointerKind) -> &'static str 
ptr_to			    pub fn ptr_to(&self) -> Type 
ptrdiff			    pub fn ptrdiff(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
ptrtoint			    pub fn ptrtoint(&self, val: ValueRef, dest_ty: Type) -> ValueRef 
purities			    fn purities(&self, a: Purity, b: Purity) -> cres<Purity>;
purities			    fn purities(&self, a: Purity, b: Purity) -> cres<Purity> 
purities			    fn purities(&self, a: Purity, b: Purity) -> cres<Purity> 
purities			    fn purities(&self, a: Purity, b: Purity) -> cres<Purity> 
purity_fn_family			fn purity_fn_family(p: Purity) -> char 
purity_static_method_family			fn purity_static_method_family(p: Purity) -> char 
push			    fn push(n: &mut ~str, s: &str) 
push			    pub fn push(&mut self, other: BoundRegion) 
push_ast_cleanup_scope			    fn push_ast_cleanup_scope(&self, id: ast::NodeId) 
push_ast_cleanup_scope			    fn push_ast_cleanup_scope(&self, id: ast::NodeId);
push_bound_candidates			    fn push_bound_candidates(&mut self, self_ty: ty::t, restrict_to: Option<DefId>) 
push_candidates_from_impl			    fn push_candidates_from_impl(&mut self,
push_ctxt			pub fn push_ctxt(s: &'static str) -> _InsnCtxt 
push_custom_cleanup_scope			    fn push_custom_cleanup_scope(&self) -> CustomScopeIndex 
push_custom_cleanup_scope			    fn push_custom_cleanup_scope(&self) -> CustomScopeIndex;
push_extension_candidate			    fn push_extension_candidate(&mut self, trait_did: DefId) 
push_extension_candidates			    fn push_extension_candidates(&mut self, expr_id: ast::NodeId) 
push_fn_scope			        fn push_fn_scope(this: &mut LifetimeContext,
push_inherent_candidates			    fn push_inherent_candidates(&mut self, self_ty: ty::t) 
push_inherent_candidates_from_bounds			    fn push_inherent_candidates_from_bounds(&mut self,
push_inherent_candidates_from_bounds_inner			    fn push_inherent_candidates_from_bounds_inner(&mut self,
push_inherent_candidates_from_object			    fn push_inherent_candidates_from_object(&mut self,
push_inherent_candidates_from_param			    fn push_inherent_candidates_from_param(&mut self,
push_inherent_candidates_from_self			    fn push_inherent_candidates_from_self(&mut self,
push_inherent_impl_candidates_for_type			    fn push_inherent_impl_candidates_for_type(&mut self, did: DefId) 
push_loop_cleanup_scope			    fn push_loop_cleanup_scope(&self,
push_region_params			        fn push_region_params(mut accum: Vec<ty::Region>,
push_repeating_id			    pub fn push_repeating_id(&mut self, id: ast::NodeId) 
push_scope			    fn push_scope(&self, scope: CleanupScope<'a>) 
push_scope			    fn push_scope(&self, scope: CleanupScope<'a>);
push_sig_to_str			    fn push_sig_to_str(cx: &ctxt,
range_to_inttype			fn range_to_inttype(cx: &CrateContext, hint: Hint, bounds: &IntBounds) -> IntType 
raw_block			pub fn raw_block<'a>(
raw_pat			fn raw_pat(p: @Pat) -> @Pat 
rcvr_matches_object			        fn rcvr_matches_object(self_did: ast::DefId,
rcvr_matches_ty			        fn rcvr_matches_ty(fcx: &FnCtxt,
reachable			    pub mod reachable;
read			    pub fn read(&self, file: &str) -> Vec<u8> 
read			    pub fn read<'a>(&'a self, file: &str) -> Option<&'a [u8]> 
read_auto_adjustment			    fn read_auto_adjustment(&mut self, xcx: &ExtendedDecodeContext) -> ty::AutoAdjustment 
read_auto_adjustment			    fn read_auto_adjustment(&mut self, xcx: &ExtendedDecodeContext) -> ty::AutoAdjustment;
read_capture_var			    fn read_capture_var(&mut self, xcx: &ExtendedDecodeContext)
read_crates			pub fn read_crates(sess: &Session,
read_def_id			    fn read_def_id(&mut self, xcx: &ExtendedDecodeContext) -> ast::DefId 
read_def_id			    fn read_def_id(&mut self, xcx: &ExtendedDecodeContext) -> ast::DefId;
read_def_id_noxcx			    fn read_def_id_noxcx(&mut self,
read_freevar_entry			    fn read_freevar_entry(&mut self, xcx: &ExtendedDecodeContext)
read_meta_section_name			pub fn read_meta_section_name(os: Os) -> &'static str 
read_method_callee			    fn read_method_callee(&mut self, xcx: &ExtendedDecodeContext) -> (u32, MethodCallee) 
read_method_callee			    fn read_method_callee(&mut self, xcx: &ExtendedDecodeContext) -> (u32, MethodCallee);
read_method_callee_helper			trait read_method_callee_helper 
read_substs			    fn read_substs(&mut self, xcx: &ExtendedDecodeContext) -> ty::substs 
read_substs			    fn read_substs(&mut self, xcx: &ExtendedDecodeContext) -> ty::substs;
read_ty			    fn read_ty(&mut self, xcx: &ExtendedDecodeContext) -> ty::t 
read_ty			    fn read_ty(&mut self, xcx: &ExtendedDecodeContext) -> ty::t;
read_ty_noxcx			    fn read_ty_noxcx(&mut self,
read_ty_param_bounds_and_ty			    fn read_ty_param_bounds_and_ty(&mut self, xcx: &ExtendedDecodeContext)
read_type_param_def			    fn read_type_param_def(&mut self, xcx: &ExtendedDecodeContext)
read_tys			    fn read_tys(&mut self, xcx: &ExtendedDecodeContext) -> Vec<ty::t> 
read_tys			    fn read_tys(&mut self, xcx: &ExtendedDecodeContext) -> Vec<ty::t>;
read_tys_noxcx			    fn read_tys_noxcx(&mut self,
read_u32v_be			fn read_u32v_be(dst: &mut[u32], input: &[u8]) 
read_vtable_origin			    fn read_vtable_origin(&mut self,
read_vtable_param_res			    fn read_vtable_param_res(&mut self,
read_vtable_res			    fn read_vtable_res(&mut self,
read_vtable_res_with_key			    fn read_vtable_res_with_key(&mut self,
realpath			fn realpath(p: &Path) -> Path 
rebuild			    fn rebuild(&self) -> (Vec<ast::Arg>, ast::P<ast::Ty>, ast::Generics) 
rebuild_arg_ty_or_output			    fn rebuild_arg_ty_or_output(&self,
rebuild_args_ty			    fn rebuild_args_ty(&self,
rebuild_generics			    fn rebuild_generics(&self,
rebuild_path			    fn rebuild_path(&self,
rebuild_ty			    fn rebuild_ty(&self,
record_candidate_traits_for_expr_if_necessary			    fn record_candidate_traits_for_expr_if_necessary(&mut self, expr: &Expr) 
record_def			    fn record_def(&mut self, node_id: NodeId, (def, lp): (Def, LastPrivate)) 
record_encl_scope			    pub fn record_encl_scope(&self, sub: ast::NodeId, sup: ast::NodeId) 
record_exports			    fn record_exports(&mut self) 
record_exports_for_module			    fn record_exports_for_module(&mut self, module_: @Module) 
record_exports_for_module_subtree			    fn record_exports_for_module_subtree(&mut self,
record_rvalue_scope			    fn record_rvalue_scope<'a>(visitor: &mut RegionResolutionVisitor,
record_rvalue_scope			    pub fn record_rvalue_scope(&self, var: ast::NodeId, lifetime: ast::NodeId) 
record_rvalue_scope_if_borrow_expr			    fn record_rvalue_scope_if_borrow_expr(visitor: &mut RegionResolutionVisitor,
record_superlifetime			fn record_superlifetime(visitor: &mut RegionResolutionVisitor,
record_trait_implementation			fn record_trait_implementation(tcx: &ctxt,
record_var_lifetime			fn record_var_lifetime(visitor: &mut RegionResolutionVisitor,
record_var_scope			    pub fn record_var_scope(&self, var: ast::NodeId, lifetime: ast::NodeId) 
recurse			    pub fn recurse(&mut self, blk: &ast::Block) -> PurityState 
reference			    pub fn reference(&self, bits: TypeContents) -> TypeContents 
reflect			pub mod reflect;
region			    pub mod region;
region_inference			pub mod region_inference;
region_of_def			fn region_of_def(fcx: &FnCtxt, def: ast::Def) -> ty::Region 
region_param_defs			    pub fn region_param_defs<'a>(&'a self) -> &'a [RegionParameterDef] 
region_ptr_to_str			pub fn region_ptr_to_str(cx: &ctxt, region: Region) -> ~str 
region_to_str			    pub fn region_to_str(&self, r: ty::Region) -> ~str 
region_to_str			pub fn region_to_str(cx: &ctxt, prefix: &str, space: bool, region: Region) -> ~str 
region_vars_for_defs			    pub fn region_vars_for_defs(&self,
regionck			pub mod regionck;
regionck_expr			pub fn regionck_expr(fcx: &FnCtxt, e: &ast::Expr) 
regionck_fn			pub fn regionck_fn(fcx: &FnCtxt, blk: &ast::Block) 
regionmanip			pub mod regionmanip;
regions			    pub fn regions(tcx: &'a ty::ctxt, fld_r: 'a |ty::Region| -> ty::Region)
regions			    fn regions(&self, a: ty::Region, b: ty::Region) -> cres<ty::Region>;
regions			    fn regions(&self, a: ty::Region, b: ty::Region) -> cres<ty::Region> 
regions			    fn regions(&self, a: ty::Region, b: ty::Region) -> cres<ty::Region> 
regions			    fn regions(&self, a: ty::Region, b: ty::Region) -> cres<ty::Region> 
register_fn			fn register_fn(ccx: &CrateContext,
register_fn_llvmty			pub fn register_fn_llvmty(ccx: &CrateContext,
register_foreign_item_fn			pub fn register_foreign_item_fn(ccx: &CrateContext, abis: AbiSet,
register_method			fn register_method(ccx: &CrateContext, id: ast::NodeId,
register_rust_fn_with_foreign_abi			pub fn register_rust_fn_with_foreign_abi(ccx: &CrateContext,
register_static			pub fn register_static(ccx: &CrateContext,
relate			        fn relate(&mut self, r_sub: ty::Region) 
relate_free_regions			    pub fn relate_free_regions(&self, sub: FreeRegion, sup: FreeRegion) 
relate_free_regions			pub fn relate_free_regions(tcx: &ty::ctxt, fn_sig: &ty::FnSig) 
relate_nested_regions			pub fn relate_nested_regions(tcx: &ty::ctxt,
relate_region_params			        fn relate_region_params<C:Combine>(this: &C,
relate_trait_refs			fn relate_trait_refs(vcx: &VtableContext,
relative_target_lib_path			pub fn relative_target_lib_path(sysroot: &Path, target_triple: &str) -> Path 
remaining			    fn remaining(&self) -> uint { 64 - self.buffer_idx }
remaining			    fn remaining(&self) -> uint;
remove			fn remove(sess: &Session, path: &Path) 
remove_file			    pub fn remove_file(&mut self, file: &str) 
renumber_and_map_ast			fn renumber_and_map_ast(xcx: &ExtendedDecodeContext,
replace_closure_return_type			pub fn replace_closure_return_type(tcx: &ctxt, fn_type: t, ret_type: t) -> t 
replace_fn_sig			pub fn replace_fn_sig(cx: &ctxt, fsty: &sty, new_sig: FnSig) -> t 
replace_late_bound_regions_in_fn_sig			pub fn replace_late_bound_regions_in_fn_sig(
replace_late_bound_regions_with_fresh_regions			    pub fn replace_late_bound_regions_with_fresh_regions(&self,
report			    pub fn report(&self, err: BckError) 
report_aliasability_violation			    pub fn report_aliasability_violation(&self,
report_and_explain_type_error			    fn report_and_explain_type_error(&self,
report_candidate			    fn report_candidate(&self, idx: uint, origin: &MethodOrigin) 
report_concrete_failure			    fn report_concrete_failure(&self,
report_error			    fn report_error(&self, code: bckerr_code) 
report_error			    fn report_error(&self, span: Span, result: Option<~str>) -> bool 
report_error			    fn report_error(&self, result: CheckResult) -> bool 
report_error_if_loan_conflicts_with_restriction			    pub fn report_error_if_loan_conflicts_with_restriction(&self,
report_error_if_loans_conflict			    pub fn report_error_if_loans_conflict(&self,
report_illegal_mutation			    pub fn report_illegal_mutation(&self,
report_inference_failure			    fn report_inference_failure(&self,
report_mismatched_return_types			    pub fn report_mismatched_return_types(&self,
report_mismatched_types			    pub fn report_mismatched_types(&self,
report_mismatched_types			    pub fn report_mismatched_types(&self,
report_param_candidate			    fn report_param_candidate(&self, idx: uint, did: DefId) 
report_processed_errors			    fn report_processed_errors(&self,
report_reassigned_immutable_variable			    pub fn report_reassigned_immutable_variable(&self,
report_region_errors			    fn report_region_errors(&self,
report_static_candidate			    fn report_static_candidate(&self, idx: uint, did: DefId) 
report_sub_sup_conflict			    fn report_sub_sup_conflict(&self,
report_sup_sup_conflict			    fn report_sup_sup_conflict(&self,
report_trait_candidate			    fn report_trait_candidate(&self, idx: uint, did: DefId) 
report_type_error			    fn report_type_error(&self, trace: TypeTrace, terr: &ty::type_err) 
report_type_error			    fn report_type_error(&self, trace: TypeTrace, terr: &ty::type_err);
report_unresolved_imports			    fn report_unresolved_imports(&mut self, module_: @Module) 
report_use_of_moved_value			    pub fn report_use_of_moved_value(&self,
repr			    fn repr(&self, _tcx: &ty::ctxt) -> ~str 
repr			    fn repr(&self, tcx: &ty::ctxt) -> ~str 
repr			    fn repr(&self, _tcx: &ty::ctxt) -> ~str 
repr			    fn repr(&self, tcx: &ty::ctxt) -> ~str 
repr			    fn repr(&self, tcx: &ty::ctxt) -> ~str 
repr			    fn repr(&self, tcx: &ty::ctxt) -> ~str 
repr			    fn repr(&self, tcx: &ty::ctxt) -> ~str 
repr			    fn repr(&self, tcx: &ty::ctxt) -> ~str 
repr			    fn repr(&self, tcx: &ty::ctxt) -> ~str 
repr			    fn repr(&self, tcx: &ty::ctxt) -> ~str 
repr			    fn repr(&self, _: &ctxt) -> ~str 
repr			    fn repr(&self, _tcx: &ctxt) -> ~str 
repr			    fn repr(&self, tcx: &ctxt) -> ~str 
repr			    fn repr(&self, tcx: &ctxt) -> ~str;
repr_vec			fn repr_vec<T:Repr>(tcx: &ctxt, v: &[T]) -> ~str 
represent_node			pub fn represent_node(bcx: &Block, node: ast::NodeId) -> @Repr 
represent_type			pub fn represent_type(cx: &CrateContext, t: ty::t) -> @Repr 
represent_type_uncached			fn represent_type_uncached(cx: &CrateContext, t: ty::t) -> Repr 
require			    pub fn require(&self, it: LangItem) -> Result<ast::DefId, ~str> 
require_alloc_fn			    fn require_alloc_fn(bcx: &Block, t: ty::t, it: LangItem) -> ast::DefId 
require_integral			pub fn require_integral(fcx: &FnCtxt, sp: Span, t: ty::t) 
require_loop			    fn require_loop(&self, name: &str, cx: Context, span: Span) 
require_same_types			pub fn require_same_types(tcx: &ty::ctxt,
require_unsafe			    fn require_unsafe(&mut self, span: Span, description: &str) 
reserve_id_range			fn reserve_id_range(sess: &Session,
reserve_node_ids			    pub fn reserve_node_ids(&self, count: ast::NodeId) -> ast::NodeId 
reset			    pub fn reset(&self) 
reset			    fn reset(&mut self, bits: &mut [uint]) 
reset			    fn reset(&mut self) 
reset			    fn reset(&mut self);
reset			    fn reset(&mut self, h: &[u32, ..8]) 
reset_candidates			    fn reset_candidates(&mut self) 
resolve			    pub mod resolve;
resolve			    fn resolve(&mut self, krate: &ast::Crate) 
resolve			    fn resolve(&self, infcx: &InferCtxt) -> @ty::TraitRef 
resolve			    fn resolve(&self, infcx: &InferCtxt) -> Self;
resolve			    fn resolve(&self, infcx: &InferCtxt) -> ty::t 
resolve			pub mod resolve;
resolve_arm			fn resolve_arm(visitor: &mut RegionResolutionVisitor,
resolve_arm			    fn resolve_arm(&mut self, arm: &Arm) 
resolve_bare_identifier_pattern			    fn resolve_bare_identifier_pattern(&mut self, name: Ident)
resolve_block			fn resolve_block(visitor: &mut RegionResolutionVisitor,
resolve_block			    fn resolve_block(&mut self, block: &Block) 
resolve_crate			fn resolve_crate(e: &mut Env,
resolve_crate			pub fn resolve_crate(sess: &Session, krate: &ast::Crate) -> RegionMaps 
resolve_crate			    fn resolve_crate(&mut self, krate: &ast::Crate) 
resolve_crate			pub fn resolve_crate(session: &Session,
resolve_crate_deps			fn resolve_crate_deps(e: &mut Env,
resolve_crate_relative_path			    fn resolve_crate_relative_path(&mut self,
resolve_default_method_vtables			fn resolve_default_method_vtables(bcx: &Block,
resolve_definition_of_name_in_module			    fn resolve_definition_of_name_in_module(&mut self,
resolve_error			    fn resolve_error(&mut self, span: Span, s: &str) 
resolve_expr			fn resolve_expr(visitor: &mut RegionResolutionVisitor,
resolve_expr			    fn resolve_expr(&mut self, expr: &Expr) 
resolve_expr			pub fn resolve_expr(tcx: &ctxt, expr: &ast::Expr) -> ast::Def 
resolve_expr_type_adjusted			    pub fn resolve_expr_type_adjusted(&mut self, expr: &ast::Expr) -> ty::t 
resolve_float_var			    pub fn resolve_float_var(&mut self, vid: FloatVid) -> ty::t 
resolve_fn			fn resolve_fn(visitor: &mut RegionResolutionVisitor,
resolve_free_lifetime_ref			    fn resolve_free_lifetime_ref(&mut self,
resolve_function			    fn resolve_function(&mut self,
resolve_glob_import			    fn resolve_glob_import(&mut self,
resolve_identifier			    fn resolve_identifier(&mut self,
resolve_identifier_in_local_ribs			    fn resolve_identifier_in_local_ribs(&mut self,
resolve_impl			pub fn resolve_impl(tcx: &ty::ctxt,
resolve_implementation			    fn resolve_implementation(&mut self,
resolve_import_for_module			    fn resolve_import_for_module(&mut self,
resolve_imports			    fn resolve_imports(&mut self) 
resolve_imports_for_module			    fn resolve_imports_for_module(&mut self, module: @Module) 
resolve_imports_for_module_subtree			    fn resolve_imports_for_module_subtree(&mut self,
resolve_in_block			pub fn resolve_in_block(mut fcx: &FnCtxt, bl: &ast::Block) 
resolve_inlined_item			pub fn resolve_inlined_item(sess: &Session,
resolve_int_var			    pub fn resolve_int_var(&mut self, vid: IntVid) -> ty::t 
resolve_item			fn resolve_item(visitor: &mut RegionResolutionVisitor,
resolve_item			    fn resolve_item(&mut self, item: &Item) 
resolve_item_by_identifier_in_lexical_scope			    fn resolve_item_by_identifier_in_lexical_scope(&mut self,
resolve_item_in_lexical_scope			    fn resolve_item_in_lexical_scope(&mut self,
resolve_lifetime			    pub mod resolve_lifetime;
resolve_lifetime_ref			    fn resolve_lifetime_ref(&mut self,
resolve_local			fn resolve_local(visitor: &mut RegionResolutionVisitor,
resolve_local			    fn resolve_local(&mut self, local: &Local) 
resolve_method			    fn resolve_method(&mut self,
resolve_method_map_entry			fn resolve_method_map_entry(wbcx: &mut WbCtxt, sp: Span, method_call: MethodCall) 
resolve_method_type			    fn resolve_method_type(&self, method_call: MethodCall) -> Option<ty::t> 
resolve_module			    fn resolve_module(&mut self, module: &Mod, _span: Span,
resolve_module_in_lexical_scope			    fn resolve_module_in_lexical_scope(&mut self,
resolve_module_path			    fn resolve_module_path(&mut self,
resolve_module_path_from_root			    fn resolve_module_path_from_root(&mut self,
resolve_module_prefix			    fn resolve_module_prefix(&mut self,
resolve_module_relative_path			    fn resolve_module_relative_path(&mut self,
resolve_name_in_module			    fn resolve_name_in_module(&mut self,
resolve_node_type			    fn resolve_node_type(&mut self, id: ast::NodeId) -> ty::t 
resolve_origins			    fn resolve_origins(fcx: &FnCtxt, sp: Span,
resolve_param_vtables_under_param_substs			pub fn resolve_param_vtables_under_param_substs(
resolve_pat			fn resolve_pat(visitor: &mut RegionResolutionVisitor,
resolve_path			    fn resolve_path(&mut self,
resolve_pattern			    fn resolve_pattern(&mut self,
resolve_region			pub fn resolve_region(cx: &InferCtxt, r: ty::Region, modes: uint)
resolve_region			    pub fn resolve_region(&mut self, orig: ty::Region) -> ty::Region 
resolve_region_chk			    pub fn resolve_region_chk(&mut self, orig: ty::Region)
resolve_region_var			    pub fn resolve_region_var(&mut self, rid: RegionVid) -> ty::Region 
resolve_regions			    pub fn resolve_regions(&self) 
resolve_regions			    pub fn resolve_regions(&self) -> Vec<RegionResolutionError> 
resolve_regions			    pub fn resolve_regions(exp_count: uint) 
resolve_single_import			    fn resolve_single_import(&mut self,
resolve_stmt			fn resolve_stmt(visitor: &mut RegionResolutionVisitor,
resolve_struct			    fn resolve_struct(&mut self,
resolve_trait_reference			    fn resolve_trait_reference(&mut self,
resolve_ty_var			    pub fn resolve_ty_var(&mut self, vid: TyVid) -> ty::t 
resolve_type			    fn resolve_type(&mut self, ty: &Ty) 
resolve_type			    pub fn resolve_type(&self, unresolved_ty: ty::t) -> ty::t 
resolve_type			pub fn resolve_type(cx: &InferCtxt,
resolve_type			    pub fn resolve_type(&mut self, typ: ty::t) -> ty::t 
resolve_type_chk			    pub fn resolve_type_chk(&mut self, typ: ty::t) -> fres<ty::t> 
resolve_type_parameter_bound			    fn resolve_type_parameter_bound(&mut self,
resolve_type_parameters			    fn resolve_type_parameters(&mut self,
resolve_type_vars_for_node			fn resolve_type_vars_for_node(wbcx: &mut WbCtxt, sp: Span, id: ast::NodeId)
resolve_type_vars_if_possible			    pub fn resolve_type_vars_if_possible(&self, typ: ty::t) -> ty::t 
resolve_type_vars_in_expr			pub fn resolve_type_vars_in_expr(fcx: &FnCtxt, e: &ast::Expr) -> bool 
resolve_type_vars_in_fn			pub fn resolve_type_vars_in_fn(fcx: &FnCtxt, decl: &ast::FnDecl,
resolve_type_vars_in_trait_ref_if_possible			    pub fn resolve_type_vars_in_trait_ref_if_possible(&self,
resolve_type_vars_in_type			fn resolve_type_vars_in_type(fcx: &FnCtxt, sp: Span, typ: ty::t)
resolve_type_vars_in_types			fn resolve_type_vars_in_types(fcx: &FnCtxt, sp: Span, tys: &[ty::t])
resolve_upvar_borrow_map			fn resolve_upvar_borrow_map(wbcx: &mut WbCtxt) 
resolve_var			    pub fn resolve_var(&self, rid: RegionVid) -> ty::Region 
resolve_vtable_map_entry			fn resolve_vtable_map_entry(fcx: &FnCtxt, sp: Span, vtable_key: MethodCall) 
resolve_vtable_under_param_substs			pub fn resolve_vtable_under_param_substs(tcx: &ty::ctxt,
resolve_vtables_in_fn_ctxt			pub fn resolve_vtables_in_fn_ctxt(fcx: &FunctionContext, vts: typeck::vtable_res)
resolve_vtables_under_param_substs			pub fn resolve_vtables_under_param_substs(tcx: &ty::ctxt,
resolver			pub fn resolver<'a>(infcx: &'a InferCtxt, modes: uint) -> ResolveState<'a> 
restrict			    fn restrict(&self,
restriction_set			    fn restriction_set(&self, req_kind: ty::BorrowKind) -> RestrictionSet 
restrictions			mod restrictions;
result			    fn result(&mut self, out: &mut [u8]) 
result			    fn result(&mut self, out: &mut [u8]);
result_bytes			    fn result_bytes(&mut self) -> Vec<u8> 
result_str			    fn result_str(&mut self) -> ~str 
resume			    pub fn resume(&self, exn: ValueRef) -> ValueRef 
ret			    pub fn ret(&self, v: ValueRef) 
ret_void			    pub fn ret_void(&self) 
retain_stmt			fn retain_stmt(cx: &Context, stmt: @ast::Stmt) -> bool 
return_exit_block			    fn return_exit_block(&'a self) -> BasicBlockRef 
return_exit_block			    fn return_exit_block(&'a self) -> BasicBlockRef;
return_type			    pub fn return_type(&self) -> Type 
return_type_is_void			pub fn return_type_is_void(ccx: &CrateContext, ty: ty::t) -> bool 
return_uses_outptr			pub fn return_uses_outptr(ccx: &CrateContext, ty: ty::t) -> bool 
rev_binop			    fn rev_binop(binop: ast::BinOp) -> ast::BinOp 
rev_lookup			        fn rev_lookup(this: &Glb,
rflags			    fn rflags(r: Region) -> uint 
rollback_to			    pub fn rollback_to(&self, snapshot: &Snapshot) 
rollback_to			fn rollback_to<V:Clone + Vid,T:Clone>(vb: &mut ValsAndBindings<V, T>,
rollback_to			    pub fn rollback_to(&self, snapshot: uint) 
root			fn root<'a, K:KindOps>(datum: &Datum<K>,
root_and_write_guard			    pub fn root_and_write_guard<'a>(
root_and_write_guard			pub fn root_and_write_guard<'a, K:KindOps>(datum: &Datum<K>,
root_map			pub fn root_map() -> root_map 
root_map_key			pub struct root_map_key 
roundtrip			fn roundtrip(in_item: Option<@ast::Item>) 
roundup			fn roundup(x: u64, a: u64) -> u64 { ((x + (a - 1)) \/ a) * a }
rpath			    pub mod rpath;
rpaths_to_flags			pub fn rpaths_to_flags(rpaths: &[~str]) -> Vec<~str> 
rscope			pub mod rscope;
rslt			pub fn rslt<'a>(bcx: &'a Block<'a>, val: ValueRef) -> Result<'a> 
run			pub fn run(sess: &session::Session, llmod: ModuleRef,
run			pub fn run(sess: &Session, krate: &ast::Crate) 
run_ar			fn run_ar(sess: &Session, args: &str, cwd: Option<&Path>,
run_assembler			    pub fn run_assembler(sess: &Session, outputs: &OutputFilenames) 
run_compiler			pub fn run_compiler(args: &[~str]) 
run_passes			    pub fn run_passes(sess: &Session,
rust_path			pub fn rust_path() -> Vec<Path> 
rustlibdir			pub fn rustlibdir() -> ~str 
rvalue_scratch_datum			pub fn rvalue_scratch_datum(bcx: &Block,
safe_type_for_static_mut			fn safe_type_for_static_mut(cx: &ty::ctxt, e: &ast::Expr) -> Option<~str> 
sanitize			pub fn sanitize(s: &str) -> ~str 
scalar_type			pub enum scalar_type { nil_type, signed_int, unsigned_int, floating_point, }
scan			fn scan<R>(st: &mut PState, is_last: |char| -> bool, op: |&[u8]| -> R) -> R 
schedule_clean			    fn schedule_clean(&self,
schedule_clean_in_ast_scope			    fn schedule_clean_in_ast_scope(&self,
schedule_clean_in_custom_scope			    fn schedule_clean_in_custom_scope(&self,
schedule_drop_immediate			    fn schedule_drop_immediate(&self,
schedule_drop_mem			    fn schedule_drop_mem(&self,
schedule_free_value			    fn schedule_free_value(&self,
scope			    fn scope(&self, cmt: mc::cmt) -> ty::Region 
scope_metadata			fn scope_metadata(fcx: &FunctionContext,
scopes_intersect			    pub fn scopes_intersect(&self, scope1: ast::NodeId, scope2: ast::NodeId)
scopes_len			    fn scopes_len(&self) -> uint 
scopes_len			    fn scopes_len(&self) -> uint;
score			    fn score(p: &ast::Pat) -> uint 
sdiv			    pub fn sdiv(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
search			    pub fn search(&self, pick: pick) 
search			    fn search(&self, self_ty: ty::t) -> Option<MethodCallee> 
search			        fn search(self: &Env,
search_for_autoderefd_method			    fn search_for_autoderefd_method(&self,
search_for_autoptrd_method			    fn search_for_autoptrd_method(&self, self_ty: ty::t, autoderefs: uint)
search_for_autosliced_method			    fn search_for_autosliced_method(&self,
search_for_method			    fn search_for_method(&self, rcvr_ty: ty::t) -> Option<MethodCallee> 
search_for_some_kind_of_autorefd_method			    fn search_for_some_kind_of_autorefd_method(
search_for_traits_containing_method			    fn search_for_traits_containing_method(&mut self, name: Ident) -> Vec<DefId> 
search_for_vtable			fn search_for_vtable(vcx: &VtableContext,
search_lifetimes			fn search_lifetimes(lifetimes: &Vec<ast::Lifetime>,
search_mod			        fn search_mod(self: &Env,
search_ribs			    fn search_ribs(&mut self,
search_step			    fn search_step(&self,
secondary_libdir_name			    fn secondary_libdir_name() -> ~str { ~"lib" }
section_iter_res			pub fn section_iter_res(si: SectionIteratorRef) -> section_iter_res 
section_iter_res			pub struct section_iter_res 
select			    pub fn select(&self, cond: ValueRef, then_val: ValueRef, else_val: ValueRef) -> ValueRef 
self_tys			    fn self_tys(&self, a: Option<ty::t>, b: Option<ty::t>)
sequence_element_type			pub fn sequence_element_type(cx: &ctxt, ty: t) -> t 
sess			    pub fn sess(&self) -> &'a Session { self.fcx.ccx.sess() }
sess			    pub fn sess<'a>(&'a self) -> &'a Session 
sess_os_to_meta_os			pub fn sess_os_to_meta_os(os: abi::Os) -> metadata::loader::Os 
session			pub mod session;
set			    fn set<T:Clone + InferStr,
set_always_inline			pub fn set_always_inline(f: ValueRef) 
set_bit			fn set_bit(words: &mut [uint], bit: uint) -> bool 
set_captures			    fn set_captures(&mut self, node_id: NodeId, cs: Vec<CaptureInfo>) 
set_cleanup			    pub fn set_cleanup(&self, landing_pad: ValueRef) 
set_crate_data			    pub fn set_crate_data(&self, cnum: ast::CrateNum, data: @crate_metadata) 
set_debug_location			fn set_debug_location(cx: &CrateContext, debug_location: DebugLocation) 
set_fill			pub fn set_fill(bcx: &Block, vptr: ValueRef, fill: ValueRef) 
set_inline_hint			pub fn set_inline_hint(f: ValueRef) 
set_level			    fn set_level(&mut self, lint: Lint, level: level, src: LintSource) 
set_llvm_fn_attrs			pub fn set_llvm_fn_attrs(attrs: &[ast::Attribute], llfn: ValueRef) 
set_members_of_composite_type			fn set_members_of_composite_type(cx: &CrateContext,
set_module_kind			    fn set_module_kind(&self,
set_no_inline			pub fn set_no_inline(f: ValueRef) 
set_no_split_stack			pub fn set_no_split_stack(f: ValueRef) 
set_no_unwind			pub fn set_no_unwind(f: ValueRef) 
set_optimize_for_size			pub fn set_optimize_for_size(f: ValueRef) 
set_path_first_child			    fn set_path_first_child(&self,
set_path_first_move			    fn set_path_first_move(&self,
set_repeating_scope			    pub fn set_repeating_scope(&mut self, scope: ast::NodeId) -> ast::NodeId 
set_source_location			pub fn set_source_location(fcx: &FunctionContext,
set_struct_body			    pub fn set_struct_body(&mut self, els: &[Type], packed: bool) 
set_thread_local			pub fn set_thread_local(global: ValueRef, is_thread_local: bool) 
set_uwtable			pub fn set_uwtable(f: ValueRef) 
set_var_to_merged_bounds			    fn set_var_to_merged_bounds<T:Clone + InferStr + LatticeValue,
setup_env			fn setup_env(test_name: &str, source_string: &str) -> Env 
sext			    pub fn sext(&self, val: ValueRef, dest_ty: Type) -> ValueRef 
sext_or_bitcast			    pub fn sext_or_bitcast(&self, val: ValueRef, dest_ty: Type) -> ValueRef 
sflags			    fn sflags(substs: &substs) -> uint 
sha2			    pub mod sha2;
sha256_10			    pub fn sha256_10(bh: &mut BenchHarness) 
sha256_1k			    pub fn sha256_1k(bh: &mut BenchHarness) 
sha256_64k			    pub fn sha256_64k(bh: &mut BenchHarness) 
shallow_copy			    fn shallow_copy<'a>(&self,
shallow_copy			    pub fn shallow_copy(self, dst: ValueRef) -> &'a Block<'a> 
shallow_copy_and_take			    pub fn shallow_copy_and_take<'a>(&self,
shl			    pub fn shl(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
should			    pub fn should(&mut self, mode: uint) -> bool 
should_be_ignored_message			    fn should_be_ignored_message() -> &'static str 
should_explore			fn should_explore(tcx: &ty::ctxt, def_id: ast::DefId) -> bool 
should_fail			fn should_fail(i: @ast::Item) -> bool 
should_inline			fn should_inline(attrs: &[Attribute]) -> bool 
should_warn			fn should_warn(item: &ast::Item) -> bool 
should_warn			    fn should_warn(&self, var: Variable) -> Option<~str> 
show_span			    pub fn show_span(&self) -> bool 
show_span			    pub mod show_span;
shuffle_vector			    pub fn shuffle_vector(&self, v1: ValueRef, v2: ValueRef, mask: ValueRef) -> ValueRef 
sigils			    fn sigils(&self, p1: ast::Sigil, p2: ast::Sigil) -> cres<ast::Sigil> 
sigma0			        fn sigma0(x: u32) -> u32 
sigma1			        fn sigma1(x: u32) -> u32 
simd_size			pub fn simd_size(cx: &ctxt, ty: t) -> uint 
simd_type			pub fn simd_type(cx: &ctxt, ty: t) -> t 
simple_identifier			pub fn simple_identifier<'a>(pat: &'a Pat) -> Option<&'a Path> 
simple_var_t			    fn simple_var_t<T:Clone + Eq + InferStr + SimplyUnifiable,
simple_vars			    fn simple_vars<T:Clone + Eq + InferStr + SimplyUnifiable,
simplify_ast			fn simplify_ast(ii: e::InlinedItemRef) -> ast::InlinedItem 
sitofp			    pub fn sitofp(&self, val: ValueRef, dest_ty: Type) -> ValueRef 
size			    fn size(&self) -> uint { 64 }
size			    fn size(&self) -> uint;
size_and_align_of			fn size_and_align_of(cx: &CrateContext, llvm_type: Type) -> (u64, u64) 
size_t			    pub fn size_t(ccx: &CrateContext) -> Type 
sizing_type_of			pub fn sizing_type_of(cx: &CrateContext, r: &Repr) -> Type 
sizing_type_of			pub fn sizing_type_of(cx: &CrateContext, t: ty::t) -> Type 
slice_layout_is_correct			    fn slice_layout_is_correct(cx: &CrateContext,
solve			    fn solve(&mut self) 
solve_constraints			fn solve_constraints(constraints_cx: ConstraintContext) 
source			    pub fn source(&self) -> NodeIndex 
source_name			pub fn source_name(input: &Input) -> ~str 
span			    fn span(&self) -> Span { self.span }
span			    fn span(&self) -> Span;
span			    pub fn span(&self) -> Span 
span_bug			    pub fn span_bug(&self, sp: Span, msg: &str) -> ! 
span_end_note			    pub fn span_end_note(&self, sp: Span, msg: &str) 
span_end_note			    pub fn span_end_note(&self, s: Span, m: &str) 
span_err			    pub fn span_err(&self, sp: Span, msg: &str) 
span_err			    pub fn span_err(&self, s: Span, m: &str) 
span_fatal			    pub fn span_fatal(&self, sp: Span, msg: &str) -> ! 
span_for_namespace			    fn span_for_namespace(&self, namespace: Namespace) -> Option<Span> 
span_lint			    fn span_lint(&self, lint: Lint, span: Span, msg: &str) 
span_note			    pub fn span_note(&self, sp: Span, msg: &str) 
span_note			    pub fn span_note(&self, s: Span, m: &str) 
span_of_impl			    fn span_of_impl(&self, implementation: @Impl) -> Span 
span_start			fn span_start(cx: &CrateContext, span: Span) -> codemap::Loc 
span_unimpl			    pub fn span_unimpl(&self, sp: Span, msg: &str) -> ! 
span_warn			    pub fn span_warn(&self, sp: Span, msg: &str) 
specialize			fn specialize(cx: &MatchCheckCtxt,
spill_if_immediate			pub fn spill_if_immediate(cx: &Block, v: ValueRef, t: ty::t) -> ValueRef 
srem			    pub fn srem(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
standard_padding			    fn standard_padding(&mut self, rem: uint, func: |&[u8]|) 
standard_padding			    fn standard_padding(&mut self, rem: uint, func: |&[u8]|);
start_emitting_source_locations			pub fn start_emitting_source_locations(fcx: &FunctionContext) 
start_snapshot			    pub fn start_snapshot(&self) -> Snapshot 
start_snapshot			    pub fn start_snapshot(&self) -> uint 
std_inject			    pub mod std_inject;
stmt			    fn stmt(&mut self, stmt: @ast::Stmt, pred: CFGIndex) -> CFGIndex 
stmt_node_id			pub fn stmt_node_id(s: &ast::Stmt) -> ast::NodeId 
stop_after_phase_1			pub fn stop_after_phase_1(sess: &Session) -> bool 
stop_after_phase_2			pub fn stop_after_phase_2(sess: &Session) -> bool 
stop_after_phase_3			pub fn stop_after_phase_3(sess: &Session) -> bool 
stop_after_phase_5			pub fn stop_after_phase_5(sess: &Session) -> bool 
store			    pub fn store(&self, val: ValueRef, ptr: ValueRef) 
store_arg			pub fn store_arg<'a>(mut bcx: &'a Block<'a>,
store_environment			pub fn store_environment<'a>(
store_inbounds			pub fn store_inbounds<'a>(
store_local			pub fn store_local<'a>(bcx: &'a Block<'a>,
store_non_ref_bindings			fn store_non_ref_bindings<'a>(
store_to			    pub fn store_to(self, dst: ValueRef) -> &'a Block<'a> 
store_to			    pub fn store_to<'a>(self,
store_to_dest			    pub fn store_to_dest(self,
store_to_dest			    pub fn store_to_dest<'a>(self,
straightline			    fn straightline(&mut self,
strip_items			pub fn strip_items(krate: ast::Crate,
strip_test_functions			fn strip_test_functions(krate: ast::Crate) -> ast::Crate 
strip_unconfigured_items			pub fn strip_unconfigured_items(krate: ast::Crate) -> ast::Crate 
struct_			    pub fn struct_(ccx: &CrateContext, els: &[Type], packed: bool) -> Type 
struct_field_family_to_visibility			fn struct_field_family_to_visibility(family: Family) -> ast::Visibility 
struct_field_ptr			fn struct_field_ptr(bcx: &Block, st: &Struct, val: ValueRef, ix: uint,
struct_field_tys			fn struct_field_tys(fields: &[StructField]) -> Vec<field_ty> 
struct_fields			pub fn struct_fields(cx: &ctxt, did: ast::DefId, substs: &substs)
struct_gep			    pub fn struct_gep(&self, ptr: ValueRef, idx: uint) -> ValueRef 
struct_llfields			fn struct_llfields(cx: &CrateContext, st: &Struct, sizing: bool) -> Vec<Type> 
struct_ty			fn struct_ty(ccx: &CrateContext, ty: Type) -> Type 
structurally_resolved_type			pub fn structurally_resolved_type(fcx: &FnCtxt, sp: Span, tp: ty::t) -> ty::t 
structure_of			pub fn structure_of<'a>(fcx: &FnCtxt, sp: Span, typ: ty::t)
sty			pub enum sty 
sub			    pub fn sub(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
sub			    fn sub(&self, other: &TypeContents) -> TypeContents 
sub			    fn sub<'a>(&'a self) -> Sub<'a>;
sub			    fn sub<'a>(&'a self) -> Sub<'a> { Sub(*self.get_ref()) }
sub			    fn sub(cf: &CombineFields, a: &Self, b: &Self) -> ures;
sub			    fn sub(cf: &CombineFields, a: &ty::t, b: &ty::t) -> ures 
sub			    fn sub<'a>(&'a self) -> Sub<'a> { Sub(*self.get_ref()) }
sub			    pub fn sub<'a>(&'a self, a_is_expected: bool, trace: TypeTrace) -> Sub<'a> 
sub			pub mod sub;
sub			    fn sub<'a>(&'a self) -> Sub<'a> { Sub(*self.get_ref()) }
sub_free_region			    pub fn sub_free_region(&self, sub: FreeRegion, sup: FreeRegion) -> bool 
subroutine_type_metadata			fn subroutine_type_metadata(cx: &CrateContext,
subst			    pub mod subst;
subst			    fn subst(&self, tcx: &ty::ctxt, substs: &ty::substs) -> Self 
subst			pub fn subst(cx: &ctxt,
subst_receiver_types_in_method_ty			fn subst_receiver_types_in_method_ty(tcx: &ty::ctxt,
subst_spanned			    fn subst_spanned(&self, _: &ty::ctxt,
subst_spanned			    fn subst_spanned(&self, _tcx: &ty::ctxt,
subst_spanned			    fn subst_spanned(&self, tcx: &ty::ctxt,
subst_tps			pub fn subst_tps(tcx: &ctxt, tps: &[t], self_ty_opt: Option<t>, typ: t) -> t 
substd_enum_variants			pub fn substd_enum_variants(cx: &ctxt,
substs			impl substs 
substs			pub struct substs 
substs			    fn substs(&self,
substs_is_noop			pub fn substs_is_noop(substs: &substs) -> bool 
substs_to_str			pub fn substs_to_str(cx: &ctxt, substs: &substs) -> ~str 
subtype			pub fn subtype(fcx: &FnCtxt, sp: Span, expected: ty::t, actual: ty::t) 
subtype			    pub fn subtype(&self, a: ty::t, b: ty::t) -> CoerceResult 
subtypes_require			    fn subtypes_require(cx: &ctxt, seen: &mut Vec<DefId>,
sum0			        fn sum0(x: u32) -> u32 
sum1			        fn sum1(x: u32) -> u32 
super_fn_sigs			pub fn super_fn_sigs<C:Combine>(this: &C, a: &ty::FnSig, b: &ty::FnSig) -> cres<ty::FnSig> 
super_fold_mt			pub fn super_fold_mt<T:TypeFolder>(this: &mut T,
super_fold_sig			pub fn super_fold_sig<T:TypeFolder>(this: &mut T,
super_fold_sty			pub fn super_fold_sty<T:TypeFolder>(this: &mut T,
super_fold_substs			pub fn super_fold_substs<T:TypeFolder>(this: &mut T,
super_fold_trait_ref			pub fn super_fold_trait_ref<T:TypeFolder>(this: &mut T,
super_fold_trait_store			pub fn super_fold_trait_store<T:TypeFolder>(this: &mut T,
super_fold_ty			pub fn super_fold_ty<T:TypeFolder>(this: &mut T,
super_fold_vstore			pub fn super_fold_vstore<T:TypeFolder>(this: &mut T,
super_lattice_tys			pub fn super_lattice_tys<L:LatticeDir+TyLatticeDir+Combine>(this: &L,
super_tys			pub fn super_tys<C:Combine>(this: &C, a: ty::t, b: ty::t) -> cres<ty::t> 
suptype			pub fn suptype(fcx: &FnCtxt, sp: Span, expected: ty::t, actual: ty::t) 
suptype_with_fn			pub fn suptype_with_fn(fcx: &FnCtxt,
svh			    pub mod svh;
switch			    pub fn switch(&self, v: ValueRef, else_llbb: BasicBlockRef, num_cases: uint) -> ValueRef 
symbol_hash			fn symbol_hash(tcx: &ty::ctxt, symbol_hasher: &mut Sha256,
symbol_is_live			    fn symbol_is_live(&mut self, id: ast::NodeId,
symname			pub fn symname(name: &str, hash: &str, vers: &str) -> ~str 
synthesize_crate_attrs			fn synthesize_crate_attrs(ecx: &EncodeContext,
synthesize_crateid_attr			    fn synthesize_crateid_attr(ecx: &EncodeContext) -> Attribute 
t			pub struct t 
t			pub struct t { inner: *t_opaque }
t_box_			pub struct t_box_ 
t_fn			    pub fn t_fn(&self, input_tys: &[ty::t], output_ty: ty::t) -> ty::t 
t_int			    pub fn t_int(&self) -> ty::t 
t_opaque			enum t_opaque {}
t_rptr_bound			    pub fn t_rptr_bound(&self, id: uint) -> ty::t 
t_rptr_free			    pub fn t_rptr_free(&self, nid: ast::node_id, id: uint) -> ty::t 
t_rptr_scope			    pub fn t_rptr_scope(&self, id: ast::node_id) -> ty::t 
t_rptr_static			    pub fn t_rptr_static(&self) -> ty::t 
t_sub_var			    fn t_sub_var<T:Clone + InferStr + LatticeValue,
tag			    fn tag(&mut self, tag_id: c::astencode_tag, f: |&mut Self|);
tag			    fn tag(&mut self,
tag			    pub fn tag(&self) -> ~str 
tag			    fn tag(&self) -> ~str;
tag			    fn tag(&self) -> ~str { ~"glb" }
tag			    fn tag(&self) -> ~str { ~"lub" }
tag			    fn tag(&self) -> ~str { ~"sub" }
tainted			    pub fn tainted(&self, snapshot: uint, r0: Region) -> Vec<Region> 
take_local			    fn take_local<'a>(bcx: &'a Block<'a>,
take_ty			pub fn take_ty<'a>(bcx: &'a Block<'a>, v: ValueRef, t: ty::t)
target			    pub fn target(&self) -> NodeIndex 
target_data_res			pub fn target_data_res(td: TargetDataRef) -> target_data_res 
target_data_res			pub struct target_data_res 
target_feature			    fn target_feature<'a>(sess: &'a Session) -> &'a str 
target_for_namespace			    fn target_for_namespace(&self, namespace: Namespace)
target_strs			    pub mod target_strs;
tbox_flag			pub enum tbox_flag 
tbox_has_flag			pub fn tbox_has_flag(tb: t_box, flag: tbox_flag) -> bool 
tc_mt			    fn tc_mt(cx: &ctxt,
tc_ty			    fn tc_ty(cx: &ctxt,
tcx			    pub fn tcx(&self) -> &'a ty::ctxt { self.bccx.tcx }
tcx			    fn tcx(&self) -> &'a ty::ctxt 
tcx			    pub fn tcx(&self) -> &'a ty::ctxt { self.bccx.tcx }
tcx			    fn tcx<'a>(&'a self) -> &'a ty::ctxt 
tcx			    fn tcx(&self) -> &'b ty::ctxt 
tcx			    fn tcx<'a>(&'a self) -> &'a ty::ctxt { self.tcx }
tcx			    fn tcx<'a>(&'a self) -> &'a ty::ctxt 
tcx			    fn tcx<'a>(&'a self) -> &'a ty::ctxt;
tcx			    fn tcx<'a>(&'a self) -> &'a ty::ctxt { self.tcx }
tcx			    pub fn tcx(&self) -> &'a ty::ctxt 
tcx			    pub fn tcx<'a>(&'a self) -> &'a ty::ctxt 
tcx			    pub fn tcx(&self) -> &'a ty::ctxt 
tcx			        fn tcx<'a>(&'a self) -> &'a ctxt { let TypeNormalizer(c) = *self; c }
tcx			        fn tcx<'a>(&'a self) -> &'a ctxt { self.tcx }
tcx			    fn tcx<'a>(&'a self) -> &'a ty::ctxt { self.tcx }
tcx			    fn tcx<'a>(&'a self) -> &'a ty::ctxt;
tcx			    fn tcx<'a>(&'a self) -> &'a ty::ctxt;
tcx			    fn tcx(&self) -> &'a ty::ctxt 
tcx			    fn tcx<'a>(&'a self) -> &'a ty::ctxt { self.ccx.tcx }
tcx			    fn tcx<'a>(&'a self) -> &'a ty::ctxt 
tcx			    pub fn tcx(&self) -> &'a ty::ctxt 
tcx			        fn tcx<'a>(&'a self) -> &'a ty::ctxt 
tcx			    pub fn tcx(&self) -> &'a ty::ctxt { self.infcx.tcx }
tcx			    fn tcx<'a>(&'a self) -> &'a ty::ctxt { self.tcx }
tcx			    fn tcx<'a>(&'a self) -> &'a ty::ctxt 
tcx			    fn tcx(&self) -> &'a ty::ctxt 
temp_path			    pub fn temp_path(&self, flavor: link::OutputType) -> Path 
temporary_scope			    fn temporary_scope(&mut self, id: ast::NodeId) -> Option<ast::NodeId> 
temporary_scope			    fn temporary_scope(&mut self, rvalue_id: ast::NodeId) -> Option<ast::NodeId>;
temporary_scope			    pub fn temporary_scope(&self, expr_id: ast::NodeId) -> Option<ast::NodeId> 
temporary_scope			pub fn temporary_scope(tcx: &ty::ctxt,
temporary_scope			    fn temporary_scope(&mut self, id: ast::NodeId) -> Option<ast::NodeId> 
terminate			pub fn terminate(cx: &Block, _: &str) 
terr_vstore_kind			pub enum terr_vstore_kind 
terr_vstore_kind_to_str			    fn terr_vstore_kind_to_str(k: terr_vstore_kind) -> ~str 
test			mod test 
test			mod test 
test			    pub mod test;
test			mod test 
test_1million_random_sha256			    fn test_1million_random_sha256() 
test_add_bytes_to_bits_ok			    fn test_add_bytes_to_bits_ok() 
test_add_bytes_to_bits_overflow			    fn test_add_bytes_to_bits_overflow() 
test_adjacent_edges			    fn test_adjacent_edges<N:Eq,E:Eq>(graph: &Graph<N,E>,
test_basic			fn test_basic() 
test_digest_1million_random			    fn test_digest_1million_random<D: Digest>(digest: &mut D, blocksize: uint, expected: &str) 
test_get_absolute_rpath			    fn test_get_absolute_rpath() 
test_hash			    fn test_hash<D: Digest>(sh: &mut D, tests: &[Test]) 
test_minimize1			    fn test_minimize1() 
test_minimize2			    fn test_minimize2() 
test_more			fn test_more() 
test_prefix_rpath			    fn test_prefix_rpath() 
test_prefix_rpath_abs			    fn test_prefix_rpath_abs() 
test_rpath_relative			    fn test_rpath_relative() 
test_rpaths_to_flags			    fn test_rpaths_to_flags() 
test_sha256			    fn test_sha256() 
test_simplification			fn test_simplification() 
test_smalltalk			fn test_smalltalk() 
test_switch_implies_cfg_test			    fn test_switch_implies_cfg_test() 
test_switch_implies_cfg_test_unless_cfg_test			    fn test_switch_implies_cfg_test_unless_cfg_test() 
tests			mod tests 
then			    fn then<T:Clone>(&self, f: || -> Result<T,ty::type_err>)
then			impl then for ures 
then			trait then 
time			pub fn time<T, U>(do_it: bool, what: &str, u: U, f: |U| -> T) -> T 
time_llvm_passes			    pub fn time_llvm_passes(&self) -> bool 
time_passes			    pub fn time_passes(&self) -> bool { self.debugging_opt(TIME_PASSES) }
to_appropriate_datum			    pub fn to_appropriate_datum<'a>(self,
to_bits			    fn to_bits(self) -> (Self, Self);
to_bits			    fn to_bits(self) -> (u64, u64) 
to_builtin_kind			    pub fn to_builtin_kind(&self, id: ast::DefId) -> Option<ty::BuiltinBound> 
to_expr_datum			    pub fn to_expr_datum(self) -> Datum<Expr> 
to_expr_datumblock			    pub fn to_expr_datumblock(self) -> DatumBlock<'a, Expr> 
to_expr_kind			    fn to_expr_kind(self) -> Expr 
to_expr_kind			    fn to_expr_kind(self) -> Expr;
to_llbool			    pub fn to_llbool(self) -> Result<'a> 
to_llbool			    pub fn to_llbool<'a>(self, bcx: &'a Block<'a>) -> ValueRef 
to_llref			    pub fn to_llref(self) -> ValueRef 
to_llscalarish			    pub fn to_llscalarish<'a>(self, bcx: &'a Block<'a>) -> ValueRef 
to_lvalue_datum			    pub fn to_lvalue_datum<'a>(self,
to_lvalue_datum_in_scope			    pub fn to_lvalue_datum_in_scope<'a>(self,
to_ref			    pub fn to_ref(&self) -> TypeRef 
to_ref_datum			    pub fn to_ref_datum<'a>(self, bcx: &'a Block<'a>) -> DatumBlock<'a, Rvalue> 
to_rvalue_datum			    pub fn to_rvalue_datum<'a>(self,
to_short_str			    pub fn to_short_str(&self) -> &'static str 
to_str			    pub fn to_str(&self) -> ~str 
to_str			    pub fn to_str(&self, ccx: &CrateContext) -> ~str 
to_str			    pub fn to_str(&self) -> ~str 
to_str			    pub fn to_str(&self) -> ~str 
to_str			    pub fn to_str(&self, ccx: &CrateContext) -> ~str 
to_str			    pub fn to_str(&self, ccx: &CrateContext) -> ~str 
to_str			    pub fn to_str(&self, ccx: &CrateContext) -> ~str 
to_str			    pub fn to_str(self) -> &'static str 
to_str			pub mod to_str;
to_ty			    pub fn to_ty(&self, ast_t: &ast::Ty) -> ty::t 
to_ty			    fn to_ty<RS:RegionScope>(&self, rs: &RS, ast_ty: &ast::Ty) -> ty::t 
to_ty			    fn to_ty<RS:RegionScope>(&self, rs: &RS, ast_ty: &ast::Ty) -> ty::t;
to_type_err			    fn to_type_err(err: expected_found<IntVarValue>) -> ty::type_err 
to_type_err			    fn to_type_err(err: expected_found<ast::FloatTy>) -> ty::type_err 
to_type_err			    fn to_type_err(expected_found<Self>) -> ty::type_err;
to_uint			    fn to_uint(&self) -> uint { let FloatVid(v) = *self; v }
to_uint			    fn to_uint(&self) -> uint { let IntVid(v) = *self; v }
to_uint			    fn to_uint(&self) -> uint { let TyVid(v) = *self; v }
to_uint			    fn to_uint(&self) -> uint { self.id }
to_uint			    fn to_uint(&self) -> uint 
to_uint			    fn to_uint(&self) -> uint;
to_ures			    fn to_ures(&self) -> ures 
to_ures			    fn to_ures(&self) -> ures;
to_user_str			    pub fn to_user_str(&self) -> &'static str 
to_user_str			    pub fn to_user_str(&self) -> &'static str 
top_ast_scope			    fn top_ast_scope(&self) -> Option<ast::NodeId> 
top_ast_scope			    fn top_ast_scope(&self) -> Option<ast::NodeId>;
top_loop_scope			    fn top_loop_scope(&self) -> ast::NodeId 
top_loop_scope			    fn top_loop_scope(&self) -> ast::NodeId;
top_nonempty_cleanup_scope			    fn top_nonempty_cleanup_scope(&self) -> Option<uint> 
top_nonempty_cleanup_scope			    fn top_nonempty_cleanup_scope(&self) -> Option<uint>;
top_scope			    fn top_scope<R>(&self, f: |&CleanupScope<'a>| -> R) -> R 
top_scope			    fn top_scope<R>(&self, f: |&CleanupScope<'a>| -> R) -> R;
tps			    fn tps(&self, as_: &[ty::t], bs: &[ty::t]) -> cres<Vec<ty::t> > 
tr			    fn tr(&self, xcx: &ExtendedDecodeContext) -> MethodOrigin 
tr			    fn tr(&self, xcx: &ExtendedDecodeContext) -> Option<ast::DefId> 
tr			    fn tr(&self, xcx: &ExtendedDecodeContext) -> Self;
tr			    fn tr(&self, xcx: &ExtendedDecodeContext) -> Span 
tr			    fn tr(&self, xcx: &ExtendedDecodeContext) -> ast::Def 
tr			    fn tr(&self, xcx: &ExtendedDecodeContext) -> ast::DefId 
tr			    fn tr(&self, xcx: &ExtendedDecodeContext) -> freevar_entry 
tr			    fn tr(&self, xcx: &ExtendedDecodeContext) -> moves::CaptureVar 
tr			    fn tr(&self, xcx: &ExtendedDecodeContext) -> ty::AutoDerefRef 
tr			    fn tr(&self, xcx: &ExtendedDecodeContext) -> ty::AutoRef 
tr			    fn tr(&self, xcx: &ExtendedDecodeContext) -> ty::BoundRegion 
tr			    fn tr(&self, xcx: &ExtendedDecodeContext) -> ty::Region 
tr			impl tr for MethodOrigin 
tr			impl tr for Option<ast::DefId> 
tr			impl tr for Span 
tr			impl tr for ast::Def 
tr			impl tr for ast::DefId 
tr			impl tr for freevar_entry 
tr			impl tr for moves::CaptureVar 
tr			impl tr for ty::AutoDerefRef 
tr			impl tr for ty::AutoRef 
tr			impl tr for ty::BoundRegion 
tr			impl tr for ty::Region 
tr			trait tr 
tr_def_id			    pub fn tr_def_id(&self, did: ast::DefId) -> ast::DefId 
tr_id			    pub fn tr_id(&self, id: ast::NodeId) -> ast::NodeId 
tr_intern			    fn tr_intern(&self, xcx: &ExtendedDecodeContext) -> ast::DefId 
tr_intern			    fn tr_intern(&self, xcx: &ExtendedDecodeContext) -> ast::DefId;
tr_intern			impl tr_intern for ast::DefId 
tr_intern			trait tr_intern 
tr_intern_def_id			    pub fn tr_intern_def_id(&self, did: ast::DefId) -> ast::DefId 
tr_span			    pub fn tr_span(&self, _span: Span) -> Span 
trace			    fn trace(&self) -> TypeTrace;
trace			    fn trace(&self) -> TypeTrace { self.get_ref().trace }
trace			    fn trace(&self) -> TypeTrace { self.get_ref().trace }
trace			    fn trace(&self) -> TypeTrace { self.get_ref().trace }
track_anon			    fn track_anon(&self, anon: uint) 
trait_adjustment_to_ty			pub fn trait_adjustment_to_ty(cx: &ctxt, sigil: &ast::Sigil, region: &Option<Region>,
trait_def_of_item			pub fn trait_def_of_item(ccx: &CrateCtxt, it: &ast::Item) -> @ty::TraitDef 
trait_id_of_impl			pub fn trait_id_of_impl(tcx: &ctxt,
trait_is_public			    fn trait_is_public(&self, trait_id: ast::NodeId) -> bool 
trait_metadata			fn trait_metadata(cx: &CrateContext,
trait_method			pub fn trait_method(cx: &ctxt, trait_did: ast::DefId, idx: uint) -> @Method 
trait_method_def_ids			pub fn trait_method_def_ids(cx: &ctxt, id: ast::DefId) -> @Vec<DefId> 
trait_method_in_cfg			fn trait_method_in_cfg(cx: &Context, meth: &ast::TraitMethod) -> bool 
trait_method_of_method			pub fn trait_method_of_method(tcx: &ctxt,
trait_methods			pub fn trait_methods(cx: &ctxt, trait_did: ast::DefId) -> @Vec<@Method> 
trait_of_method			pub fn trait_of_method(tcx: &ctxt, def_id: ast::DefId)
trait_ref_contains_error			pub fn trait_ref_contains_error(tref: &ty::TraitRef) -> bool 
trait_ref_supertraits			pub fn trait_ref_supertraits(cx: &ctxt, trait_ref: &ty::TraitRef) -> Vec<@TraitRef> 
trait_ref_to_def_id			pub fn trait_ref_to_def_id(tcx: &ctxt, tr: &ast::TraitRef) -> ast::DefId 
trait_ref_to_str			    pub fn trait_ref_to_str(&self, t: &ty::TraitRef) -> ~str 
trait_ref_to_str			pub fn trait_ref_to_str(cx: &ctxt, trait_ref: &ty::TraitRef) -> ~str 
trait_ref_to_trait_def_id			    fn trait_ref_to_trait_def_id(&self, trait_ref: &TraitRef) -> DefId 
trait_refs			    fn trait_refs(&self,
trait_store_to_str			pub fn trait_store_to_str(cx: &ctxt, s: ty::TraitStore) -> ~str 
trait_stores			    fn trait_stores(&self,
trait_supertraits			pub fn trait_supertraits(cx: &ctxt, id: ast::DefId) -> @Vec<@TraitRef> 
trans			    pub mod trans;
trans			fn trans<'a>(bcx: &'a Block<'a>, expr: &ast::Expr) -> Callee<'a> 
trans			    fn trans<'a>(&self, bcx: &'a Block<'a>) -> &'a Block<'a> 
trans			    fn trans<'a>(&self, bcx: &'a Block<'a>) -> &'a Block<'a>;
trans			pub fn trans<'a>(bcx: &'a Block<'a>,
trans_addr_of			fn trans_addr_of<'a>(bcx: &'a Block<'a>,
trans_adt			fn trans_adt<'a>(
trans_arg_datum			pub fn trans_arg_datum<'a>(
trans_args			fn trans_args<'a>(cx: &'a Block<'a>,
trans_assign_op			fn trans_assign_op<'a>(
trans_binary			fn trans_binary<'a>(bcx: &'a Block<'a>,
trans_block			pub fn trans_block<'a>(bcx: &'a Block<'a>,
trans_boxed_expr			fn trans_boxed_expr<'a>(bcx: &'a Block<'a>,
trans_break			pub fn trans_break<'a>(bcx: &'a Block<'a>,
trans_break_cont			pub fn trans_break_cont<'a>(bcx: &'a Block<'a>,
trans_call			pub fn trans_call<'a>(
trans_call_inner			pub fn trans_call_inner<'a>(
trans_case			pub fn trans_case<'a>(bcx: &'a Block<'a>, r: &Repr, discr: Disr)
trans_cleanups_to_exit_scope			    fn trans_cleanups_to_exit_scope(&'a self,
trans_closure			pub fn trans_closure(ccx: &CrateContext,
trans_const			pub fn trans_const(ccx: &CrateContext, r: &Repr, discr: Disr,
trans_const			pub fn trans_const(ccx: &CrateContext, m: ast::Mutability, id: ast::NodeId) 
trans_cont			pub fn trans_cont<'a>(bcx: &'a Block<'a>,
trans_crate			pub fn trans_crate(krate: ast::Crate,
trans_datum_unadjusted			fn trans_datum_unadjusted<'a>(bcx: &'a Block<'a>,
trans_def			    fn trans_def<'a>(bcx: &'a Block<'a>, def: ast::Def, ref_expr: &ast::Expr)
trans_def			fn trans_def<'a>(bcx: &'a Block<'a>,
trans_def_dps_unadjusted			fn trans_def_dps_unadjusted<'a>(
trans_def_fn_unadjusted			fn trans_def_fn_unadjusted<'a>(bcx: &'a Block<'a>,
trans_drop_flag_ptr			pub fn trans_drop_flag_ptr(bcx: &Block, r: &Repr, val: ValueRef) -> ValueRef 
trans_eager_binop			fn trans_eager_binop<'a>(
trans_enum_def			pub fn trans_enum_def(ccx: &CrateContext, enum_definition: &ast::EnumDef,
trans_enum_variant			pub fn trans_enum_variant(ccx: &CrateContext,
trans_enum_variant_or_tuple_like_struct			fn trans_enum_variant_or_tuple_like_struct(ccx: &CrateContext,
trans_exchange_free			pub fn trans_exchange_free<'a>(cx: &'a Block<'a>, v: ValueRef)
trans_expr_fn			pub fn trans_expr_fn<'a>(
trans_external_path			pub fn trans_external_path(ccx: &CrateContext, did: ast::DefId, t: ty::t) -> ValueRef 
trans_fail			pub fn trans_fail<'a>(
trans_fail_bounds_check			pub fn trans_fail_bounds_check<'a>(
trans_field_ptr			pub fn trans_field_ptr(bcx: &Block, r: &Repr, val: ValueRef, discr: Disr,
trans_fixed_vstore			pub fn trans_fixed_vstore<'a>(
trans_fn			pub fn trans_fn(ccx: &CrateContext,
trans_fn_ref			pub fn trans_fn_ref(bcx: &Block, def_id: ast::DefId, node: ExprOrMethodCall) -> ValueRef 
trans_fn_ref_with_vtables			pub fn trans_fn_ref_with_vtables(
trans_fn_ref_with_vtables_to_callee			fn trans_fn_ref_with_vtables_to_callee<'a>(bcx: &'a Block<'a>,
trans_foreign_mod			pub fn trans_foreign_mod(ccx: &CrateContext, foreign_mod: &ast::ForeignMod) 
trans_free			pub fn trans_free<'a>(cx: &'a Block<'a>, v: ValueRef) -> &'a Block<'a> 
trans_gc			fn trans_gc<'a>(mut bcx: &'a Block<'a>,
trans_get_discr			pub fn trans_get_discr(bcx: &Block, r: &Repr, scrutinee: ValueRef, cast_to: Option<Type>)
trans_if			pub fn trans_if<'a>(bcx: &'a Block<'a>,
trans_imm_cast			fn trans_imm_cast<'a>(bcx: &'a Block<'a>,
trans_immediate_lit			fn trans_immediate_lit<'a>(bcx: &'a Block<'a>,
trans_impl			pub fn trans_impl(ccx: &CrateContext,
trans_index			fn trans_index<'a>(bcx: &'a Block<'a>,
trans_inline_asm			pub fn trans_inline_asm<'a>(bcx: &'a Block<'a>, ia: &ast::InlineAsm)
trans_into			pub fn trans_into<'a>(bcx: &'a Block<'a>,
trans_intrinsic			pub fn trans_intrinsic(ccx: &CrateContext,
trans_item			pub fn trans_item(ccx: &CrateContext, item: &ast::Item) 
trans_lang_call			pub fn trans_lang_call<'a>(
trans_lang_call_with_type_params			pub fn trans_lang_call_with_type_params<'a>(
trans_lazy_binop			fn trans_lazy_binop<'a>(
trans_lit_str			pub fn trans_lit_str<'a>(
trans_local_var			pub fn trans_local_var<'a>(bcx: &'a Block<'a>,
trans_loop			pub fn trans_loop<'a>(bcx:&'a Block<'a>,
trans_match			pub fn trans_match<'a>(
trans_match_inner			fn trans_match_inner<'a>(scope_cx: &'a Block<'a>,
trans_method			pub fn trans_method(ccx: &CrateContext, method: &ast::Method,
trans_method_call			pub fn trans_method_call<'a>(
trans_method_callee			pub fn trans_method_callee<'a>(
trans_mod			pub fn trans_mod(ccx: &CrateContext, m: &ast::Mod) 
trans_monomorphized_callee			fn trans_monomorphized_callee<'a>(bcx: &'a Block<'a>,
trans_native_call			pub fn trans_native_call<'a>(
trans_opt			fn trans_opt<'a>(bcx: &'a Block<'a>, o: &Opt) -> opt_result<'a> 
trans_overloaded_op			fn trans_overloaded_op<'a, 'b>(
trans_rec_field			fn trans_rec_field<'a>(bcx: &'a Block<'a>,
trans_rec_or_struct			fn trans_rec_or_struct<'a>(
trans_resolve_method			pub fn trans_resolve_method(tcx: &ty::ctxt, id: ast::NodeId,
trans_ret			pub fn trans_ret<'a>(bcx: &'a Block<'a>,
trans_rust_fn_with_foreign_abi			pub fn trans_rust_fn_with_foreign_abi(ccx: &CrateContext,
trans_rvalue_dps_unadjusted			fn trans_rvalue_dps_unadjusted<'a>(bcx: &'a Block<'a>,
trans_rvalue_stmt_unadjusted			fn trans_rvalue_stmt_unadjusted<'a>(bcx: &'a Block<'a>,
trans_scope_cleanups			    fn trans_scope_cleanups(&self, \/\/ cannot borrow self, will recurse
trans_scope_cleanups			    fn trans_scope_cleanups(&self,
trans_slice_vstore			pub fn trans_slice_vstore<'a>(
trans_start_init			pub fn trans_start_init(bcx: &Block, r: &Repr, val: ValueRef, discr: Disr) 
trans_static_method_callee			pub fn trans_static_method_callee(bcx: &Block,
trans_stats			    pub fn trans_stats(&self) -> bool { self.debugging_opt(TRANS_STATS) }
trans_stmt			pub fn trans_stmt<'a>(cx: &'a Block<'a>,
trans_struct_def			pub fn trans_struct_def(ccx: &CrateContext, struct_def: @ast::StructDef) 
trans_struct_drop			fn trans_struct_drop<'a>(bcx: &'a Block<'a>,
trans_struct_drop_flag			fn trans_struct_drop_flag<'a>(bcx: &'a Block<'a>,
trans_switch			pub fn trans_switch(bcx: &Block, r: &Repr, scrutinee: ValueRef)
trans_to_lvalue			pub fn trans_to_lvalue<'a>(bcx: &'a Block<'a>,
trans_trait_callee			fn trans_trait_callee<'a>(bcx: &'a Block<'a>,
trans_trait_callee_from_llval			pub fn trans_trait_callee_from_llval<'a>(bcx: &'a Block<'a>,
trans_trait_cast			pub fn trans_trait_cast<'a>(bcx: &'a Block<'a>,
trans_tuple_struct			pub fn trans_tuple_struct(ccx: &CrateContext,
trans_unadjusted			fn trans_unadjusted<'a>(bcx: &'a Block<'a>,
trans_unary			fn trans_unary<'a>(bcx: &'a Block<'a>,
trans_uniq_vstore			pub fn trans_uniq_vstore<'a>(bcx: &'a Block<'a>,
trans_while			pub fn trans_while<'a>(bcx: &'a Block<'a>,
translate_def_id			pub fn translate_def_id(cdata: Cmd, did: ast::DefId) -> ast::DefId 
trap			pub fn trap(bcx: &Block) 
trap			    pub fn trap(&self) 
trunc			    pub fn trunc(&self, val: ValueRef, dest_ty: Type) -> ValueRef 
trunc_or_bitcast			    pub fn trunc_or_bitcast(&self, val: ValueRef, dest_ty: Type) -> ValueRef 
truncated_hash_result			fn truncated_hash_result(symbol_hasher: &mut Sha256) -> ~str 
try			    pub fn try<T,E>(&self, f: || -> Result<T,E>) -> Result<T,E> 
try_add_builtin_trait			pub fn try_add_builtin_trait(tcx: &ctxt,
try_match			    fn try_match(&self, file: &str, prefix: &str, suffix: &str) -> Option<~str>
try_node_id_to_type			pub fn try_node_id_to_type(cx: &ctxt, id: ast::NodeId) -> Option<t> 
try_overloaded_deref			fn try_overloaded_deref(fcx: &FnCtxt,
tuplify_box_ty			fn tuplify_box_ty(tcx: &ty::ctxt, t: ty::t) -> ty::t 
tvec			pub mod tvec;
ty			    pub mod ty;
ty_abbrev			pub struct ty_abbrev 
ty_align			fn ty_align(ty: Type) -> uint 
ty_align			fn ty_align(ty: Type) -> uint 
ty_align			    fn ty_align(ty: Type) -> uint 
ty_bot			    fn ty_bot(&self, _t: ty::t) -> cres<ty::t> 
ty_bot			    fn ty_bot(&self, t: ty::t) -> cres<ty::t> 
ty_bot			    fn ty_bot(&self, t: ty::t) -> cres<ty::t>;
ty_bot			    pub fn ty_bot(&self, b: ty::t) -> cres<ty::t> 
ty_closure_sigil			pub fn ty_closure_sigil(fty: t) -> Sigil 
ty_ctxt			    fn ty_ctxt<'a>(&'a self) -> &'a ctxt 
ty_ctxt			    fn ty_ctxt<'a>(&'a self) -> &'a ctxt;
ty_ctxt			    fn ty_ctxt<'a>(&'a self) -> &'a ty::ctxt 
ty_dtor			pub fn ty_dtor(cx: &ctxt, struct_id: DefId) -> DtorKind 
ty_fn_args			pub fn ty_fn_args(fty: t) -> Vec<t> 
ty_fn_purity			pub fn ty_fn_purity(fty: t) -> ast::Purity 
ty_fn_ret			pub fn ty_fn_ret(fty: t) -> t 
ty_fn_sig			pub fn ty_fn_sig(fty: t) -> FnSig 
ty_fold			    pub mod ty_fold;
ty_generics			pub fn ty_generics(ccx: &CrateCtxt,
ty_generics_for_fn_or_method			pub fn ty_generics_for_fn_or_method(ccx: &CrateCtxt,
ty_generics_for_type			pub fn ty_generics_for_type(ccx: &CrateCtxt,
ty_infer			    fn ty_infer(&self, _span: Span) -> ty::t 
ty_infer			    fn ty_infer(&self, span: Span) -> ty::t;
ty_infer			    fn ty_infer(&self, _span: Span) -> ty::t 
ty_infer			    fn ty_infer(&self, span: Span) -> ty::t 
ty_method_of_trait_method			    fn ty_method_of_trait_method(this: &CrateCtxt,
ty_of_arg			pub fn ty_of_arg<AC: AstConv, RS: RegionScope>(this: &AC, rscope: &RS, a: &ast::Arg,
ty_of_bare_fn			pub fn ty_of_bare_fn<AC:AstConv>(this: &AC, id: ast::NodeId,
ty_of_closure			pub fn ty_of_closure<AC:AstConv,RS:RegionScope>(
ty_of_foreign_fn_decl			pub fn ty_of_foreign_fn_decl(ccx: &CrateCtxt,
ty_of_foreign_item			pub fn ty_of_foreign_item(ccx: &CrateCtxt,
ty_of_inttype			pub fn ty_of_inttype(ity: IntType) -> ty::t 
ty_of_item			pub fn ty_of_item(ccx: &CrateCtxt, it: &ast::Item)
ty_of_method			pub fn ty_of_method<AC:AstConv>(
ty_of_method			    fn ty_of_method(ccx: &CrateCtxt,
ty_of_method_or_bare_fn			fn ty_of_method_or_bare_fn<AC:AstConv>(this: &AC, id: ast::NodeId,
ty_param_bounds_and_ty			pub struct ty_param_bounds_and_ty 
ty_param_bounds_and_ty_for_def			pub fn ty_param_bounds_and_ty_for_def(fcx: &FnCtxt,
ty_param_substs_and_ty			pub struct ty_param_substs_and_ty 
ty_params_to_tys			pub fn ty_params_to_tys(tcx: &ctxt, generics: &ast::Generics) -> Vec<t> 
ty_region			pub fn ty_region(tcx: &ctxt,
ty_size			fn ty_size(ty: Type) -> uint 
ty_size			fn ty_size(ty: Type) -> uint 
ty_size			    fn ty_size(ty: Type) -> uint 
ty_sort_str			pub fn ty_sort_str(cx: &ctxt, t: t) -> ~str 
ty_str_ctxt			    fn ty_str_ctxt<'a>(&'a self) -> tyencode::ctxt<'a> 
ty_str_ctxt			    fn ty_str_ctxt<'a>(&'a self) -> tyencode::ctxt<'a>;
ty_to_def_id			pub fn ty_to_def_id(ty: t) -> Option<ast::DefId> 
ty_to_short_str			pub fn ty_to_short_str(cx: &ctxt, typ: t) -> ~str 
ty_to_str			    pub fn ty_to_str(&self, t: ty::t) -> ~str 
ty_to_str			    fn ty_to_str(&self, t: ty::t) -> ~str 
ty_to_str			    pub fn ty_to_str(&self, t: ty::t) -> ~str 
ty_to_str			    pub fn ty_to_str(&self, a: ty::t) -> ~str 
ty_to_str			pub fn ty_to_str(cx: &ctxt, typ: t) -> ~str 
ty_vstore			pub fn ty_vstore(ty: t) -> vstore 
tycat			    fn tycat(cx: &ctxt, ty: t) -> int 
tydecode			pub mod tydecode;
tydesc			    pub fn tydesc(ccx: &CrateContext) -> Type 
tydesc_info			pub struct tydesc_info 
tydesc_type			    pub fn tydesc_type(&self) -> Type 
tyencode			pub mod tyencode;
type			                                                            struct type?!"),
type			                                                 struct type?!"),
type_			pub mod type_;
type_contents			pub fn type_contents(cx: &ctxt, ty: t) -> TypeContents 
type_err			pub enum type_err 
type_err_to_str			pub fn type_err_to_str(cx: &ctxt, err: &type_err) -> ~str 
type_error_message			    pub fn type_error_message(&self,
type_error_message			    pub fn type_error_message(&self,
type_error_message_str			    pub fn type_error_message_str(&self,
type_error_message_str_with_expected			    pub fn type_error_message_str_with_expected(&self,
type_has_dtor			pub fn type_has_dtor(cx: &ctxt, t: ty::t) -> bool 
type_has_params			pub fn type_has_params(t: t) -> bool 
type_has_regions			pub fn type_has_regions(t: t) -> bool 
type_has_self			pub fn type_has_self(t: t) -> bool { tbox_has_flag(get(t), has_self) }
type_id			pub fn type_id(t: t) -> uint { get(t).id }
type_interior_is_unsafe			pub fn type_interior_is_unsafe(cx: &ctxt, t: ty::t) -> bool 
type_is_bare_fn			pub fn type_is_bare_fn(ty: t) -> bool 
type_is_bare_fn			pub fn type_is_bare_fn(fcx: &FnCtxt, sp: Span, typ: ty::t) -> bool 
type_is_bool			pub fn type_is_bool(ty: t) -> bool { get(ty).sty == ty_bool }
type_is_bot			pub fn type_is_bot(ty: t) -> bool 
type_is_box			pub fn type_is_box(ty: t) -> bool 
type_is_boxed			pub fn type_is_boxed(ty: t) -> bool 
type_is_c_like_enum			pub fn type_is_c_like_enum(cx: &ctxt, ty: t) -> bool 
type_is_c_like_enum			pub fn type_is_c_like_enum(fcx: &FnCtxt, sp: Span, typ: ty::t) -> bool 
type_is_char			pub fn type_is_char(ty: t) -> bool 
type_is_char			pub fn type_is_char(fcx: &FnCtxt, sp: Span, typ: ty::t) -> bool 
type_is_defined_in_local_crate			fn type_is_defined_in_local_crate(original_type: t) -> bool 
type_is_empty			pub fn type_is_empty(cx: &ctxt, t: t) -> bool 
type_is_enum			pub fn type_is_enum(ty: t) -> bool 
type_is_error			pub fn type_is_error(ty: t) -> bool 
type_is_fp			pub fn type_is_fp(ty: t) -> bool 
type_is_immediate			pub fn type_is_immediate(ccx: &CrateContext, ty: ty::t) -> bool 
type_is_integral			pub fn type_is_integral(ty: t) -> bool 
type_is_integral			pub fn type_is_integral(fcx: &FnCtxt, sp: Span, typ: ty::t) -> bool 
type_is_machine			pub fn type_is_machine(ty: t) -> bool 
type_is_newtype_immediate			fn type_is_newtype_immediate(ccx: &CrateContext, ty: ty::t) -> bool 
type_is_nil			pub fn type_is_nil(ty: t) -> bool { get(ty).sty == ty_nil }
type_is_numeric			pub fn type_is_numeric(ty: t) -> bool 
type_is_region_ptr			pub fn type_is_region_ptr(ty: t) -> bool 
type_is_region_ptr			pub fn type_is_region_ptr(fcx: &FnCtxt, sp: Span, typ: ty::t) -> bool 
type_is_scalar			pub fn type_is_scalar(ty: t) -> bool 
type_is_scalar			pub fn type_is_scalar(fcx: &FnCtxt, sp: Span, typ: ty::t) -> bool 
type_is_self			pub fn type_is_self(ty: t) -> bool 
type_is_sendable			pub fn type_is_sendable(cx: &ctxt, t: ty::t) -> bool 
type_is_sequence			pub fn type_is_sequence(ty: t) -> bool 
type_is_signed			pub fn type_is_signed(ty: t) -> bool 
type_is_simd			pub fn type_is_simd(cx: &ctxt, ty: t) -> bool 
type_is_sized			pub fn type_is_sized(cx: &ctxt, ty: ty::t) -> bool 
type_is_slice			pub fn type_is_slice(ty: t) -> bool 
type_is_static			pub fn type_is_static(cx: &ctxt, t: ty::t) -> bool 
type_is_str			pub fn type_is_str(ty: t) -> bool 
type_is_structural			pub fn type_is_structural(ty: t) -> bool 
type_is_trait			pub fn type_is_trait(ty: t) -> bool 
type_is_ty_var			pub fn type_is_ty_var(ty: t) -> bool 
type_is_unique			pub fn type_is_unique(ty: t) -> bool 
type_is_unique_box			pub fn type_is_unique_box(ty: t) -> bool 
type_is_unsafe_function			fn type_is_unsafe_function(ty: ty::t) -> bool 
type_is_unsafe_ptr			pub fn type_is_unsafe_ptr(ty: t) -> bool 
type_is_unsafe_ptr			pub fn type_is_unsafe_ptr(fcx: &FnCtxt, sp: Span, typ: ty::t) -> bool 
type_is_vec			pub fn type_is_vec(ty: t) -> bool 
type_is_zero_size			pub fn type_is_zero_size(ccx: &CrateContext, ty: ty::t) -> bool 
type_metadata			fn type_metadata(cx: &CrateContext,
type_moves_by_default			pub fn type_moves_by_default(cx: &ctxt, ty: t) -> bool 
type_needs_drop			pub fn type_needs_drop(cx: &ctxt, ty: t) -> bool 
type_needs_infer			pub fn type_needs_infer(t: t) -> bool 
type_needs_subst			pub fn type_needs_subst(ty: t) -> bool 
type_needs_unwind_cleanup			pub fn type_needs_unwind_cleanup(cx: &ctxt, ty: t) -> bool 
type_needs_unwind_cleanup_			fn type_needs_unwind_cleanup_(cx: &ctxt, ty: t,
type_of			pub fn type_of(cx: &CrateContext, r: &Repr) -> Type 
type_of			pub mod type_of;
type_of			pub fn type_of(cx: &CrateContext, t: ty::t) -> Type 
type_of_dtor			pub fn type_of_dtor(ccx: &CrateContext, self_ty: ty::t) -> Type 
type_of_explicit_arg			pub fn type_of_explicit_arg(ccx: &CrateContext, arg_ty: ty::t) -> Type 
type_of_fn_from_ty			pub fn type_of_fn_from_ty(cx: &CrateContext, fty: ty::t) -> Type 
type_of_rust_fn			pub fn type_of_rust_fn(cx: &CrateContext, has_env: bool,
type_param			pub fn type_param(ty: t) -> Option<uint> 
type_param_defs			    pub fn type_param_defs<'a>(&'a self) -> &'a [TypeParameterDef] 
type_requires			    fn type_requires(cx: &ctxt, seen: &mut Vec<DefId>,
type_string			        fn type_string(doc: ebml::Doc) -> ~str 
type_structurally_recursive			    fn type_structurally_recursive(cx: &ctxt, seen: &mut Vec<DefId>,
type_to_str			    pub fn type_to_str(&self, ty: Type) -> ~str 
typeck			    pub mod typeck;
types_compatible			                        fn types_compatible(fcx: &FnCtxt, sp: Span,
types_to_str			    pub fn types_to_str(&self, tys: &[Type]) -> ~str 
tys			    pub fn tys(&self, a: ty::t, b: ty::t) -> CoerceResult 
tys			    fn tys(&self, a: ty::t, b: ty::t) -> cres<ty::t>;
tys			    fn tys(&self, a: ty::t, b: ty::t) -> cres<ty::t> 
tys			    fn tys(&self, a: ty::t, b: ty::t) -> cres<ty::t> 
tys			    fn tys(&self, a: ty::t, b: ty::t) -> cres<ty::t> 
tys_in_fn_sig			pub fn tys_in_fn_sig(sig: &FnSig) -> Vec<t> 
tys_to_str			    pub fn tys_to_str(&self, ts: &[ty::t]) -> ~str 
tys_to_str			pub fn tys_to_str(cx: &ctxt, ts: &[t]) -> ~str 
udiv			    pub fn udiv(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
uint_from_ty			    pub fn uint_from_ty(ccx: &CrateContext, t: ast::UintTy) -> Type 
uint_in_range			        fn uint_in_range(ccx: &CrateCtxt, ty: ast::UintTy, disr: ty::Disr) -> bool 
uint_ty_range			    fn uint_ty_range(uint_ty: ast::UintTy) -> (u64, u64) 
uitofp			    pub fn uitofp(&self, val: ValueRef, dest_ty: Type) -> ValueRef 
umax			pub fn umax(cx: &Block, a: ValueRef, b: ValueRef) -> ValueRef 
umin			pub fn umin(cx: &Block, a: ValueRef, b: ValueRef) -> ValueRef 
unify			    fn unify(cls: &mut [RegClass],
unify			pub mod unify;
unify			    fn unify<T:Clone + InferStr,
unify_float_variable			    fn unify_float_variable<C:Combine>(
unify_integral_variable			    fn unify_integral_variable<C:Combine>(
unimpl			    pub fn unimpl(&self, msg: &str) -> ! 
union			    pub fn union<T>(v: &[T], f: |&T| -> TypeContents) -> TypeContents 
universally_quantify_polytype			    fn universally_quantify_polytype(&self, polytype: ty_param_bounds_and_ty)
unlib			    fn unlib(config: &session::Config, stem: &str) -> ~str 
unpack			    pub fn unpack(&self, bcx: &mut &'a Block<'a>) -> ValueRef 
unpack_actual_value			    pub fn unpack_actual_value(&self, a: ty::t, f: |&ty::sty| -> CoerceResult)
unpack_expected			    fn unpack_expected<O>(
unreachable			    pub fn unreachable(&self) 
unresolved_lifetime_ref			    fn unresolved_lifetime_ref(&self,
unsafe_pointer			    pub fn unsafe_pointer(&self) -> TypeContents 
uok			pub fn uok() -> ures 
update_symbols			    pub fn update_symbols(&mut self) 
upvar_borrow			    fn upvar_borrow(&mut self, id: ty::UpvarId) -> ty::UpvarBorrow 
upvar_borrow			    fn upvar_borrow(&mut self, upvar_id: ty::UpvarId) -> ty::UpvarBorrow;
upvar_borrow			    fn upvar_borrow(&mut self, id: ty::UpvarId) -> ty::UpvarBorrow 
upvarify			    fn upvarify(&mut self,
urem			    pub fn urem(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
usage			pub fn usage(argv0: &str) 
use			fn use(a: &int) { }
use_expr			    pub fn use_expr(&mut self,
use_fn_arg			    pub fn use_fn_arg(&mut self, arg_expr: @Expr) 
use_fn_args			    pub fn use_fn_args(&mut self, arg_exprs: &[@Expr]) 
use_overloaded_operator			    pub fn use_overloaded_operator(&mut self,
use_pat			    pub fn use_pat(&mut self, pat: @Pat) 
use_start			fn use_start(krate: &ast::Crate) -> bool 
use_std			fn use_std(krate: &ast::Crate) -> bool 
used_on_entry			    fn used_on_entry(&self, ln: LiveNode, var: Variable) -> bool 
useful			enum useful 
user_iter			    pub fn user_iter(self) -> Users 
user_string			    fn user_string(&self, _tcx: &ctxt) -> ~str 
user_string			    fn user_string(&self, tcx: &ctxt) -> ~str 
user_string			    fn user_string(&self, tcx: &ctxt) -> ~str;
util			pub mod util 
va_arg			    pub fn va_arg(&self, list: ValueRef, ty: Type) -> ValueRef 
val_to_str			    pub fn val_to_str(&self, val: ValueRef) -> ~str 
val_to_str			    pub fn val_to_str(&self, val: ValueRef) -> ~str 
val_ty			pub fn val_ty(v: ValueRef) -> Type 
valid_range_bounds			pub fn valid_range_bounds(ccx: &CrateCtxt,
validate			    pub fn validate(&self) 
value			pub mod value;
values_are_none			    fn values_are_none(&self) -> bool 
values_str			    fn values_str(&self, values: &ValuePairs) -> Option<~str> 
values_str			    fn values_str(&self, values: &ValuePairs) -> Option<~str>;
var_ids			pub fn var_ids<T:Combine>(this: &T,
var_region			    pub fn var_region(&self, id: ast::NodeId) -> ty::Region 
var_scope			    pub fn var_scope(&self, var_id: ast::NodeId) -> ast::NodeId 
var_scope			pub fn var_scope(tcx: &ty::ctxt,
var_sub_t			    fn var_sub_t<T:Clone + InferStr + LatticeValue,
var_sub_var			    fn var_sub_var<T:Clone + InferStr + LatticeValue,
variable			    fn variable(&self, node_id: NodeId, span: Span) -> Variable 
variable_name			    fn variable_name(&self, var: Variable) -> ~str 
variadic_func			    pub fn variadic_func(args: &[Type], ret: &Type) -> Type 
variance			pub mod variance;
variant_disr_val			fn variant_disr_val(d: ebml::Doc) -> Option<ty::Disr> 
variant_expr			    fn variant_expr(variants: &[ast::P<ast::Variant>], id: ast::NodeId) -> Option<@Expr> 
variant_opt			fn variant_opt(bcx: &Block, pat_id: ast::NodeId) -> Opt 
vars_created_since_snapshot			    pub fn vars_created_since_snapshot(&self, snapshot: uint)
vec			    pub fn vec(ccx: &CrateContext, ty: &Type) -> Type 
vec_map_to_str			pub fn vec_map_to_str<T>(ts: &[T], f: |t: &T| -> ~str) -> ~str 
vec_metadata			fn vec_metadata(cx: &CrateContext,
vec_slice_info			        fn vec_slice_info(tcx: &ty::ctxt,
vec_slice_metadata			fn vec_slice_metadata(cx: &CrateContext,
vec_types			pub fn vec_types(bcx: &Block, vec_ty: ty::t) -> VecTypes 
vec_types_from_expr			pub fn vec_types_from_expr(bcx: &Block, vec_expr: &ast::Expr) -> VecTypes 
vector			    pub fn vector(ty: &Type, len: u64) -> Type 
vector_splat			    pub fn vector_splat(&self, num_elts: uint, elt: ValueRef) -> ValueRef 
verbose			    pub fn verbose(&self) -> bool { self.debugging_opt(VERBOSE) }
version			pub fn version(argv0: &str) 
view_item_in_cfg			fn view_item_in_cfg(cx: &Context, item: &ast::ViewItem) -> bool 
visit			        fn visit(cstore: &CStore, cnum: ast::CrateNum,
visit			    pub fn visit(&mut self, ty_name: &str, args: &[ValueRef]) 
visit_arm			    fn visit_arm(&mut self, a: &Arm, _: ()) { visit_arm(self, a); }
visit_arm			    fn visit_arm(&mut self, a: &Arm, _: ()) 
visit_arm			fn visit_arm(ir: &mut IrMaps, arm: &Arm) 
visit_arm			    fn visit_arm(&mut self, a: &Arm, cx: Context) 
visit_arm			    fn visit_arm(&mut self, arm: &Arm, _: ()) 
visit_arm			    fn visit_arm(&mut self, a: &ast::Arm, _: ()) { visit_arm(self, a); }
visit_arm			fn visit_arm(rcx: &mut Rcx, arm: &ast::Arm) 
visit_block			    fn visit_block(&mut self, b: &ast::Block, _: ()) 
visit_block			    fn visit_block(&mut self, b: &Block, _: ()) 
visit_block			    fn visit_block(&mut self, block: &ast::Block, _:()) 
visit_block			    fn visit_block(&mut self, _: &ast::Block, _: ()) {}
visit_block			    fn visit_block(&mut self, _: &ast::Block, _: ()) {}
visit_block			    fn visit_block(&mut self, b: &Block, cx: Context) 
visit_block			    fn visit_block(&mut self, block: &Block, _: ()) 
visit_block			    fn visit_block(&mut self, block: &Block, context: ReducedGraphParent) 
visit_block			    fn visit_block(&mut self,
visit_block			    fn visit_block(&mut self, b: &ast::Block, _: ()) 
visit_block			    fn visit_block(&mut self, b: &ast::Block, _: ()) { visit_block(self, b); }
visit_block			fn visit_block(rcx: &mut Rcx, b: &ast::Block) 
visit_block			    fn visit_block(&mut self, b: &ast::Block, _: ()) { visit_block(b, self); }
visit_block			fn visit_block(b: &ast::Block, wbcx: &mut WbCtxt) 
visit_crate			fn visit_crate(e: &Env, c: &ast::Crate) 
visit_expr			    fn visit_expr(&mut self, e: &ast::Expr, _: ()) 
visit_expr			    fn visit_expr(&mut self, e: &ast::Expr, _: ()) 
visit_expr			    fn visit_expr(&mut self, ex: &Expr, _: ()) 
visit_expr			    fn visit_expr(&mut self, ex: &ast::Expr, _: ()) 
visit_expr			    fn visit_expr(&mut self, ex: &Expr, _: ()) 
visit_expr			    fn visit_expr(&mut self, e: &Expr, _: ()) 
visit_expr			    fn visit_expr(&mut self, ex: &Expr, env: bool) 
visit_expr			    fn visit_expr(&mut self, e: &ast::Expr, cx:Context) 
visit_expr			    fn visit_expr(&mut self, ex: &Expr, _: ()) 
visit_expr			    fn visit_expr(&mut self, e: &ast::Expr, is_const: bool) 
visit_expr			    fn visit_expr(&mut self, expr: &ast::Expr, _: ()) 
visit_expr			    fn visit_expr(&mut self, expr: &ast::Expr, _:()) 
visit_expr			    fn visit_expr(&mut self, expr: &ast::Expr, depth: int) 
visit_expr			    fn visit_expr(&mut self, ex: &Expr, _: ()) 
visit_expr			    fn visit_expr(&mut self, _: &ast::Expr, _: ()) {}
visit_expr			    fn visit_expr(&mut self, e: &ast::Expr, _: ()) 
visit_expr			    fn visit_expr(&mut self, ex: &Expr, _: ()) { visit_expr(self, ex); }
visit_expr			    fn visit_expr(&mut self, ex: &Expr, _: ()) 
visit_expr			fn visit_expr(ir: &mut IrMaps, expr: &Expr) 
visit_expr			    fn visit_expr(&mut self, ex: &Expr, _: ()) 
visit_expr			    fn visit_expr(&mut self, _: &ast::Expr, _: ()) {}
visit_expr			    fn visit_expr(&mut self, expr: &ast::Expr, _: ()) 
visit_expr			    fn visit_expr(&mut self, expr: &ast::Expr, _: ()) 
visit_expr			    fn visit_expr(&mut self, ex: &Expr, cx: Context) 
visit_expr			    fn visit_expr(&mut self, expr: &Expr, _: ()) 
visit_expr			    fn visit_expr(&mut self, ex: &ast::Expr, _: ()) { visit_expr(self, ex); }
visit_expr			fn visit_expr(rcx: &mut Rcx, expr: &ast::Expr) 
visit_expr			    fn visit_expr(&mut self, ex: &ast::Expr, _: ()) 
visit_expr			    fn visit_expr(&mut self, ex:&ast::Expr, _: ()) { visit_expr(ex, self); }
visit_expr			fn visit_expr(e: &ast::Expr, wbcx: &mut WbCtxt) 
visit_expr			    fn visit_expr(&mut self, e: &ast::Expr, _: ()) 
visit_expr_post			    fn visit_expr_post(&mut self, e: &Expr, _: ()) 
visit_fn			    fn visit_fn(&mut self, _fk: &visit::FnKind, _fd: &ast::FnDecl,
visit_fn			    fn visit_fn(&mut self, _: &FnKind, _: &FnDecl, _: &Block,
visit_fn			    fn visit_fn(&mut self, fk: &FnKind, fd: &FnDecl,
visit_fn			    fn visit_fn(&mut self, fk: &FnKind, fd: &FnDecl, b: &Block, s: Span, n: NodeId, _: ()) 
visit_fn			    fn visit_fn(&mut self, fk: &visit::FnKind,
visit_fn			    fn visit_fn(&mut self, fn_kind: &visit::FnKind, fn_decl: &ast::FnDecl,
visit_fn			    fn visit_fn(&mut self, fk: &visit::FnKind, fd: &ast::FnDecl,
visit_fn			    fn visit_fn(&mut self, fk: &visit::FnKind, fd: &FnDecl,
visit_fn			    fn visit_fn(&mut self, fk: &visit::FnKind, decl: &ast::FnDecl,
visit_fn			    fn visit_fn(&mut self, fk: &FnKind, fd: &FnDecl, b: &Block, s: Span, n: NodeId, _: ()) 
visit_fn			fn visit_fn(ir: &mut IrMaps,
visit_fn			    fn visit_fn(&mut self, fk: &visit::FnKind, fd: &FnDecl,
visit_fn			    fn visit_fn(&mut self, a: &visit::FnKind, b: &ast::FnDecl,
visit_fn			    fn visit_fn(&mut self, fk: &visit::FnKind, fd: &ast::FnDecl,
visit_fn			    fn visit_fn(&mut self,
visit_fn			    fn visit_fn(&mut self, fk: &FnKind, fd: &FnDecl,
visit_fn			    fn visit_fn(&mut self, fk: &visit::FnKind, fd: &ast::FnDecl,
visit_fn			    fn visit_fn(&mut self, _: &visit::FnKind, _: &ast::FnDecl,
visit_fn_decl			    fn visit_fn_decl(&mut self,
visit_foreign_item			    fn visit_foreign_item(&mut self, i: &ast::ForeignItem, _: ()) 
visit_foreign_item			    fn visit_foreign_item(&mut self, ni: &ForeignItem, _: ()) 
visit_foreign_item			    fn visit_foreign_item(&mut self, fi: &ast::ForeignItem, _: ()) 
visit_foreign_item			    fn visit_foreign_item(&mut self, it: &ast::ForeignItem, _: ()) 
visit_foreign_item			    fn visit_foreign_item(&mut self, a: &ast::ForeignItem, _: ()) 
visit_foreign_item			    fn visit_foreign_item(&mut self, fi: &ast::ForeignItem, _: ()) 
visit_foreign_item			    fn visit_foreign_item(&mut self, item: &ast::ForeignItem, _: ()) 
visit_foreign_item			    fn visit_foreign_item(&mut self, foreign_item: &ForeignItem,
visit_foreign_item			    fn visit_foreign_item(&mut self, i: &ast::ForeignItem, _: ()) 
visit_generics			    fn visit_generics(&mut self, generics: &ast::Generics, _: ()) 
visit_id			    fn visit_id(&self, id: ast::NodeId) 
visit_id			    fn visit_id(&self, id: ast::NodeId) 
visit_ident			    fn visit_ident(&mut self, sp: Span, id: ast::Ident, _: ()) 
visit_ids			    fn visit_ids(&self, f: |&mut ast_util::IdVisitor<Context>|) 
visit_item			    fn visit_item(&mut self, i: &ast::Item, _:()) 
visit_item			    fn visit_item(&mut self, a: &ast::Item, _: ()) 
visit_item			fn visit_item(e: &Env, i: &ast::Item) 
visit_item			    fn visit_item(&mut self, i: &Item, _: ()) 
visit_item			    fn visit_item(&mut self, item: &Item, _: ()) 
visit_item			    fn visit_item(&mut self, _: &ast::Item, _: ()) {}
visit_item			    fn visit_item(&mut self, item: &ast::Item, _: ()) 
visit_item			    fn visit_item(&mut self, i: &Item, env: bool) 
visit_item			    fn visit_item(&mut self, it: &Item, _: ()) 
visit_item			    fn visit_item(&mut self, i: &ast::Item, _cx: Context) 
visit_item			    fn visit_item(&mut self, i: &ast::Item, _is_const: bool) 
visit_item			    fn visit_item(&mut self, _item: &ast::Item, _: ()) 
visit_item			    fn visit_item(&mut self, item: &ast::Item, _: ()) 
visit_item			    fn visit_item(&mut self, item: &Item, _:()) 
visit_item			    fn visit_item(&mut self, _: &ast::Item, _: int) 
visit_item			    fn visit_item(&mut self, i: &Item, _: ()) 
visit_item			    fn visit_item(&mut self, item: &ast::Item, _: ()) 
visit_item			    fn visit_item(&mut self, it: &ast::Item, _: ()) 
visit_item			    fn visit_item(&mut self, item: &ast::Item, _: ()) 
visit_item			    fn visit_item(&mut self, _item: &ast::Item, _: ()) 
visit_item			    fn visit_item(&mut self, i: &Item, cx: Context) 
visit_item			    fn visit_item(&mut self, item: &Item, _: ()) 
visit_item			    fn visit_item(&mut self, item: &Item, context: ReducedGraphParent) 
visit_item			    fn visit_item(&mut self,
visit_item			    fn visit_item(&mut self, i: &ast::Item, _:()) 
visit_item			    fn visit_item(&mut self, _: &ast::Item, _: ()) { }
visit_item			    fn visit_item(&mut self, i: &ast::Item, _: ()) 
visit_item			    fn visit_item(&mut self, i: &ast::Item, _: ()) { visit_item(self, i); }
visit_item			fn visit_item(_rcx: &mut Rcx, _item: &ast::Item) 
visit_item			    fn visit_item(&mut self, _: &ast::Item, _: ()) 
visit_item			    fn visit_item(&mut self, i: &ast::Item, _: ()) { visit_item(i, self); }
visit_item			fn visit_item(_item: &ast::Item, _wbcx: &mut WbCtxt) 
visit_item			    fn visit_item(&mut self, item: &Item, _: ()) 
visit_item			    fn visit_item(&mut self, i: &ast::Item, _: ()) 
visit_item			    fn visit_item(&mut self, item: &ast::Item, _: ()) 
visit_lifetime_ref			        fn visit_lifetime_ref(&mut self,
visit_lifetime_ref			    fn visit_lifetime_ref(&mut self,
visit_local			    fn visit_local(&mut self, l: &ast::Local, _: ()) 
visit_local			    fn visit_local(&mut self, l: &Local, _: ()) 
visit_local			    fn visit_local(&mut self, l: &Local, _: ()) 
visit_local			    fn visit_local(&mut self, l: &Local, _: ()) { visit_local(self, l); }
visit_local			    fn visit_local(&mut self, l: &Local, _: ()) 
visit_local			fn visit_local(ir: &mut IrMaps, local: &Local) 
visit_local			    fn visit_local(&mut self, l: &Local, _: ()) 
visit_local			    fn visit_local(&mut self, l: &Local, cx: Context) 
visit_local			    fn visit_local(&mut self, local: &Local, _: ()) 
visit_local			    fn visit_local(&mut self, local: &ast::Local, _: ()) 
visit_local			    fn visit_local(&mut self, l: &ast::Local, _: ()) { visit_local(self, l); }
visit_local			fn visit_local(rcx: &mut Rcx, l: &ast::Local) 
visit_local			    fn visit_local(&mut self, l: &ast::Local, _: ()) { visit_local(l, self); }
visit_local			fn visit_local(l: &ast::Local, wbcx: &mut WbCtxt) 
visit_mac			    fn visit_mac(&mut self, macro: &ast::Mac, _: ()) 
visit_mod			    fn visit_mod(&mut self, m: &ast::Mod, _sp: Span, id: ast::NodeId, _: ()) 
visit_node			    fn visit_node(&mut self, node: &ast_map::Node) 
visit_pat			    fn visit_pat(&mut self, p: &ast::Pat, _: ()) 
visit_pat			    fn visit_pat(&mut self, p: &Pat, _: ()) 
visit_pat			    fn visit_pat(&mut self, p: &Pat, env: bool) 
visit_pat			    fn visit_pat(&mut self, p: &ast::Pat, _: ()) 
visit_pat			    fn visit_pat(&mut self, pattern: &ast::Pat, _: ()) 
visit_pat			    fn visit_pat(&mut self, p: &Pat, cx: Context) 
visit_pat			    fn visit_pat(&mut self, p: &ast::Pat, _: ()) 
visit_pat			    fn visit_pat(&mut self, p: &ast::Pat, _: ()) { visit_pat(p, self); }
visit_pat			fn visit_pat(p: &ast::Pat, wbcx: &mut WbCtxt) 
visit_path			    fn visit_path(&mut self, path: &ast::Path, id: ast::NodeId, _: ()) 
visit_path			    fn visit_path(&mut self, path: &ast::Path, id: ast::NodeId, _: ()) 
visit_sig			    pub fn visit_sig(&mut self, retval: uint, sig: &ty::FnSig) 
visit_stmt			    fn visit_stmt(&mut self, s: &Stmt, _: ()) 
visit_stmt			    fn visit_stmt(&mut self, s: &ast::Stmt, _: ()) 
visit_stmt			    fn visit_stmt(&mut self, s: &Stmt, cx: Context) 
visit_stmt			    fn visit_stmt(&mut self, s: &ast::Stmt, _: ()) { visit_stmt(s, self); }
visit_stmt			fn visit_stmt(s: &ast::Stmt, wbcx: &mut WbCtxt) 
visit_struct_def			    fn visit_struct_def(&mut self,
visit_struct_def			    fn visit_struct_def(&mut self, s: &ast::StructDef, i: ast::Ident,
visit_struct_field			    fn visit_struct_field(&mut self, s: &ast::StructField, _: ()) 
visit_struct_field			    fn visit_struct_field(&mut self, s: &ast::StructField, _: ()) 
visit_trait_method			    fn visit_trait_method(&mut self, trait_method: &ast::TraitMethod, _: ()) 
visit_ty			    fn visit_ty(&mut self, t: &ast::Ty, _: ()) 
visit_ty			    fn visit_ty(&mut self, _t: &ast::Ty, _: ()) {}
visit_ty			    fn visit_ty(&mut self, t: &Ty, _: ()) 
visit_ty			    fn visit_ty(&mut self, _t: &ast::Ty, _: ()) {}
visit_ty			    fn visit_ty(&mut self, ty: &ast::Ty, _: ()) 
visit_ty			    fn visit_ty(&mut self, _t: &Ty, _: ()) {}
visit_ty			    fn visit_ty(&mut self, t: &ast::Ty, _: ()) 
visit_ty			    fn visit_ty(&mut self, ty: &ast::Ty, _: ()) 
visit_ty			    fn visit_ty(&mut self, ty: &Ty, _: ()) 
visit_ty			    fn visit_ty(&mut self, ty: &ast::Ty, scope: Scope<'a>) 
visit_ty			    pub fn visit_ty(&mut self, t: ty::t) 
visit_ty			    fn visit_ty(&mut self, _t: &ast::Ty, _: ()) {}
visit_ty_method			    fn visit_ty_method(&mut self, t: &ast::TypeMethod, _: ()) 
visit_ty_method			    fn visit_ty_method(&mut self,
visit_variant			    fn visit_variant(&mut self, v: &ast::Variant, g: &ast::Generics, _: ()) 
visit_variant			    fn visit_variant(&mut self, v: &ast::Variant, g: &ast::Generics, _: ()) 
visit_view_item			    fn visit_view_item(&mut self, i: &ast::ViewItem, _: ()) 
visit_view_item			    fn visit_view_item(&mut self, a: &ast::ViewItem, _: ()) 
visit_view_item			fn visit_view_item(e: &mut Env, i: &ast::ViewItem) 
visit_view_item			    fn visit_view_item(&mut self, i: &ast::ViewItem, _: ()) 
visit_view_item			    fn visit_view_item(&mut self, _: &ast::ViewItem, _: ()) {}
visit_view_item			    fn visit_view_item(&mut self, a: &ast::ViewItem, _: ()) 
visit_view_item			    fn visit_view_item(&mut self, i: &ast::ViewItem, _: ()) 
visit_view_item			    fn visit_view_item(&mut self, vi: &ViewItem, _: ()) 
visit_view_item			    fn visit_view_item(&mut self, view_item: &ViewItem, context: ReducedGraphParent) 
visitor_object_ty			pub fn visitor_object_ty(tcx: &ctxt,
void			    pub fn void(ccx: &CrateContext) -> Type 
volatile_load			    pub fn volatile_load(&self, ptr: ValueRef) -> ValueRef 
volatile_load_intrinsic			    fn volatile_load_intrinsic(bcx: &Block) 
volatile_store			    pub fn volatile_store(&self, val: ValueRef, ptr: ValueRef) 
volatile_store_intrinsic			    fn volatile_store_intrinsic(bcx: &Block) 
vp2i			pub fn vp2i(cx: &Block, v: ValueRef) -> ValueRef 
vstore			pub enum vstore 
vstore_name_and_extra			    pub fn vstore_name_and_extra(&mut self,
vstore_to_str			pub fn vstore_to_str(cx: &ctxt, vs: ty::vstore) -> ~str 
vstore_ty_to_str			pub fn vstore_ty_to_str(cx: &ctxt, mt: &mt, vs: ty::vstore) -> ~str 
vstores			    fn vstores(&self,
vtable			    pub fn vtable(ccx: &CrateContext) -> Type 
vtable			pub mod vtable;
vtable_context			    pub fn vtable_context<'a>(&'a self) -> VtableContext<'a> 
vtable_decoder_helpers			pub trait vtable_decoder_helpers 
vtable_id			pub fn vtable_id(ccx: &CrateContext,
vtable_origin			pub enum vtable_origin 
walk_block			    fn walk_block(&mut self,
walk_block			    fn walk_block(cx: &CrateContext,
walk_call			    fn walk_call(&mut self,
walk_decl			    fn walk_decl(&mut self,
walk_decl			    fn walk_decl(cx: &CrateContext,
walk_expr			    fn walk_expr(&mut self,
walk_expr			    fn walk_expr(cx: &CrateContext,
walk_exprs			    fn walk_exprs(&mut self,
walk_opt_expr			    fn walk_opt_expr(&mut self,
walk_pat			    fn walk_pat(&mut self,
walk_pat_alternatives			    fn walk_pat_alternatives(&mut self,
walk_pattern			    fn walk_pattern(cx: &CrateContext,
walk_regions_and_ty			pub fn walk_regions_and_ty(cx: &ctxt, ty: t, fldr: |r: Region|, fldt: |t: t|)
walk_stmt			    fn walk_stmt(&mut self,
walk_ty			pub fn walk_ty(ty: t, f: |t|) 
warn			    pub fn warn(&self, msg: &str) 
warn_about_dead_assign			    fn warn_about_dead_assign(&self,
warn_about_unused			    fn warn_about_unused(&self,
warn_about_unused_args			    fn warn_about_unused_args(&self, decl: &FnDecl, entry_ln: LiveNode) 
warn_about_unused_or_dead_vars_in_pat			    fn warn_about_unused_or_dead_vars_in_pat(&mut self, pat: &Pat) 
warn_dead_code			    fn warn_dead_code(&mut self, id: ast::NodeId,
warn_if_multiple_versions			fn warn_if_multiple_versions(e: &mut Env,
weird			    fn weird() 
when			    pub fn when(&self, cond: bool) -> TypeContents 
wild			fn wild() -> @Pat 
wild_multi			fn wild_multi() -> @Pat 
with_appropriate_checker			fn with_appropriate_checker(cx: &Context,
with_assignee_loan_path			fn with_assignee_loan_path(bccx: &BorrowckCtxt, expr: &ast::Expr, op: |@LoanPath|) 
with_bnd			    fn with_bnd<T:Clone>(&self, b: &Bounds<T>, t: T) -> Bounds<T> 
with_bnd			    fn with_bnd<T:Clone>(&self, b: &Bounds<T>, t: T) -> Bounds<T>;
with_capacity			    pub fn with_capacity(num_nodes: uint,
with_codegen			            fn with_codegen(tm: TargetMachineRef, llmod: ModuleRef,
with_cond			pub fn with_cond<'a>(
with_constant_rib			    fn with_constant_rib(&mut self, f: |&mut Resolver|) 
with_extension			    pub fn with_extension(&self, extension: &str) -> Path 
with_field_tys			pub fn with_field_tys<R>(tcx: &ty::ctxt,
with_insn_ctxt			pub fn with_insn_ctxt(blk: |&[&'static str]|) 
with_label_rib			    fn with_label_rib(&mut self, f: |&mut Resolver|) 
with_lint_attrs			    fn with_lint_attrs(&mut self,
with_loop_nodes			    fn with_loop_nodes<R>(&mut self,
with_new_scope			    fn with_new_scope(cx: &CrateContext,
with_no_errors			    fn with_no_errors<T>(&mut self, f: |&mut Resolver| -> T) -> T 
with_overflow_instrinsic			    fn with_overflow_instrinsic(bcx: &Block, name: &'static str, t: ty::t) 
with_path			pub fn with_path<T>(cx: &ctxt, id: ast::DefId, f: |ast_map::PathElems| -> T) -> T 
with_region_lb			    pub fn with_region_lb<R>(&self, lb: ast::NodeId, f: || -> R) -> R 
with_scope			    fn with_scope(&mut self, name: Option<Ident>, f: |&mut Resolver|) 
with_taken			    fn with_taken(taken: &[ast::Lifetime]) -> LifeGiver 
with_type_parameter_rib			    fn with_type_parameter_rib(&mut self,
with_version			pub fn with_version(krate: &str) -> Option<(InternedString, ast::StrStyle)> 
write			pub mod write 
write			    fn write(&self) 
write			    fn write(&mut self, bytes: &[u8]) -> io::IoResult<()> 
write_adjustment			    pub fn write_adjustment(&self,
write_autoderef_adjustment			    pub fn write_autoderef_adjustment(&self,
write_bot			    pub fn write_bot(&self, node_id: ast::NodeId) 
write_call			    fn write_call(fcx: &FnCtxt, call_expr: &ast::Expr, output: ty::t) 
write_content			pub fn write_content<'a>(
write_error			    pub fn write_error(&self, node_id: ast::NodeId) 
write_guard			pub mod write_guard;
write_i64			fn write_i64(writer: &mut MemWriter, &n: &i64) 
write_lvalue			    fn write_lvalue(&mut self, expr: &Expr, succ: LiveNode, acc: uint)
write_metadata			pub fn write_metadata(cx: &CrateContext, krate: &ast::Crate) -> Vec<u8> 
write_nil			    pub fn write_nil(&self, node_id: ast::NodeId) 
write_out_deps			fn write_out_deps(sess: &Session,
write_substs			    pub fn write_substs(&self, node_id: ast::NodeId, substs: ty::substs) 
write_substs_to_tcx			pub fn write_substs_to_tcx(tcx: &ty::ctxt,
write_tag_and_id			trait write_tag_and_id 
write_tpt_to_tcx			pub fn write_tpt_to_tcx(tcx: &ty::ctxt,
write_ty			    pub fn write_ty(&self, node_id: ast::NodeId, ty: ty::t) 
write_ty_substs			    pub fn write_ty_substs(&self,
write_ty_to_tcx			pub fn write_ty_to_tcx(tcx: &ty::ctxt, node_id: ast::NodeId, ty: ty::t) 
write_type			pub fn write_type(ecx: &EncodeContext,
write_u32_be			fn write_u32_be(dst: &mut[u8], input: u32) 
write_vars			    fn write_vars(&self,
write_vstore			pub fn write_vstore(ecx: &EncodeContext,
writeback			pub mod writeback;
x86			    pub mod x86;
x86_64			    pub mod x86_64;
x86_64_ty			    fn x86_64_ty(ccx: &CrateContext,
xform			    fn xform(&mut self,
xform			    fn xform(self, v: Self) -> Self;
xform			    fn xform(self, v: ty::Variance) -> ty::Variance 
xor			    pub fn xor(&self, lhs: ValueRef, rhs: ValueRef) -> ValueRef 
zero_mem			pub fn zero_mem(cx: &Block, llptr: ValueRef, t: ty::t) 
zero_until			    fn zero_until(&mut self, idx: uint) 
zero_until			    fn zero_until(&mut self, idx: uint);
zext			    pub fn zext(&self, val: ValueRef, dest_ty: Type) -> ValueRef 
zext_or_bitcast			    pub fn zext_or_bitcast(&self, val: ValueRef, dest_ty: Type) -> ValueRef 
